{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt16 = void 0;\nconst uint_1 = require(\"./uint\");\nconst utils_1 = require(\"../utils\");\n/**\n * Derived UInt class for serializing/deserializing 16 bit UInt\n */\nclass UInt16 extends uint_1.UInt {\n  constructor(bytes) {\n    super(bytes !== null && bytes !== void 0 ? bytes : UInt16.defaultUInt16.bytes);\n  }\n  static fromParser(parser) {\n    return new UInt16(parser.read(UInt16.width));\n  }\n  /**\n   * Construct a UInt16 object from a number\n   *\n   * @param val UInt16 object or number\n   */\n  static from(val) {\n    if (val instanceof UInt16) {\n      return val;\n    }\n    if (typeof val === 'number') {\n      UInt16.checkUintRange(val, 0, 0xffff);\n      const buf = new Uint8Array(UInt16.width);\n      (0, utils_1.writeUInt16BE)(buf, val, 0);\n      return new UInt16(buf);\n    }\n    throw new Error('Can not construct UInt16 with given value');\n  }\n  /**\n   * get the value of a UInt16 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf() {\n    return parseInt((0, utils_1.readUInt16BE)(this.bytes, 0));\n  }\n}\nexports.UInt16 = UInt16;\nUInt16.width = 16 / 8; // 2\nUInt16.defaultUInt16 = new UInt16(new Uint8Array(UInt16.width));","map":{"version":3,"names":["uint_1","require","utils_1","UInt16","UInt","constructor","bytes","defaultUInt16","fromParser","parser","read","width","from","val","checkUintRange","buf","Uint8Array","writeUInt16BE","Error","valueOf","parseInt","readUInt16BE","exports"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-binary-codec/src/types/uint-16.ts"],"sourcesContent":["import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { readUInt16BE, writeUInt16BE } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 16 bit UInt\n */\nclass UInt16 extends UInt {\n  protected static readonly width: number = 16 / 8 // 2\n  static readonly defaultUInt16: UInt16 = new UInt16(\n    new Uint8Array(UInt16.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt16.defaultUInt16.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt16(parser.read(UInt16.width))\n  }\n\n  /**\n   * Construct a UInt16 object from a number\n   *\n   * @param val UInt16 object or number\n   */\n  static from<T extends UInt16 | number>(val: T): UInt16 {\n    if (val instanceof UInt16) {\n      return val\n    }\n\n    if (typeof val === 'number') {\n      UInt16.checkUintRange(val, 0, 0xffff)\n\n      const buf = new Uint8Array(UInt16.width)\n      writeUInt16BE(buf, val, 0)\n      return new UInt16(buf)\n    }\n\n    throw new Error('Can not construct UInt16 with given value')\n  }\n\n  /**\n   * get the value of a UInt16 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(readUInt16BE(this.bytes, 0))\n  }\n}\n\nexport { UInt16 }\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAEA;;;AAGA,MAAME,MAAO,SAAQH,MAAA,CAAAI,IAAI;EAMvBC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIH,MAAM,CAACI,aAAa,CAACD,KAAK,CAAC;EAC5C;EAEA,OAAOE,UAAUA,CAACC,MAAoB;IACpC,OAAO,IAAIN,MAAM,CAACM,MAAM,CAACC,IAAI,CAACP,MAAM,CAACQ,KAAK,CAAC,CAAC;EAC9C;EAEA;;;;;EAKA,OAAOC,IAAIA,CAA4BC,GAAM;IAC3C,IAAIA,GAAG,YAAYV,MAAM,EAAE;MACzB,OAAOU,GAAG;;IAGZ,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC3BV,MAAM,CAACW,cAAc,CAACD,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC;MAErC,MAAME,GAAG,GAAG,IAAIC,UAAU,CAACb,MAAM,CAACQ,KAAK,CAAC;MACxC,IAAAT,OAAA,CAAAe,aAAa,EAACF,GAAG,EAAEF,GAAG,EAAE,CAAC,CAAC;MAC1B,OAAO,IAAIV,MAAM,CAACY,GAAG,CAAC;;IAGxB,MAAM,IAAIG,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EAEA;;;;;EAKAC,OAAOA,CAAA;IACL,OAAOC,QAAQ,CAAC,IAAAlB,OAAA,CAAAmB,YAAY,EAAC,IAAI,CAACf,KAAK,EAAE,CAAC,CAAC,CAAC;EAC9C;;AAGOgB,OAAA,CAAAnB,MAAA,GAAAA,MAAA;AA5CmBA,MAAA,CAAAQ,KAAK,GAAW,EAAE,GAAG,CAAC,EAAC;AACjCR,MAAA,CAAAI,aAAa,GAAW,IAAIJ,MAAM,CAChD,IAAIa,UAAU,CAACb,MAAM,CAACQ,KAAK,CAAC,CAC7B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}