{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst flags_1 = require(\"../utils/flags\");\nconst accountDelete_1 = require(\"./accountDelete\");\nconst accountSet_1 = require(\"./accountSet\");\nconst AMMBid_1 = require(\"./AMMBid\");\nconst AMMCreate_1 = require(\"./AMMCreate\");\nconst AMMDelete_1 = require(\"./AMMDelete\");\nconst AMMDeposit_1 = require(\"./AMMDeposit\");\nconst AMMVote_1 = require(\"./AMMVote\");\nconst AMMWithdraw_1 = require(\"./AMMWithdraw\");\nconst checkCancel_1 = require(\"./checkCancel\");\nconst checkCash_1 = require(\"./checkCash\");\nconst checkCreate_1 = require(\"./checkCreate\");\nconst clawback_1 = require(\"./clawback\");\nconst common_1 = require(\"./common\");\nconst depositPreauth_1 = require(\"./depositPreauth\");\nconst DIDDelete_1 = require(\"./DIDDelete\");\nconst DIDSet_1 = require(\"./DIDSet\");\nconst escrowCancel_1 = require(\"./escrowCancel\");\nconst escrowCreate_1 = require(\"./escrowCreate\");\nconst escrowFinish_1 = require(\"./escrowFinish\");\nconst NFTokenAcceptOffer_1 = require(\"./NFTokenAcceptOffer\");\nconst NFTokenBurn_1 = require(\"./NFTokenBurn\");\nconst NFTokenCancelOffer_1 = require(\"./NFTokenCancelOffer\");\nconst NFTokenCreateOffer_1 = require(\"./NFTokenCreateOffer\");\nconst NFTokenMint_1 = require(\"./NFTokenMint\");\nconst offerCancel_1 = require(\"./offerCancel\");\nconst offerCreate_1 = require(\"./offerCreate\");\nconst payment_1 = require(\"./payment\");\nconst paymentChannelClaim_1 = require(\"./paymentChannelClaim\");\nconst paymentChannelCreate_1 = require(\"./paymentChannelCreate\");\nconst paymentChannelFund_1 = require(\"./paymentChannelFund\");\nconst setRegularKey_1 = require(\"./setRegularKey\");\nconst signerListSet_1 = require(\"./signerListSet\");\nconst ticketCreate_1 = require(\"./ticketCreate\");\nconst trustSet_1 = require(\"./trustSet\");\nconst XChainAccountCreateCommit_1 = require(\"./XChainAccountCreateCommit\");\nconst XChainAddAccountCreateAttestation_1 = require(\"./XChainAddAccountCreateAttestation\");\nconst XChainAddClaimAttestation_1 = require(\"./XChainAddClaimAttestation\");\nconst XChainClaim_1 = require(\"./XChainClaim\");\nconst XChainCommit_1 = require(\"./XChainCommit\");\nconst XChainCreateBridge_1 = require(\"./XChainCreateBridge\");\nconst XChainCreateClaimID_1 = require(\"./XChainCreateClaimID\");\nconst XChainModifyBridge_1 = require(\"./XChainModifyBridge\");\nfunction validate(transaction) {\n  const tx = Object.assign({}, transaction);\n  if (tx.TransactionType == null) {\n    throw new errors_1.ValidationError('Object does not have a `TransactionType`');\n  }\n  if (typeof tx.TransactionType !== 'string') {\n    throw new errors_1.ValidationError(\"Object's `TransactionType` is not a string\");\n  }\n  if (tx.Memos != null && typeof tx.Memos !== 'object') {\n    throw new errors_1.ValidationError('Memo must be array');\n  }\n  if (tx.Memos != null) {\n    ;\n    tx.Memos.forEach(memo => {\n      if ((memo === null || memo === void 0 ? void 0 : memo.Memo) == null) {\n        throw new errors_1.ValidationError('Memo data must be in a `Memo` field');\n      }\n      if (memo.Memo.MemoData) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoData)) {\n          throw new errors_1.ValidationError('MemoData field must be a hex value');\n        }\n      }\n      if (memo.Memo.MemoType) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoType)) {\n          throw new errors_1.ValidationError('MemoType field must be a hex value');\n        }\n      }\n      if (memo.Memo.MemoFormat) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoFormat)) {\n          throw new errors_1.ValidationError('MemoFormat field must be a hex value');\n        }\n      }\n    });\n  }\n  Object.keys(tx).forEach(key => {\n    const standard_currency_code_len = 3;\n    if (tx[key] && (0, common_1.isIssuedCurrency)(tx[key])) {\n      const txCurrency = tx[key].currency;\n      if (txCurrency.length === standard_currency_code_len && txCurrency.toUpperCase() === 'XRP') {\n        throw new errors_1.ValidationError(`Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`);\n      }\n    }\n  });\n  (0, flags_1.setTransactionFlagsToNumber)(tx);\n  switch (tx.TransactionType) {\n    case 'AMMBid':\n      (0, AMMBid_1.validateAMMBid)(tx);\n      break;\n    case 'AMMCreate':\n      (0, AMMCreate_1.validateAMMCreate)(tx);\n      break;\n    case 'AMMDelete':\n      (0, AMMDelete_1.validateAMMDelete)(tx);\n      break;\n    case 'AMMDeposit':\n      (0, AMMDeposit_1.validateAMMDeposit)(tx);\n      break;\n    case 'AMMVote':\n      (0, AMMVote_1.validateAMMVote)(tx);\n      break;\n    case 'AMMWithdraw':\n      (0, AMMWithdraw_1.validateAMMWithdraw)(tx);\n      break;\n    case 'AccountDelete':\n      (0, accountDelete_1.validateAccountDelete)(tx);\n      break;\n    case 'AccountSet':\n      (0, accountSet_1.validateAccountSet)(tx);\n      break;\n    case 'CheckCancel':\n      (0, checkCancel_1.validateCheckCancel)(tx);\n      break;\n    case 'CheckCash':\n      (0, checkCash_1.validateCheckCash)(tx);\n      break;\n    case 'CheckCreate':\n      (0, checkCreate_1.validateCheckCreate)(tx);\n      break;\n    case 'Clawback':\n      (0, clawback_1.validateClawback)(tx);\n      break;\n    case 'DIDDelete':\n      (0, DIDDelete_1.validateDIDDelete)(tx);\n      break;\n    case 'DIDSet':\n      (0, DIDSet_1.validateDIDSet)(tx);\n      break;\n    case 'DepositPreauth':\n      (0, depositPreauth_1.validateDepositPreauth)(tx);\n      break;\n    case 'EscrowCancel':\n      (0, escrowCancel_1.validateEscrowCancel)(tx);\n      break;\n    case 'EscrowCreate':\n      (0, escrowCreate_1.validateEscrowCreate)(tx);\n      break;\n    case 'EscrowFinish':\n      (0, escrowFinish_1.validateEscrowFinish)(tx);\n      break;\n    case 'NFTokenAcceptOffer':\n      (0, NFTokenAcceptOffer_1.validateNFTokenAcceptOffer)(tx);\n      break;\n    case 'NFTokenBurn':\n      (0, NFTokenBurn_1.validateNFTokenBurn)(tx);\n      break;\n    case 'NFTokenCancelOffer':\n      (0, NFTokenCancelOffer_1.validateNFTokenCancelOffer)(tx);\n      break;\n    case 'NFTokenCreateOffer':\n      (0, NFTokenCreateOffer_1.validateNFTokenCreateOffer)(tx);\n      break;\n    case 'NFTokenMint':\n      (0, NFTokenMint_1.validateNFTokenMint)(tx);\n      break;\n    case 'OfferCancel':\n      (0, offerCancel_1.validateOfferCancel)(tx);\n      break;\n    case 'OfferCreate':\n      (0, offerCreate_1.validateOfferCreate)(tx);\n      break;\n    case 'Payment':\n      (0, payment_1.validatePayment)(tx);\n      break;\n    case 'PaymentChannelClaim':\n      (0, paymentChannelClaim_1.validatePaymentChannelClaim)(tx);\n      break;\n    case 'PaymentChannelCreate':\n      (0, paymentChannelCreate_1.validatePaymentChannelCreate)(tx);\n      break;\n    case 'PaymentChannelFund':\n      (0, paymentChannelFund_1.validatePaymentChannelFund)(tx);\n      break;\n    case 'SetRegularKey':\n      (0, setRegularKey_1.validateSetRegularKey)(tx);\n      break;\n    case 'SignerListSet':\n      (0, signerListSet_1.validateSignerListSet)(tx);\n      break;\n    case 'TicketCreate':\n      (0, ticketCreate_1.validateTicketCreate)(tx);\n      break;\n    case 'TrustSet':\n      (0, trustSet_1.validateTrustSet)(tx);\n      break;\n    case 'XChainAccountCreateCommit':\n      (0, XChainAccountCreateCommit_1.validateXChainAccountCreateCommit)(tx);\n      break;\n    case 'XChainAddAccountCreateAttestation':\n      (0, XChainAddAccountCreateAttestation_1.validateXChainAddAccountCreateAttestation)(tx);\n      break;\n    case 'XChainAddClaimAttestation':\n      (0, XChainAddClaimAttestation_1.validateXChainAddClaimAttestation)(tx);\n      break;\n    case 'XChainClaim':\n      (0, XChainClaim_1.validateXChainClaim)(tx);\n      break;\n    case 'XChainCommit':\n      (0, XChainCommit_1.validateXChainCommit)(tx);\n      break;\n    case 'XChainCreateBridge':\n      (0, XChainCreateBridge_1.validateXChainCreateBridge)(tx);\n      break;\n    case 'XChainCreateClaimID':\n      (0, XChainCreateClaimID_1.validateXChainCreateClaimID)(tx);\n      break;\n    case 'XChainModifyBridge':\n      (0, XChainModifyBridge_1.validateXChainModifyBridge)(tx);\n      break;\n    default:\n      throw new errors_1.ValidationError(`Invalid field TransactionType: ${tx.TransactionType}`);\n  }\n}\nexports.validate = validate;","map":{"version":3,"names":["Object","defineProperty","exports","value","validate","errors_1","require","utils_1","flags_1","accountDelete_1","accountSet_1","AMMBid_1","AMMCreate_1","AMMDelete_1","AMMDeposit_1","AMMVote_1","AMMWithdraw_1","checkCancel_1","checkCash_1","checkCreate_1","clawback_1","common_1","depositPreauth_1","DIDDelete_1","DIDSet_1","escrowCancel_1","escrowCreate_1","escrowFinish_1","NFTokenAcceptOffer_1","NFTokenBurn_1","NFTokenCancelOffer_1","NFTokenCreateOffer_1","NFTokenMint_1","offerCancel_1","offerCreate_1","payment_1","paymentChannelClaim_1","paymentChannelCreate_1","paymentChannelFund_1","setRegularKey_1","signerListSet_1","ticketCreate_1","trustSet_1","XChainAccountCreateCommit_1","XChainAddAccountCreateAttestation_1","XChainAddClaimAttestation_1","XChainClaim_1","XChainCommit_1","XChainCreateBridge_1","XChainCreateClaimID_1","XChainModifyBridge_1","transaction","tx","assign","TransactionType","ValidationError","Memos","forEach","memo","Memo","MemoData","isHex","MemoType","MemoFormat","keys","key","standard_currency_code_len","isIssuedCurrency","txCurrency","currency","length","toUpperCase","setTransactionFlagsToNumber","validateAMMBid","validateAMMCreate","validateAMMDelete","validateAMMDeposit","validateAMMVote","validateAMMWithdraw","validateAccountDelete","validateAccountSet","validateCheckCancel","validateCheckCash","validateCheckCreate","validateClawback","validateDIDDelete","validateDIDSet","validateDepositPreauth","validateEscrowCancel","validateEscrowCreate","validateEscrowFinish","validateNFTokenAcceptOffer","validateNFTokenBurn","validateNFTokenCancelOffer","validateNFTokenCreateOffer","validateNFTokenMint","validateOfferCancel","validateOfferCreate","validatePayment","validatePaymentChannelClaim","validatePaymentChannelCreate","validatePaymentChannelFund","validateSetRegularKey","validateSignerListSet","validateTicketCreate","validateTrustSet","validateXChainAccountCreateCommit","validateXChainAddAccountCreateAttestation","validateXChainAddClaimAttestation","validateXChainClaim","validateXChainCommit","validateXChainCreateBridge","validateXChainCreateClaimID","validateXChainModifyBridge"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/transaction.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst flags_1 = require(\"../utils/flags\");\nconst accountDelete_1 = require(\"./accountDelete\");\nconst accountSet_1 = require(\"./accountSet\");\nconst AMMBid_1 = require(\"./AMMBid\");\nconst AMMCreate_1 = require(\"./AMMCreate\");\nconst AMMDelete_1 = require(\"./AMMDelete\");\nconst AMMDeposit_1 = require(\"./AMMDeposit\");\nconst AMMVote_1 = require(\"./AMMVote\");\nconst AMMWithdraw_1 = require(\"./AMMWithdraw\");\nconst checkCancel_1 = require(\"./checkCancel\");\nconst checkCash_1 = require(\"./checkCash\");\nconst checkCreate_1 = require(\"./checkCreate\");\nconst clawback_1 = require(\"./clawback\");\nconst common_1 = require(\"./common\");\nconst depositPreauth_1 = require(\"./depositPreauth\");\nconst DIDDelete_1 = require(\"./DIDDelete\");\nconst DIDSet_1 = require(\"./DIDSet\");\nconst escrowCancel_1 = require(\"./escrowCancel\");\nconst escrowCreate_1 = require(\"./escrowCreate\");\nconst escrowFinish_1 = require(\"./escrowFinish\");\nconst NFTokenAcceptOffer_1 = require(\"./NFTokenAcceptOffer\");\nconst NFTokenBurn_1 = require(\"./NFTokenBurn\");\nconst NFTokenCancelOffer_1 = require(\"./NFTokenCancelOffer\");\nconst NFTokenCreateOffer_1 = require(\"./NFTokenCreateOffer\");\nconst NFTokenMint_1 = require(\"./NFTokenMint\");\nconst offerCancel_1 = require(\"./offerCancel\");\nconst offerCreate_1 = require(\"./offerCreate\");\nconst payment_1 = require(\"./payment\");\nconst paymentChannelClaim_1 = require(\"./paymentChannelClaim\");\nconst paymentChannelCreate_1 = require(\"./paymentChannelCreate\");\nconst paymentChannelFund_1 = require(\"./paymentChannelFund\");\nconst setRegularKey_1 = require(\"./setRegularKey\");\nconst signerListSet_1 = require(\"./signerListSet\");\nconst ticketCreate_1 = require(\"./ticketCreate\");\nconst trustSet_1 = require(\"./trustSet\");\nconst XChainAccountCreateCommit_1 = require(\"./XChainAccountCreateCommit\");\nconst XChainAddAccountCreateAttestation_1 = require(\"./XChainAddAccountCreateAttestation\");\nconst XChainAddClaimAttestation_1 = require(\"./XChainAddClaimAttestation\");\nconst XChainClaim_1 = require(\"./XChainClaim\");\nconst XChainCommit_1 = require(\"./XChainCommit\");\nconst XChainCreateBridge_1 = require(\"./XChainCreateBridge\");\nconst XChainCreateClaimID_1 = require(\"./XChainCreateClaimID\");\nconst XChainModifyBridge_1 = require(\"./XChainModifyBridge\");\nfunction validate(transaction) {\n    const tx = Object.assign({}, transaction);\n    if (tx.TransactionType == null) {\n        throw new errors_1.ValidationError('Object does not have a `TransactionType`');\n    }\n    if (typeof tx.TransactionType !== 'string') {\n        throw new errors_1.ValidationError(\"Object's `TransactionType` is not a string\");\n    }\n    if (tx.Memos != null && typeof tx.Memos !== 'object') {\n        throw new errors_1.ValidationError('Memo must be array');\n    }\n    if (tx.Memos != null) {\n        ;\n        tx.Memos.forEach((memo) => {\n            if ((memo === null || memo === void 0 ? void 0 : memo.Memo) == null) {\n                throw new errors_1.ValidationError('Memo data must be in a `Memo` field');\n            }\n            if (memo.Memo.MemoData) {\n                if (!(0, utils_1.isHex)(memo.Memo.MemoData)) {\n                    throw new errors_1.ValidationError('MemoData field must be a hex value');\n                }\n            }\n            if (memo.Memo.MemoType) {\n                if (!(0, utils_1.isHex)(memo.Memo.MemoType)) {\n                    throw new errors_1.ValidationError('MemoType field must be a hex value');\n                }\n            }\n            if (memo.Memo.MemoFormat) {\n                if (!(0, utils_1.isHex)(memo.Memo.MemoFormat)) {\n                    throw new errors_1.ValidationError('MemoFormat field must be a hex value');\n                }\n            }\n        });\n    }\n    Object.keys(tx).forEach((key) => {\n        const standard_currency_code_len = 3;\n        if (tx[key] && (0, common_1.isIssuedCurrency)(tx[key])) {\n            const txCurrency = tx[key].currency;\n            if (txCurrency.length === standard_currency_code_len &&\n                txCurrency.toUpperCase() === 'XRP') {\n                throw new errors_1.ValidationError(`Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`);\n            }\n        }\n    });\n    (0, flags_1.setTransactionFlagsToNumber)(tx);\n    switch (tx.TransactionType) {\n        case 'AMMBid':\n            (0, AMMBid_1.validateAMMBid)(tx);\n            break;\n        case 'AMMCreate':\n            (0, AMMCreate_1.validateAMMCreate)(tx);\n            break;\n        case 'AMMDelete':\n            (0, AMMDelete_1.validateAMMDelete)(tx);\n            break;\n        case 'AMMDeposit':\n            (0, AMMDeposit_1.validateAMMDeposit)(tx);\n            break;\n        case 'AMMVote':\n            (0, AMMVote_1.validateAMMVote)(tx);\n            break;\n        case 'AMMWithdraw':\n            (0, AMMWithdraw_1.validateAMMWithdraw)(tx);\n            break;\n        case 'AccountDelete':\n            (0, accountDelete_1.validateAccountDelete)(tx);\n            break;\n        case 'AccountSet':\n            (0, accountSet_1.validateAccountSet)(tx);\n            break;\n        case 'CheckCancel':\n            (0, checkCancel_1.validateCheckCancel)(tx);\n            break;\n        case 'CheckCash':\n            (0, checkCash_1.validateCheckCash)(tx);\n            break;\n        case 'CheckCreate':\n            (0, checkCreate_1.validateCheckCreate)(tx);\n            break;\n        case 'Clawback':\n            (0, clawback_1.validateClawback)(tx);\n            break;\n        case 'DIDDelete':\n            (0, DIDDelete_1.validateDIDDelete)(tx);\n            break;\n        case 'DIDSet':\n            (0, DIDSet_1.validateDIDSet)(tx);\n            break;\n        case 'DepositPreauth':\n            (0, depositPreauth_1.validateDepositPreauth)(tx);\n            break;\n        case 'EscrowCancel':\n            (0, escrowCancel_1.validateEscrowCancel)(tx);\n            break;\n        case 'EscrowCreate':\n            (0, escrowCreate_1.validateEscrowCreate)(tx);\n            break;\n        case 'EscrowFinish':\n            (0, escrowFinish_1.validateEscrowFinish)(tx);\n            break;\n        case 'NFTokenAcceptOffer':\n            (0, NFTokenAcceptOffer_1.validateNFTokenAcceptOffer)(tx);\n            break;\n        case 'NFTokenBurn':\n            (0, NFTokenBurn_1.validateNFTokenBurn)(tx);\n            break;\n        case 'NFTokenCancelOffer':\n            (0, NFTokenCancelOffer_1.validateNFTokenCancelOffer)(tx);\n            break;\n        case 'NFTokenCreateOffer':\n            (0, NFTokenCreateOffer_1.validateNFTokenCreateOffer)(tx);\n            break;\n        case 'NFTokenMint':\n            (0, NFTokenMint_1.validateNFTokenMint)(tx);\n            break;\n        case 'OfferCancel':\n            (0, offerCancel_1.validateOfferCancel)(tx);\n            break;\n        case 'OfferCreate':\n            (0, offerCreate_1.validateOfferCreate)(tx);\n            break;\n        case 'Payment':\n            (0, payment_1.validatePayment)(tx);\n            break;\n        case 'PaymentChannelClaim':\n            (0, paymentChannelClaim_1.validatePaymentChannelClaim)(tx);\n            break;\n        case 'PaymentChannelCreate':\n            (0, paymentChannelCreate_1.validatePaymentChannelCreate)(tx);\n            break;\n        case 'PaymentChannelFund':\n            (0, paymentChannelFund_1.validatePaymentChannelFund)(tx);\n            break;\n        case 'SetRegularKey':\n            (0, setRegularKey_1.validateSetRegularKey)(tx);\n            break;\n        case 'SignerListSet':\n            (0, signerListSet_1.validateSignerListSet)(tx);\n            break;\n        case 'TicketCreate':\n            (0, ticketCreate_1.validateTicketCreate)(tx);\n            break;\n        case 'TrustSet':\n            (0, trustSet_1.validateTrustSet)(tx);\n            break;\n        case 'XChainAccountCreateCommit':\n            (0, XChainAccountCreateCommit_1.validateXChainAccountCreateCommit)(tx);\n            break;\n        case 'XChainAddAccountCreateAttestation':\n            (0, XChainAddAccountCreateAttestation_1.validateXChainAddAccountCreateAttestation)(tx);\n            break;\n        case 'XChainAddClaimAttestation':\n            (0, XChainAddClaimAttestation_1.validateXChainAddClaimAttestation)(tx);\n            break;\n        case 'XChainClaim':\n            (0, XChainClaim_1.validateXChainClaim)(tx);\n            break;\n        case 'XChainCommit':\n            (0, XChainCommit_1.validateXChainCommit)(tx);\n            break;\n        case 'XChainCreateBridge':\n            (0, XChainCreateBridge_1.validateXChainCreateBridge)(tx);\n            break;\n        case 'XChainCreateClaimID':\n            (0, XChainCreateClaimID_1.validateXChainCreateClaimID)(tx);\n            break;\n        case 'XChainModifyBridge':\n            (0, XChainModifyBridge_1.validateXChainModifyBridge)(tx);\n            break;\n        default:\n            throw new errors_1.ValidationError(`Invalid field TransactionType: ${tx.TransactionType}`);\n    }\n}\nexports.validate = validate;\n//# sourceMappingURL=transaction.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}