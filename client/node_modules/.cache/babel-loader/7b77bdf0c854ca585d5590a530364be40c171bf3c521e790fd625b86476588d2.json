{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setTransactionFlagsToNumber = exports.parseAccountRootFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst AccountRoot_1 = require(\"../ledger/AccountRoot\");\nconst accountSet_1 = require(\"../transactions/accountSet\");\nconst AMMDeposit_1 = require(\"../transactions/AMMDeposit\");\nconst AMMWithdraw_1 = require(\"../transactions/AMMWithdraw\");\nconst NFTokenCreateOffer_1 = require(\"../transactions/NFTokenCreateOffer\");\nconst NFTokenMint_1 = require(\"../transactions/NFTokenMint\");\nconst offerCreate_1 = require(\"../transactions/offerCreate\");\nconst payment_1 = require(\"../transactions/payment\");\nconst paymentChannelClaim_1 = require(\"../transactions/paymentChannelClaim\");\nconst trustSet_1 = require(\"../transactions/trustSet\");\nconst XChainModifyBridge_1 = require(\"../transactions/XChainModifyBridge\");\nconst _1 = require(\".\");\nfunction parseAccountRootFlags(flags) {\n  const flagsInterface = {};\n  Object.values(AccountRoot_1.AccountRootFlags).forEach(flag => {\n    if (typeof flag === 'string' && (0, _1.isFlagEnabled)(flags, AccountRoot_1.AccountRootFlags[flag])) {\n      flagsInterface[flag] = true;\n    }\n  });\n  return flagsInterface;\n}\nexports.parseAccountRootFlags = parseAccountRootFlags;\nconst txToFlag = {\n  AccountSet: accountSet_1.AccountSetTfFlags,\n  AMMDeposit: AMMDeposit_1.AMMDepositFlags,\n  AMMWithdraw: AMMWithdraw_1.AMMWithdrawFlags,\n  NFTokenCreateOffer: NFTokenCreateOffer_1.NFTokenCreateOfferFlags,\n  NFTokenMint: NFTokenMint_1.NFTokenMintFlags,\n  OfferCreate: offerCreate_1.OfferCreateFlags,\n  PaymentChannelClaim: paymentChannelClaim_1.PaymentChannelClaimFlags,\n  Payment: payment_1.PaymentFlags,\n  TrustSet: trustSet_1.TrustSetFlags,\n  XChainModifyBridge: XChainModifyBridge_1.XChainModifyBridgeFlags\n};\nfunction setTransactionFlagsToNumber(tx) {\n  if (tx.Flags == null) {\n    tx.Flags = 0;\n    return;\n  }\n  if (typeof tx.Flags === 'number') {\n    return;\n  }\n  tx.Flags = txToFlag[tx.TransactionType] ? convertFlagsToNumber(tx.Flags, txToFlag[tx.TransactionType]) : 0;\n}\nexports.setTransactionFlagsToNumber = setTransactionFlagsToNumber;\nfunction convertFlagsToNumber(flags, flagEnum) {\n  return Object.keys(flags).reduce((resultFlags, flag) => {\n    if (flagEnum[flag] == null) {\n      throw new errors_1.ValidationError(`flag ${flag} doesn't exist in flagEnum: ${JSON.stringify(flagEnum)}`);\n    }\n    return flags[flag] ? resultFlags | flagEnum[flag] : resultFlags;\n  }, 0);\n}","map":{"version":3,"names":["errors_1","require","AccountRoot_1","accountSet_1","AMMDeposit_1","AMMWithdraw_1","NFTokenCreateOffer_1","NFTokenMint_1","offerCreate_1","payment_1","paymentChannelClaim_1","trustSet_1","XChainModifyBridge_1","_1","parseAccountRootFlags","flags","flagsInterface","Object","values","AccountRootFlags","forEach","flag","isFlagEnabled","exports","txToFlag","AccountSet","AccountSetTfFlags","AMMDeposit","AMMDepositFlags","AMMWithdraw","AMMWithdrawFlags","NFTokenCreateOffer","NFTokenCreateOfferFlags","NFTokenMint","NFTokenMintFlags","OfferCreate","OfferCreateFlags","PaymentChannelClaim","PaymentChannelClaimFlags","Payment","PaymentFlags","TrustSet","TrustSetFlags","XChainModifyBridge","XChainModifyBridgeFlags","setTransactionFlagsToNumber","tx","Flags","TransactionType","convertFlagsToNumber","flagEnum","keys","reduce","resultFlags","ValidationError","JSON","stringify"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/utils/flags.ts"],"sourcesContent":["/* eslint-disable no-param-reassign -- param reassign is safe */\n/* eslint-disable no-bitwise -- flags require bitwise operations */\n\nimport { ValidationError } from '../../errors'\nimport {\n  AccountRootFlagsInterface,\n  AccountRootFlags,\n} from '../ledger/AccountRoot'\nimport { AccountSetTfFlags } from '../transactions/accountSet'\nimport { AMMDepositFlags } from '../transactions/AMMDeposit'\nimport { AMMWithdrawFlags } from '../transactions/AMMWithdraw'\nimport { GlobalFlags } from '../transactions/common'\nimport { NFTokenCreateOfferFlags } from '../transactions/NFTokenCreateOffer'\nimport { NFTokenMintFlags } from '../transactions/NFTokenMint'\nimport { OfferCreateFlags } from '../transactions/offerCreate'\nimport { PaymentFlags } from '../transactions/payment'\nimport { PaymentChannelClaimFlags } from '../transactions/paymentChannelClaim'\nimport type { Transaction } from '../transactions/transaction'\nimport { TrustSetFlags } from '../transactions/trustSet'\nimport { XChainModifyBridgeFlags } from '../transactions/XChainModifyBridge'\n\nimport { isFlagEnabled } from '.'\n\n/**\n * Convert an AccountRoot Flags number into an interface for easy interpretation.\n *\n * @param flags - A number which is the bitwise and of all enabled AccountRootFlagsInterface.\n * @returns An interface with all flags as booleans.\n */\nexport function parseAccountRootFlags(\n  flags: number,\n): AccountRootFlagsInterface {\n  const flagsInterface: AccountRootFlagsInterface = {}\n\n  // If we use keys all will be strings and enums are reversed during transpilation\n  Object.values(AccountRootFlags).forEach((flag) => {\n    if (\n      typeof flag === 'string' &&\n      isFlagEnabled(flags, AccountRootFlags[flag])\n    ) {\n      flagsInterface[flag] = true\n    }\n  })\n\n  return flagsInterface\n}\n\nconst txToFlag = {\n  AccountSet: AccountSetTfFlags,\n  AMMDeposit: AMMDepositFlags,\n  AMMWithdraw: AMMWithdrawFlags,\n  NFTokenCreateOffer: NFTokenCreateOfferFlags,\n  NFTokenMint: NFTokenMintFlags,\n  OfferCreate: OfferCreateFlags,\n  PaymentChannelClaim: PaymentChannelClaimFlags,\n  Payment: PaymentFlags,\n  TrustSet: TrustSetFlags,\n  XChainModifyBridge: XChainModifyBridgeFlags,\n}\n\n/**\n * Sets a transaction's flags to its numeric representation.\n *\n * @param tx - A transaction to set its flags to its numeric representation.\n */\nexport function setTransactionFlagsToNumber(tx: Transaction): void {\n  if (tx.Flags == null) {\n    tx.Flags = 0\n    return\n  }\n  if (typeof tx.Flags === 'number') {\n    return\n  }\n\n  tx.Flags = txToFlag[tx.TransactionType]\n    ? convertFlagsToNumber(tx.Flags, txToFlag[tx.TransactionType])\n    : 0\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any -- added ValidationError check for flagEnum\nfunction convertFlagsToNumber(flags: GlobalFlags, flagEnum: any): number {\n  return Object.keys(flags).reduce((resultFlags, flag) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- safe member access\n    if (flagEnum[flag] == null) {\n      throw new ValidationError(\n        `flag ${flag} doesn't exist in flagEnum: ${JSON.stringify(flagEnum)}`,\n      )\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access -- safe member access\n    return flags[flag] ? resultFlags | flagEnum[flag] : resultFlags\n  }, 0)\n}\n"],"mappings":";;;;;;AAGA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,aAAA,GAAAD,OAAA;AAIA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,aAAA,GAAAJ,OAAA;AAEA,MAAAK,oBAAA,GAAAL,OAAA;AACA,MAAAM,aAAA,GAAAN,OAAA;AACA,MAAAO,aAAA,GAAAP,OAAA;AACA,MAAAQ,SAAA,GAAAR,OAAA;AACA,MAAAS,qBAAA,GAAAT,OAAA;AAEA,MAAAU,UAAA,GAAAV,OAAA;AACA,MAAAW,oBAAA,GAAAX,OAAA;AAEA,MAAAY,EAAA,GAAAZ,OAAA;AAQA,SAAgBa,qBAAqBA,CACnCC,KAAa;EAEb,MAAMC,cAAc,GAA8B,EAAE;EAGpDC,MAAM,CAACC,MAAM,CAAChB,aAAA,CAAAiB,gBAAgB,CAAC,CAACC,OAAO,CAAEC,IAAI,IAAI;IAC/C,IACE,OAAOA,IAAI,KAAK,QAAQ,IACxB,IAAAR,EAAA,CAAAS,aAAa,EAACP,KAAK,EAAEb,aAAA,CAAAiB,gBAAgB,CAACE,IAAI,CAAC,CAAC,EAC5C;MACAL,cAAc,CAACK,IAAI,CAAC,GAAG,IAAI;;EAE/B,CAAC,CAAC;EAEF,OAAOL,cAAc;AACvB;AAhBAO,OAAA,CAAAT,qBAAA,GAAAA,qBAAA;AAkBA,MAAMU,QAAQ,GAAG;EACfC,UAAU,EAAEtB,YAAA,CAAAuB,iBAAiB;EAC7BC,UAAU,EAAEvB,YAAA,CAAAwB,eAAe;EAC3BC,WAAW,EAAExB,aAAA,CAAAyB,gBAAgB;EAC7BC,kBAAkB,EAAEzB,oBAAA,CAAA0B,uBAAuB;EAC3CC,WAAW,EAAE1B,aAAA,CAAA2B,gBAAgB;EAC7BC,WAAW,EAAE3B,aAAA,CAAA4B,gBAAgB;EAC7BC,mBAAmB,EAAE3B,qBAAA,CAAA4B,wBAAwB;EAC7CC,OAAO,EAAE9B,SAAA,CAAA+B,YAAY;EACrBC,QAAQ,EAAE9B,UAAA,CAAA+B,aAAa;EACvBC,kBAAkB,EAAE/B,oBAAA,CAAAgC;CACrB;AAOD,SAAgBC,2BAA2BA,CAACC,EAAe;EACzD,IAAIA,EAAE,CAACC,KAAK,IAAI,IAAI,EAAE;IACpBD,EAAE,CAACC,KAAK,GAAG,CAAC;IACZ;;EAEF,IAAI,OAAOD,EAAE,CAACC,KAAK,KAAK,QAAQ,EAAE;IAChC;;EAGFD,EAAE,CAACC,KAAK,GAAGvB,QAAQ,CAACsB,EAAE,CAACE,eAAe,CAAC,GACnCC,oBAAoB,CAACH,EAAE,CAACC,KAAK,EAAEvB,QAAQ,CAACsB,EAAE,CAACE,eAAe,CAAC,CAAC,GAC5D,CAAC;AACP;AAZAzB,OAAA,CAAAsB,2BAAA,GAAAA,2BAAA;AAeA,SAASI,oBAAoBA,CAAClC,KAAkB,EAAEmC,QAAa;EAC7D,OAAOjC,MAAM,CAACkC,IAAI,CAACpC,KAAK,CAAC,CAACqC,MAAM,CAAC,CAACC,WAAW,EAAEhC,IAAI,KAAI;IAErD,IAAI6B,QAAQ,CAAC7B,IAAI,CAAC,IAAI,IAAI,EAAE;MAC1B,MAAM,IAAIrB,QAAA,CAAAsD,eAAe,CACvB,QAAQjC,IAAI,+BAA+BkC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,EAAE,CACtE;;IAGH,OAAOnC,KAAK,CAACM,IAAI,CAAC,GAAGgC,WAAW,GAAGH,QAAQ,CAAC7B,IAAI,CAAC,GAAGgC,WAAW;EACjE,CAAC,EAAE,CAAC,CAAC;AACP","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}