{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashTxTree = exports.hashStateTree = exports.hashLedger = exports.hashSignedTx = exports.hashLedgerHeader = exports.hashPaymentChannel = exports.hashEscrow = exports.hashTrustline = exports.hashOfferId = exports.hashSignerListId = exports.hashAccountRoot = exports.hashTx = void 0;\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst hashLedger_1 = __importStar(require(\"./hashLedger\"));\nexports.hashLedger = hashLedger_1.default;\nObject.defineProperty(exports, \"hashLedgerHeader\", {\n  enumerable: true,\n  get: function () {\n    return hashLedger_1.hashLedgerHeader;\n  }\n});\nObject.defineProperty(exports, \"hashSignedTx\", {\n  enumerable: true,\n  get: function () {\n    return hashLedger_1.hashSignedTx;\n  }\n});\nObject.defineProperty(exports, \"hashTxTree\", {\n  enumerable: true,\n  get: function () {\n    return hashLedger_1.hashTxTree;\n  }\n});\nObject.defineProperty(exports, \"hashStateTree\", {\n  enumerable: true,\n  get: function () {\n    return hashLedger_1.hashStateTree;\n  }\n});\nconst HashPrefix_1 = __importDefault(require(\"./HashPrefix\"));\nconst ledgerSpaces_1 = __importDefault(require(\"./ledgerSpaces\"));\nconst sha512Half_1 = __importDefault(require(\"./sha512Half\"));\nconst HEX = 16;\nconst BYTE_LENGTH = 4;\nfunction addressToHex(address) {\n  return (0, utils_1.bytesToHex)((0, ripple_address_codec_1.decodeAccountID)(address));\n}\nfunction ledgerSpaceHex(name) {\n  return ledgerSpaces_1.default[name].charCodeAt(0).toString(HEX).padStart(4, '0');\n}\nconst MASK = 0xff;\nfunction currencyToHex(currency) {\n  if (currency.length !== 3) {\n    return currency;\n  }\n  const bytes = Array(20).fill(0);\n  bytes[12] = currency.charCodeAt(0) & MASK;\n  bytes[13] = currency.charCodeAt(1) & MASK;\n  bytes[14] = currency.charCodeAt(2) & MASK;\n  return (0, utils_1.bytesToHex)(Uint8Array.from(bytes));\n}\nfunction hashTx(txBlobHex) {\n  const prefix = HashPrefix_1.default.TRANSACTION_SIGN.toString(HEX).toUpperCase();\n  return (0, sha512Half_1.default)(prefix + txBlobHex);\n}\nexports.hashTx = hashTx;\nfunction hashAccountRoot(address) {\n  return (0, sha512Half_1.default)(ledgerSpaceHex('account') + addressToHex(address));\n}\nexports.hashAccountRoot = hashAccountRoot;\nfunction hashSignerListId(address) {\n  return (0, sha512Half_1.default)(`${ledgerSpaceHex('signerList') + addressToHex(address)}00000000`);\n}\nexports.hashSignerListId = hashSignerListId;\nfunction hashOfferId(address, sequence) {\n  const hexPrefix = ledgerSpaces_1.default.offer.charCodeAt(0).toString(HEX).padStart(2, '0');\n  const hexSequence = sequence.toString(HEX).padStart(8, '0');\n  const prefix = `00${hexPrefix}`;\n  return (0, sha512Half_1.default)(prefix + addressToHex(address) + hexSequence);\n}\nexports.hashOfferId = hashOfferId;\nfunction hashTrustline(address1, address2, currency) {\n  const address1Hex = addressToHex(address1);\n  const address2Hex = addressToHex(address2);\n  const swap = new bignumber_js_1.default(address1Hex, 16).isGreaterThan(new bignumber_js_1.default(address2Hex, 16));\n  const lowAddressHex = swap ? address2Hex : address1Hex;\n  const highAddressHex = swap ? address1Hex : address2Hex;\n  const prefix = ledgerSpaceHex('rippleState');\n  return (0, sha512Half_1.default)(prefix + lowAddressHex + highAddressHex + currencyToHex(currency));\n}\nexports.hashTrustline = hashTrustline;\nfunction hashEscrow(address, sequence) {\n  return (0, sha512Half_1.default)(ledgerSpaceHex('escrow') + addressToHex(address) + sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'));\n}\nexports.hashEscrow = hashEscrow;\nfunction hashPaymentChannel(address, dstAddress, sequence) {\n  return (0, sha512Half_1.default)(ledgerSpaceHex('paychan') + addressToHex(address) + addressToHex(dstAddress) + sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'));\n}\nexports.hashPaymentChannel = hashPaymentChannel;","map":{"version":3,"names":["utils_1","require","bignumber_js_1","__importDefault","ripple_address_codec_1","hashLedger_1","__importStar","exports","hashLedger","default","Object","defineProperty","enumerable","get","hashLedgerHeader","hashSignedTx","hashTxTree","hashStateTree","HashPrefix_1","ledgerSpaces_1","sha512Half_1","HEX","BYTE_LENGTH","addressToHex","address","bytesToHex","decodeAccountID","ledgerSpaceHex","name","charCodeAt","toString","padStart","MASK","currencyToHex","currency","length","bytes","Array","fill","Uint8Array","from","hashTx","txBlobHex","prefix","TRANSACTION_SIGN","toUpperCase","hashAccountRoot","hashSignerListId","hashOfferId","sequence","hexPrefix","offer","hexSequence","hashTrustline","address1","address2","address1Hex","address2Hex","swap","isGreaterThan","lowAddressHex","highAddressHex","hashEscrow","hashPaymentChannel","dstAddress"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/hashes/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-magic-numbers -- this file mimics\n   behavior in rippled. Magic numbers are used for lengths and conditions */\n/* eslint-disable no-bitwise  -- this file mimics behavior in rippled. It uses\n   bitwise operators for and-ing numbers with a mask and bit shifting. */\n\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport { decodeAccountID } from 'ripple-address-codec'\n\nimport hashLedger, {\n  hashLedgerHeader,\n  hashSignedTx,\n  hashTxTree,\n  hashStateTree,\n} from './hashLedger'\nimport HashPrefix from './HashPrefix'\nimport ledgerSpaces from './ledgerSpaces'\nimport sha512Half from './sha512Half'\n\nconst HEX = 16\nconst BYTE_LENGTH = 4\n\nfunction addressToHex(address: string): string {\n  return bytesToHex(decodeAccountID(address))\n}\n\nfunction ledgerSpaceHex(name: keyof typeof ledgerSpaces): string {\n  return ledgerSpaces[name].charCodeAt(0).toString(HEX).padStart(4, '0')\n}\n\nconst MASK = 0xff\nfunction currencyToHex(currency: string): string {\n  if (currency.length !== 3) {\n    return currency\n  }\n\n  const bytes = Array(20).fill(0)\n  bytes[12] = currency.charCodeAt(0) & MASK\n  bytes[13] = currency.charCodeAt(1) & MASK\n  bytes[14] = currency.charCodeAt(2) & MASK\n  return bytesToHex(Uint8Array.from(bytes))\n}\n\n/**\n * Hash the given binary transaction data with the single-signing prefix.\n *\n * See [Serialization Format](https://xrpl.org/serialization.html).\n *\n * @param txBlobHex - The binary transaction blob as a hexadecimal string.\n * @returns The hash to sign.\n * @category Utilities\n */\nexport function hashTx(txBlobHex: string): string {\n  const prefix = HashPrefix.TRANSACTION_SIGN.toString(HEX).toUpperCase()\n  return sha512Half(prefix + txBlobHex)\n}\n\n/**\n * Compute AccountRoot Ledger Object Index.\n *\n * All objects in a ledger's state tree have a unique Index.\n * The AccountRoot Ledger Object Index is derived by hashing the\n * address with a namespace identifier. This ensures every\n * Index is unique.\n *\n * See [Ledger Object Indexes](https://xrpl.org/ledger-object-ids.html).\n *\n * @param address - The classic account address.\n * @returns The Ledger Object Index for the account.\n * @category Utilities\n */\nexport function hashAccountRoot(address: string): string {\n  return sha512Half(ledgerSpaceHex('account') + addressToHex(address))\n}\n\n/**\n * [SignerList Index Format](https://xrpl.org/signerlist.html#signerlist-id-format).\n *\n * The Index of a SignerList object is the SHA-512Half of the following values, concatenated in order:\n *   * The RippleState space key (0x0053)\n *   * The AccountID of the owner of the SignerList\n *   * The SignerListID (currently always 0).\n *\n * This method computes a SignerList Ledger Object Index.\n *\n * @param address - The classic account address of the SignerList owner (starting with r).\n * @returns The Index of the account's SignerList object.\n * @category Utilities\n */\nexport function hashSignerListId(address: string): string {\n  return sha512Half(\n    `${ledgerSpaceHex('signerList') + addressToHex(address)}00000000`,\n  )\n}\n\n/**\n * [Offer Index Format](https://xrpl.org/offer.html#offer-id-format).\n *\n * The Index of a Offer object is the SHA-512Half of the following values, concatenated in order:\n * * The Offer space key (0x006F)\n * * The AccountID of the account placing the offer\n * * The Sequence number of the OfferCreate transaction that created the offer.\n *\n * This method computes an Offer Index.\n *\n * @param address - The classic account address of the SignerList owner (starting with r).\n * @param sequence - Sequence of the Offer.\n * @returns The Index of the account's Offer object.\n * @category Utilities\n */\nexport function hashOfferId(address: string, sequence: number): string {\n  const hexPrefix = ledgerSpaces.offer\n    .charCodeAt(0)\n    .toString(HEX)\n    .padStart(2, '0')\n  const hexSequence = sequence.toString(HEX).padStart(8, '0')\n  const prefix = `00${hexPrefix}`\n  return sha512Half(prefix + addressToHex(address) + hexSequence)\n}\n\n/**\n * Compute the hash of a Trustline.\n *\n * @param address1 - One of the addresses in the Trustline.\n * @param address2 - The other address in the Trustline.\n * @param currency - Currency in the Trustline.\n * @returns The hash of the Trustline.\n * @category Utilities\n */\nexport function hashTrustline(\n  address1: string,\n  address2: string,\n  currency: string,\n): string {\n  const address1Hex = addressToHex(address1)\n  const address2Hex = addressToHex(address2)\n\n  const swap = new BigNumber(address1Hex, 16).isGreaterThan(\n    new BigNumber(address2Hex, 16),\n  )\n  const lowAddressHex = swap ? address2Hex : address1Hex\n  const highAddressHex = swap ? address1Hex : address2Hex\n\n  const prefix = ledgerSpaceHex('rippleState')\n  return sha512Half(\n    prefix + lowAddressHex + highAddressHex + currencyToHex(currency),\n  )\n}\n\n/**\n * Compute the Hash of an Escrow LedgerEntry.\n *\n * @param address - Address of the Escrow.\n * @param sequence - OfferSequence of the Escrow.\n * @returns The hash of the Escrow LedgerEntry.\n * @category Utilities\n */\nexport function hashEscrow(address: string, sequence: number): string {\n  return sha512Half(\n    ledgerSpaceHex('escrow') +\n      addressToHex(address) +\n      sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'),\n  )\n}\n\n/**\n * Compute the hash of a Payment Channel.\n *\n * @param address - Account of the Payment Channel.\n * @param dstAddress - Destination Account of the Payment Channel.\n * @param sequence - Sequence number of the Transaction that created the Payment Channel.\n * @returns Hash of the Payment Channel.\n * @category Utilities\n */\nexport function hashPaymentChannel(\n  address: string,\n  dstAddress: string,\n  sequence: number,\n): string {\n  return sha512Half(\n    ledgerSpaceHex('paychan') +\n      addressToHex(address) +\n      addressToHex(dstAddress) +\n      sequence.toString(HEX).padStart(BYTE_LENGTH * 2, '0'),\n  )\n}\n\nexport { hashLedgerHeader, hashSignedTx, hashLedger, hashStateTree, hashTxTree }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}