{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaInfo = () => {\n  _s();\n  const [accountInfo, setAccountInfo] = useState(null);\n  useEffect(() => {\n    const fetchAccountInfo = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          // Get the account number\n          const accountNumber = accounts[0];\n\n          // Get the balance of the user's account\n          const balance = await web3.eth.getBalance(accountNumber);\n\n          // Convert the balance from Wei to Ether\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n\n          // Get the live ledger information\n          const blockNumber = await web3.eth.getBlockNumber();\n          const latestBlock = await web3.eth.getBlock(blockNumber);\n\n          // Prepare account information object\n          const accountInfo = {\n            accountNumber,\n            balanceInEther,\n            latestBlock\n          };\n          setAccountInfo(accountInfo);\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error fetching account information:', error);\n      }\n    };\n    fetchAccountInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), accountInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Number: \", accountInfo.accountNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Balance: \", accountInfo.balanceInEther, \" Ether\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latest Block: \", JSON.stringify(accountInfo.latestBlock)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaInfo, \"gOUIjZ0MhPTPPLHGrSCOhbEOWgE=\");\n_c = MetaInfo;\nexport default MetaInfo;\nvar _c;\n$RefreshReg$(_c, \"MetaInfo\");","map":{"version":3,"names":["React","useEffect","useState","Web3","jsxDEV","_jsxDEV","MetaInfo","_s","accountInfo","setAccountInfo","fetchAccountInfo","window","ethereum","web3","accounts","request","method","accountNumber","balance","eth","getBalance","balanceInEther","utils","fromWei","blockNumber","getBlockNumber","latestBlock","getBlock","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst MetaInfo = () => {\n  const [accountInfo, setAccountInfo] = useState(null);\n\n  useEffect(() => {\n    const fetchAccountInfo = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n          // Get the account number\n          const accountNumber = accounts[0];\n\n          // Get the balance of the user's account\n          const balance = await web3.eth.getBalance(accountNumber);\n\n          // Convert the balance from Wei to Ether\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n\n          // Get the live ledger information\n          const blockNumber = await web3.eth.getBlockNumber();\n          const latestBlock = await web3.eth.getBlock(blockNumber);\n\n          // Prepare account information object\n          const accountInfo = {\n            accountNumber,\n            balanceInEther,\n            latestBlock,\n          };\n\n          setAccountInfo(accountInfo);\n\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error fetching account information:', error);\n      }\n    };\n\n    fetchAccountInfo();\n  }, []);\n\n  return (\n    <div>\n      <h2>Account Information</h2>\n      {accountInfo ? (\n        <div>\n          <p>Account Number: {accountInfo.accountNumber}</p>\n          <p>Balance: {accountInfo.balanceInEther} Ether</p>\n          <p>Latest Block: {JSON.stringify(accountInfo.latestBlock)}</p>\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MetaInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}