{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst flags_1 = require(\"../utils/flags\");\nconst accountDelete_1 = require(\"./accountDelete\");\nconst accountSet_1 = require(\"./accountSet\");\nconst AMMBid_1 = require(\"./AMMBid\");\nconst AMMCreate_1 = require(\"./AMMCreate\");\nconst AMMDelete_1 = require(\"./AMMDelete\");\nconst AMMDeposit_1 = require(\"./AMMDeposit\");\nconst AMMVote_1 = require(\"./AMMVote\");\nconst AMMWithdraw_1 = require(\"./AMMWithdraw\");\nconst checkCancel_1 = require(\"./checkCancel\");\nconst checkCash_1 = require(\"./checkCash\");\nconst checkCreate_1 = require(\"./checkCreate\");\nconst clawback_1 = require(\"./clawback\");\nconst common_1 = require(\"./common\");\nconst depositPreauth_1 = require(\"./depositPreauth\");\nconst DIDDelete_1 = require(\"./DIDDelete\");\nconst DIDSet_1 = require(\"./DIDSet\");\nconst escrowCancel_1 = require(\"./escrowCancel\");\nconst escrowCreate_1 = require(\"./escrowCreate\");\nconst escrowFinish_1 = require(\"./escrowFinish\");\nconst NFTokenAcceptOffer_1 = require(\"./NFTokenAcceptOffer\");\nconst NFTokenBurn_1 = require(\"./NFTokenBurn\");\nconst NFTokenCancelOffer_1 = require(\"./NFTokenCancelOffer\");\nconst NFTokenCreateOffer_1 = require(\"./NFTokenCreateOffer\");\nconst NFTokenMint_1 = require(\"./NFTokenMint\");\nconst offerCancel_1 = require(\"./offerCancel\");\nconst offerCreate_1 = require(\"./offerCreate\");\nconst payment_1 = require(\"./payment\");\nconst paymentChannelClaim_1 = require(\"./paymentChannelClaim\");\nconst paymentChannelCreate_1 = require(\"./paymentChannelCreate\");\nconst paymentChannelFund_1 = require(\"./paymentChannelFund\");\nconst setRegularKey_1 = require(\"./setRegularKey\");\nconst signerListSet_1 = require(\"./signerListSet\");\nconst ticketCreate_1 = require(\"./ticketCreate\");\nconst trustSet_1 = require(\"./trustSet\");\nconst XChainAccountCreateCommit_1 = require(\"./XChainAccountCreateCommit\");\nconst XChainAddAccountCreateAttestation_1 = require(\"./XChainAddAccountCreateAttestation\");\nconst XChainAddClaimAttestation_1 = require(\"./XChainAddClaimAttestation\");\nconst XChainClaim_1 = require(\"./XChainClaim\");\nconst XChainCommit_1 = require(\"./XChainCommit\");\nconst XChainCreateBridge_1 = require(\"./XChainCreateBridge\");\nconst XChainCreateClaimID_1 = require(\"./XChainCreateClaimID\");\nconst XChainModifyBridge_1 = require(\"./XChainModifyBridge\");\nfunction validate(transaction) {\n  const tx = Object.assign({}, transaction);\n  if (tx.TransactionType == null) {\n    throw new errors_1.ValidationError('Object does not have a `TransactionType`');\n  }\n  if (typeof tx.TransactionType !== 'string') {\n    throw new errors_1.ValidationError(\"Object's `TransactionType` is not a string\");\n  }\n  if (tx.Memos != null && typeof tx.Memos !== 'object') {\n    throw new errors_1.ValidationError('Memo must be array');\n  }\n  if (tx.Memos != null) {\n    ;\n    tx.Memos.forEach(memo => {\n      if ((memo === null || memo === void 0 ? void 0 : memo.Memo) == null) {\n        throw new errors_1.ValidationError('Memo data must be in a `Memo` field');\n      }\n      if (memo.Memo.MemoData) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoData)) {\n          throw new errors_1.ValidationError('MemoData field must be a hex value');\n        }\n      }\n      if (memo.Memo.MemoType) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoType)) {\n          throw new errors_1.ValidationError('MemoType field must be a hex value');\n        }\n      }\n      if (memo.Memo.MemoFormat) {\n        if (!(0, utils_1.isHex)(memo.Memo.MemoFormat)) {\n          throw new errors_1.ValidationError('MemoFormat field must be a hex value');\n        }\n      }\n    });\n  }\n  Object.keys(tx).forEach(key => {\n    const standard_currency_code_len = 3;\n    if (tx[key] && (0, common_1.isIssuedCurrency)(tx[key])) {\n      const txCurrency = tx[key].currency;\n      if (txCurrency.length === standard_currency_code_len && txCurrency.toUpperCase() === 'XRP') {\n        throw new errors_1.ValidationError(`Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`);\n      }\n    }\n  });\n  (0, flags_1.setTransactionFlagsToNumber)(tx);\n  switch (tx.TransactionType) {\n    case 'AMMBid':\n      (0, AMMBid_1.validateAMMBid)(tx);\n      break;\n    case 'AMMCreate':\n      (0, AMMCreate_1.validateAMMCreate)(tx);\n      break;\n    case 'AMMDelete':\n      (0, AMMDelete_1.validateAMMDelete)(tx);\n      break;\n    case 'AMMDeposit':\n      (0, AMMDeposit_1.validateAMMDeposit)(tx);\n      break;\n    case 'AMMVote':\n      (0, AMMVote_1.validateAMMVote)(tx);\n      break;\n    case 'AMMWithdraw':\n      (0, AMMWithdraw_1.validateAMMWithdraw)(tx);\n      break;\n    case 'AccountDelete':\n      (0, accountDelete_1.validateAccountDelete)(tx);\n      break;\n    case 'AccountSet':\n      (0, accountSet_1.validateAccountSet)(tx);\n      break;\n    case 'CheckCancel':\n      (0, checkCancel_1.validateCheckCancel)(tx);\n      break;\n    case 'CheckCash':\n      (0, checkCash_1.validateCheckCash)(tx);\n      break;\n    case 'CheckCreate':\n      (0, checkCreate_1.validateCheckCreate)(tx);\n      break;\n    case 'Clawback':\n      (0, clawback_1.validateClawback)(tx);\n      break;\n    case 'DIDDelete':\n      (0, DIDDelete_1.validateDIDDelete)(tx);\n      break;\n    case 'DIDSet':\n      (0, DIDSet_1.validateDIDSet)(tx);\n      break;\n    case 'DepositPreauth':\n      (0, depositPreauth_1.validateDepositPreauth)(tx);\n      break;\n    case 'EscrowCancel':\n      (0, escrowCancel_1.validateEscrowCancel)(tx);\n      break;\n    case 'EscrowCreate':\n      (0, escrowCreate_1.validateEscrowCreate)(tx);\n      break;\n    case 'EscrowFinish':\n      (0, escrowFinish_1.validateEscrowFinish)(tx);\n      break;\n    case 'NFTokenAcceptOffer':\n      (0, NFTokenAcceptOffer_1.validateNFTokenAcceptOffer)(tx);\n      break;\n    case 'NFTokenBurn':\n      (0, NFTokenBurn_1.validateNFTokenBurn)(tx);\n      break;\n    case 'NFTokenCancelOffer':\n      (0, NFTokenCancelOffer_1.validateNFTokenCancelOffer)(tx);\n      break;\n    case 'NFTokenCreateOffer':\n      (0, NFTokenCreateOffer_1.validateNFTokenCreateOffer)(tx);\n      break;\n    case 'NFTokenMint':\n      (0, NFTokenMint_1.validateNFTokenMint)(tx);\n      break;\n    case 'OfferCancel':\n      (0, offerCancel_1.validateOfferCancel)(tx);\n      break;\n    case 'OfferCreate':\n      (0, offerCreate_1.validateOfferCreate)(tx);\n      break;\n    case 'Payment':\n      (0, payment_1.validatePayment)(tx);\n      break;\n    case 'PaymentChannelClaim':\n      (0, paymentChannelClaim_1.validatePaymentChannelClaim)(tx);\n      break;\n    case 'PaymentChannelCreate':\n      (0, paymentChannelCreate_1.validatePaymentChannelCreate)(tx);\n      break;\n    case 'PaymentChannelFund':\n      (0, paymentChannelFund_1.validatePaymentChannelFund)(tx);\n      break;\n    case 'SetRegularKey':\n      (0, setRegularKey_1.validateSetRegularKey)(tx);\n      break;\n    case 'SignerListSet':\n      (0, signerListSet_1.validateSignerListSet)(tx);\n      break;\n    case 'TicketCreate':\n      (0, ticketCreate_1.validateTicketCreate)(tx);\n      break;\n    case 'TrustSet':\n      (0, trustSet_1.validateTrustSet)(tx);\n      break;\n    case 'XChainAccountCreateCommit':\n      (0, XChainAccountCreateCommit_1.validateXChainAccountCreateCommit)(tx);\n      break;\n    case 'XChainAddAccountCreateAttestation':\n      (0, XChainAddAccountCreateAttestation_1.validateXChainAddAccountCreateAttestation)(tx);\n      break;\n    case 'XChainAddClaimAttestation':\n      (0, XChainAddClaimAttestation_1.validateXChainAddClaimAttestation)(tx);\n      break;\n    case 'XChainClaim':\n      (0, XChainClaim_1.validateXChainClaim)(tx);\n      break;\n    case 'XChainCommit':\n      (0, XChainCommit_1.validateXChainCommit)(tx);\n      break;\n    case 'XChainCreateBridge':\n      (0, XChainCreateBridge_1.validateXChainCreateBridge)(tx);\n      break;\n    case 'XChainCreateClaimID':\n      (0, XChainCreateClaimID_1.validateXChainCreateClaimID)(tx);\n      break;\n    case 'XChainModifyBridge':\n      (0, XChainModifyBridge_1.validateXChainModifyBridge)(tx);\n      break;\n    default:\n      throw new errors_1.ValidationError(`Invalid field TransactionType: ${tx.TransactionType}`);\n  }\n}\nexports.validate = validate;","map":{"version":3,"names":["errors_1","require","utils_1","flags_1","accountDelete_1","accountSet_1","AMMBid_1","AMMCreate_1","AMMDelete_1","AMMDeposit_1","AMMVote_1","AMMWithdraw_1","checkCancel_1","checkCash_1","checkCreate_1","clawback_1","common_1","depositPreauth_1","DIDDelete_1","DIDSet_1","escrowCancel_1","escrowCreate_1","escrowFinish_1","NFTokenAcceptOffer_1","NFTokenBurn_1","NFTokenCancelOffer_1","NFTokenCreateOffer_1","NFTokenMint_1","offerCancel_1","offerCreate_1","payment_1","paymentChannelClaim_1","paymentChannelCreate_1","paymentChannelFund_1","setRegularKey_1","signerListSet_1","ticketCreate_1","trustSet_1","XChainAccountCreateCommit_1","XChainAddAccountCreateAttestation_1","XChainAddClaimAttestation_1","XChainClaim_1","XChainCommit_1","XChainCreateBridge_1","XChainCreateClaimID_1","XChainModifyBridge_1","validate","transaction","tx","Object","assign","TransactionType","ValidationError","Memos","forEach","memo","Memo","MemoData","isHex","MemoType","MemoFormat","keys","key","standard_currency_code_len","isIssuedCurrency","txCurrency","currency","length","toUpperCase","setTransactionFlagsToNumber","validateAMMBid","validateAMMCreate","validateAMMDelete","validateAMMDeposit","validateAMMVote","validateAMMWithdraw","validateAccountDelete","validateAccountSet","validateCheckCancel","validateCheckCash","validateCheckCreate","validateClawback","validateDIDDelete","validateDIDSet","validateDepositPreauth","validateEscrowCancel","validateEscrowCreate","validateEscrowFinish","validateNFTokenAcceptOffer","validateNFTokenBurn","validateNFTokenCancelOffer","validateNFTokenCreateOffer","validateNFTokenMint","validateOfferCancel","validateOfferCreate","validatePayment","validatePaymentChannelClaim","validatePaymentChannelCreate","validatePaymentChannelFund","validateSetRegularKey","validateSignerListSet","validateTicketCreate","validateTrustSet","validateXChainAccountCreateCommit","validateXChainAddAccountCreateAttestation","validateXChainAddClaimAttestation","validateXChainClaim","validateXChainCommit","validateXChainCreateBridge","validateXChainCreateClaimID","validateXChainModifyBridge","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/transaction.ts"],"sourcesContent":["/* eslint-disable max-lines -- need to work with a lot of transactions in a switch statement */\n/* eslint-disable max-lines-per-function -- need to work with a lot of Tx verifications */\n\nimport { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount, Memo } from '../common'\nimport { isHex } from '../utils'\nimport { setTransactionFlagsToNumber } from '../utils/flags'\n\nimport { AccountDelete, validateAccountDelete } from './accountDelete'\nimport { AccountSet, validateAccountSet } from './accountSet'\nimport { AMMBid, validateAMMBid } from './AMMBid'\nimport { AMMCreate, validateAMMCreate } from './AMMCreate'\nimport { AMMDelete, validateAMMDelete } from './AMMDelete'\nimport { AMMDeposit, validateAMMDeposit } from './AMMDeposit'\nimport { AMMVote, validateAMMVote } from './AMMVote'\nimport { AMMWithdraw, validateAMMWithdraw } from './AMMWithdraw'\nimport { CheckCancel, validateCheckCancel } from './checkCancel'\nimport { CheckCash, validateCheckCash } from './checkCash'\nimport { CheckCreate, validateCheckCreate } from './checkCreate'\nimport { Clawback, validateClawback } from './clawback'\nimport { BaseTransaction, isIssuedCurrency } from './common'\nimport { DepositPreauth, validateDepositPreauth } from './depositPreauth'\nimport { DIDDelete, validateDIDDelete } from './DIDDelete'\nimport { DIDSet, validateDIDSet } from './DIDSet'\nimport { EnableAmendment } from './enableAmendment'\nimport { EscrowCancel, validateEscrowCancel } from './escrowCancel'\nimport { EscrowCreate, validateEscrowCreate } from './escrowCreate'\nimport { EscrowFinish, validateEscrowFinish } from './escrowFinish'\nimport { TransactionMetadata } from './metadata'\nimport {\n  NFTokenAcceptOffer,\n  validateNFTokenAcceptOffer,\n} from './NFTokenAcceptOffer'\nimport { NFTokenBurn, validateNFTokenBurn } from './NFTokenBurn'\nimport {\n  NFTokenCancelOffer,\n  validateNFTokenCancelOffer,\n} from './NFTokenCancelOffer'\nimport {\n  NFTokenCreateOffer,\n  validateNFTokenCreateOffer,\n} from './NFTokenCreateOffer'\nimport { NFTokenMint, validateNFTokenMint } from './NFTokenMint'\nimport { OfferCancel, validateOfferCancel } from './offerCancel'\nimport { OfferCreate, validateOfferCreate } from './offerCreate'\nimport { Payment, validatePayment } from './payment'\nimport {\n  PaymentChannelClaim,\n  validatePaymentChannelClaim,\n} from './paymentChannelClaim'\nimport {\n  PaymentChannelCreate,\n  validatePaymentChannelCreate,\n} from './paymentChannelCreate'\nimport {\n  PaymentChannelFund,\n  validatePaymentChannelFund,\n} from './paymentChannelFund'\nimport { SetFee } from './setFee'\nimport { SetRegularKey, validateSetRegularKey } from './setRegularKey'\nimport { SignerListSet, validateSignerListSet } from './signerListSet'\nimport { TicketCreate, validateTicketCreate } from './ticketCreate'\nimport { TrustSet, validateTrustSet } from './trustSet'\nimport { UNLModify } from './UNLModify'\nimport {\n  XChainAccountCreateCommit,\n  validateXChainAccountCreateCommit,\n} from './XChainAccountCreateCommit'\nimport {\n  XChainAddAccountCreateAttestation,\n  validateXChainAddAccountCreateAttestation,\n} from './XChainAddAccountCreateAttestation'\nimport {\n  XChainAddClaimAttestation,\n  validateXChainAddClaimAttestation,\n} from './XChainAddClaimAttestation'\nimport { XChainClaim, validateXChainClaim } from './XChainClaim'\nimport { XChainCommit, validateXChainCommit } from './XChainCommit'\nimport {\n  XChainCreateBridge,\n  validateXChainCreateBridge,\n} from './XChainCreateBridge'\nimport {\n  XChainCreateClaimID,\n  validateXChainCreateClaimID,\n} from './XChainCreateClaimID'\nimport {\n  XChainModifyBridge,\n  validateXChainModifyBridge,\n} from './XChainModifyBridge'\n\n/**\n * Transactions that can be submitted by clients\n *\n * @category Transaction Models\n */\nexport type SubmittableTransaction =\n  | AMMBid\n  | AMMCreate\n  | AMMDelete\n  | AMMDeposit\n  | AMMVote\n  | AMMWithdraw\n  | AccountDelete\n  | AccountSet\n  | CheckCancel\n  | CheckCash\n  | CheckCreate\n  | Clawback\n  | DIDDelete\n  | DIDSet\n  | DepositPreauth\n  | EscrowCancel\n  | EscrowCreate\n  | EscrowFinish\n  | NFTokenAcceptOffer\n  | NFTokenBurn\n  | NFTokenCancelOffer\n  | NFTokenCreateOffer\n  | NFTokenMint\n  | OfferCancel\n  | OfferCreate\n  | Payment\n  | PaymentChannelClaim\n  | PaymentChannelCreate\n  | PaymentChannelFund\n  | SetRegularKey\n  | SignerListSet\n  | TicketCreate\n  | TrustSet\n  | XChainAccountCreateCommit\n  | XChainAddAccountCreateAttestation\n  | XChainAddClaimAttestation\n  | XChainClaim\n  | XChainCommit\n  | XChainCreateBridge\n  | XChainCreateClaimID\n  | XChainModifyBridge\n\n/**\n * Transactions that can only be created by validators.\n *\n * @category Transaction Models\n */\nexport type PseudoTransaction = EnableAmendment | SetFee | UNLModify\n\n/**\n * All transactions that can live on the XRPL\n *\n * @category Transaction Models\n */\nexport type Transaction = SubmittableTransaction | PseudoTransaction\n\n/**\n * @category Transaction Models\n */\nexport interface TransactionAndMetadata<\n  T extends BaseTransaction = Transaction,\n> {\n  transaction: T\n  metadata: TransactionMetadata<T>\n}\n\n/**\n * Verifies various Transaction Types.\n * Encode/decode and individual type validation.\n *\n * @param transaction - A Transaction.\n * @throws ValidationError When the Transaction is malformed.\n * @category Utilities\n */\nexport function validate(transaction: Record<string, unknown>): void {\n  const tx = { ...transaction }\n  if (tx.TransactionType == null) {\n    throw new ValidationError('Object does not have a `TransactionType`')\n  }\n  if (typeof tx.TransactionType !== 'string') {\n    throw new ValidationError(\"Object's `TransactionType` is not a string\")\n  }\n\n  /*\n   * - Memos have exclusively hex data.\n   */\n  if (tx.Memos != null && typeof tx.Memos !== 'object') {\n    throw new ValidationError('Memo must be array')\n  }\n  if (tx.Memos != null) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- needed here\n    ;(tx.Memos as Array<Memo | null>).forEach((memo) => {\n      if (memo?.Memo == null) {\n        throw new ValidationError('Memo data must be in a `Memo` field')\n      }\n      if (memo.Memo.MemoData) {\n        if (!isHex(memo.Memo.MemoData)) {\n          throw new ValidationError('MemoData field must be a hex value')\n        }\n      }\n\n      if (memo.Memo.MemoType) {\n        if (!isHex(memo.Memo.MemoType)) {\n          throw new ValidationError('MemoType field must be a hex value')\n        }\n      }\n\n      if (memo.Memo.MemoFormat) {\n        if (!isHex(memo.Memo.MemoFormat)) {\n          throw new ValidationError('MemoFormat field must be a hex value')\n        }\n      }\n    })\n  }\n\n  Object.keys(tx).forEach((key) => {\n    const standard_currency_code_len = 3\n    if (tx[key] && isIssuedCurrency(tx[key])) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- needed\n      const txCurrency = (tx[key] as IssuedCurrencyAmount).currency\n\n      if (\n        txCurrency.length === standard_currency_code_len &&\n        txCurrency.toUpperCase() === 'XRP'\n      ) {\n        throw new ValidationError(\n          `Cannot have an issued currency with a similar standard code to XRP (received '${txCurrency}'). XRP is not an issued currency.`,\n        )\n      }\n    }\n  })\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- okay here\n  setTransactionFlagsToNumber(tx as unknown as Transaction)\n  switch (tx.TransactionType) {\n    case 'AMMBid':\n      validateAMMBid(tx)\n      break\n\n    case 'AMMCreate':\n      validateAMMCreate(tx)\n      break\n\n    case 'AMMDelete':\n      validateAMMDelete(tx)\n      break\n\n    case 'AMMDeposit':\n      validateAMMDeposit(tx)\n      break\n\n    case 'AMMVote':\n      validateAMMVote(tx)\n      break\n\n    case 'AMMWithdraw':\n      validateAMMWithdraw(tx)\n      break\n\n    case 'AccountDelete':\n      validateAccountDelete(tx)\n      break\n\n    case 'AccountSet':\n      validateAccountSet(tx)\n      break\n\n    case 'CheckCancel':\n      validateCheckCancel(tx)\n      break\n\n    case 'CheckCash':\n      validateCheckCash(tx)\n      break\n\n    case 'CheckCreate':\n      validateCheckCreate(tx)\n      break\n\n    case 'Clawback':\n      validateClawback(tx)\n      break\n\n    case 'DIDDelete':\n      validateDIDDelete(tx)\n      break\n\n    case 'DIDSet':\n      validateDIDSet(tx)\n      break\n\n    case 'DepositPreauth':\n      validateDepositPreauth(tx)\n      break\n\n    case 'EscrowCancel':\n      validateEscrowCancel(tx)\n      break\n\n    case 'EscrowCreate':\n      validateEscrowCreate(tx)\n      break\n\n    case 'EscrowFinish':\n      validateEscrowFinish(tx)\n      break\n\n    case 'NFTokenAcceptOffer':\n      validateNFTokenAcceptOffer(tx)\n      break\n\n    case 'NFTokenBurn':\n      validateNFTokenBurn(tx)\n      break\n\n    case 'NFTokenCancelOffer':\n      validateNFTokenCancelOffer(tx)\n      break\n\n    case 'NFTokenCreateOffer':\n      validateNFTokenCreateOffer(tx)\n      break\n\n    case 'NFTokenMint':\n      validateNFTokenMint(tx)\n      break\n\n    case 'OfferCancel':\n      validateOfferCancel(tx)\n      break\n\n    case 'OfferCreate':\n      validateOfferCreate(tx)\n      break\n\n    case 'Payment':\n      validatePayment(tx)\n      break\n\n    case 'PaymentChannelClaim':\n      validatePaymentChannelClaim(tx)\n      break\n\n    case 'PaymentChannelCreate':\n      validatePaymentChannelCreate(tx)\n      break\n\n    case 'PaymentChannelFund':\n      validatePaymentChannelFund(tx)\n      break\n\n    case 'SetRegularKey':\n      validateSetRegularKey(tx)\n      break\n\n    case 'SignerListSet':\n      validateSignerListSet(tx)\n      break\n\n    case 'TicketCreate':\n      validateTicketCreate(tx)\n      break\n\n    case 'TrustSet':\n      validateTrustSet(tx)\n      break\n\n    case 'XChainAccountCreateCommit':\n      validateXChainAccountCreateCommit(tx)\n      break\n\n    case 'XChainAddAccountCreateAttestation':\n      validateXChainAddAccountCreateAttestation(tx)\n      break\n\n    case 'XChainAddClaimAttestation':\n      validateXChainAddClaimAttestation(tx)\n      break\n\n    case 'XChainClaim':\n      validateXChainClaim(tx)\n      break\n\n    case 'XChainCommit':\n      validateXChainCommit(tx)\n      break\n\n    case 'XChainCreateBridge':\n      validateXChainCreateBridge(tx)\n      break\n\n    case 'XChainCreateClaimID':\n      validateXChainCreateClaimID(tx)\n      break\n\n    case 'XChainModifyBridge':\n      validateXChainModifyBridge(tx)\n      break\n\n    default:\n      throw new ValidationError(\n        `Invalid field TransactionType: ${tx.TransactionType}`,\n      )\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}