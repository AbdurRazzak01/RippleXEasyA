{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAccountSet = exports.AccountSetTfFlags = exports.AccountSetAsfFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar AccountSetAsfFlags;\n(function (AccountSetAsfFlags) {\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfRequireDest\"] = 1] = \"asfRequireDest\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfRequireAuth\"] = 2] = \"asfRequireAuth\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisallowXRP\"] = 3] = \"asfDisallowXRP\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisableMaster\"] = 4] = \"asfDisableMaster\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfAccountTxnID\"] = 5] = \"asfAccountTxnID\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfNoFreeze\"] = 6] = \"asfNoFreeze\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfGlobalFreeze\"] = 7] = \"asfGlobalFreeze\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDefaultRipple\"] = 8] = \"asfDefaultRipple\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDepositAuth\"] = 9] = \"asfDepositAuth\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfAuthorizedNFTokenMinter\"] = 10] = \"asfAuthorizedNFTokenMinter\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisallowIncomingNFTokenOffer\"] = 12] = \"asfDisallowIncomingNFTokenOffer\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisallowIncomingCheck\"] = 13] = \"asfDisallowIncomingCheck\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisallowIncomingPayChan\"] = 14] = \"asfDisallowIncomingPayChan\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfDisallowIncomingTrustline\"] = 15] = \"asfDisallowIncomingTrustline\";\n  AccountSetAsfFlags[AccountSetAsfFlags[\"asfAllowTrustLineClawback\"] = 16] = \"asfAllowTrustLineClawback\";\n})(AccountSetAsfFlags || (exports.AccountSetAsfFlags = AccountSetAsfFlags = {}));\nvar AccountSetTfFlags;\n(function (AccountSetTfFlags) {\n  AccountSetTfFlags[AccountSetTfFlags[\"tfRequireDestTag\"] = 65536] = \"tfRequireDestTag\";\n  AccountSetTfFlags[AccountSetTfFlags[\"tfOptionalDestTag\"] = 131072] = \"tfOptionalDestTag\";\n  AccountSetTfFlags[AccountSetTfFlags[\"tfRequireAuth\"] = 262144] = \"tfRequireAuth\";\n  AccountSetTfFlags[AccountSetTfFlags[\"tfOptionalAuth\"] = 524288] = \"tfOptionalAuth\";\n  AccountSetTfFlags[AccountSetTfFlags[\"tfDisallowXRP\"] = 1048576] = \"tfDisallowXRP\";\n  AccountSetTfFlags[AccountSetTfFlags[\"tfAllowXRP\"] = 2097152] = \"tfAllowXRP\";\n})(AccountSetTfFlags || (exports.AccountSetTfFlags = AccountSetTfFlags = {}));\nconst MIN_TICK_SIZE = 3;\nconst MAX_TICK_SIZE = 15;\nfunction validateAccountSet(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateOptionalField)(tx, 'NFTokenMinter', common_1.isAccount);\n  if (tx.ClearFlag !== undefined) {\n    if (typeof tx.ClearFlag !== 'number') {\n      throw new errors_1.ValidationError('AccountSet: invalid ClearFlag');\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.ClearFlag)) {\n      throw new errors_1.ValidationError('AccountSet: invalid ClearFlag');\n    }\n  }\n  if (tx.Domain !== undefined && typeof tx.Domain !== 'string') {\n    throw new errors_1.ValidationError('AccountSet: invalid Domain');\n  }\n  if (tx.EmailHash !== undefined && typeof tx.EmailHash !== 'string') {\n    throw new errors_1.ValidationError('AccountSet: invalid EmailHash');\n  }\n  if (tx.MessageKey !== undefined && typeof tx.MessageKey !== 'string') {\n    throw new errors_1.ValidationError('AccountSet: invalid MessageKey');\n  }\n  if (tx.SetFlag !== undefined) {\n    if (typeof tx.SetFlag !== 'number') {\n      throw new errors_1.ValidationError('AccountSet: invalid SetFlag');\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.SetFlag)) {\n      throw new errors_1.ValidationError('AccountSet: invalid SetFlag');\n    }\n  }\n  if (tx.TransferRate !== undefined && typeof tx.TransferRate !== 'number') {\n    throw new errors_1.ValidationError('AccountSet: invalid TransferRate');\n  }\n  if (tx.TickSize !== undefined) {\n    if (typeof tx.TickSize !== 'number') {\n      throw new errors_1.ValidationError('AccountSet: invalid TickSize');\n    }\n    if (tx.TickSize !== 0 && (tx.TickSize < MIN_TICK_SIZE || tx.TickSize > MAX_TICK_SIZE)) {\n      throw new errors_1.ValidationError('AccountSet: invalid TickSize');\n    }\n  }\n}\nexports.validateAccountSet = validateAccountSet;","map":{"version":3,"names":["errors_1","require","common_1","AccountSetAsfFlags","exports","AccountSetTfFlags","MIN_TICK_SIZE","MAX_TICK_SIZE","validateAccountSet","tx","validateBaseTransaction","validateOptionalField","isAccount","ClearFlag","undefined","ValidationError","Object","values","includes","Domain","EmailHash","MessageKey","SetFlag","TransferRate","TickSize"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/accountSet.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  validateBaseTransaction,\n  validateOptionalField,\n} from './common'\n\n/**\n * Enum for AccountSet Flags.\n *\n * @category Transaction Flags\n */\nexport enum AccountSetAsfFlags {\n  /** Require a destination tag to send transactions to this account. */\n  asfRequireDest = 1,\n  /**\n   * Require authorization for users to hold balances issued by this address\n   * can only be enabled if the address has no trust lines connected to it.\n   */\n  asfRequireAuth = 2,\n  /** XRP should not be sent to this account. */\n  asfDisallowXRP = 3,\n  /**\n   * Disallow use of the master key pair. Can only be enabled if the account\n   * has configured another way to sign transactions, such as a Regular Key or a\n   * Signer List.\n   */\n  asfDisableMaster = 4,\n  /**\n   * Track the ID of this account's most recent transaction. Required for\n   * AccountTxnID.\n   */\n  asfAccountTxnID = 5,\n  /**\n   * Permanently give up the ability to freeze individual trust lines or\n   * disable Global Freeze. This flag can never be disabled after being enabled.\n   */\n  asfNoFreeze = 6,\n  /** Freeze all assets issued by this account. */\n  asfGlobalFreeze = 7,\n  /** Enable rippling on this account's trust lines by default. */\n  asfDefaultRipple = 8,\n  /** Enable Deposit Authorization on this account. */\n  asfDepositAuth = 9,\n  /**\n   * Allow another account to mint and burn tokens on behalf of this account.\n   */\n  asfAuthorizedNFTokenMinter = 10,\n  /** asf 11 is reserved for Hooks amendment */\n  /** Disallow other accounts from creating incoming NFTOffers */\n  asfDisallowIncomingNFTokenOffer = 12,\n  /** Disallow other accounts from creating incoming Checks */\n  asfDisallowIncomingCheck = 13,\n  /** Disallow other accounts from creating incoming PayChannels */\n  asfDisallowIncomingPayChan = 14,\n  /** Disallow other accounts from creating incoming Trustlines */\n  asfDisallowIncomingTrustline = 15,\n  /** Permanently gain the ability to claw back issued IOUs */\n  asfAllowTrustLineClawback = 16,\n}\n\n/**\n * Enum for AccountSet Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AccountSetTfFlags {\n  /** The same as SetFlag: asfRequireDest. */\n  tfRequireDestTag = 0x00010000,\n  /** The same as ClearFlag: asfRequireDest. */\n  tfOptionalDestTag = 0x00020000,\n  /** The same as SetFlag: asfRequireAuth. */\n  tfRequireAuth = 0x00040000,\n  /** The same as ClearFlag: asfRequireAuth. */\n  tfOptionalAuth = 0x00080000,\n  /** The same as SetFlag: asfDisallowXRP. */\n  tfDisallowXRP = 0x00100000,\n  /** The same as ClearFlag: asfDisallowXRP. */\n  tfAllowXRP = 0x00200000,\n}\n\n/**\n * Map of flags to boolean values representing {@link AccountSet} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n *  const accountSetTx: AccountSet = {\n *    TransactionType: 'AccountSet',\n *    Account: 'rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn',\n *    Flags: {\n *      tfOptionalDestTag: true,\n *      tfRequireAuth: true\n *    },\n *  }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(accountSetTx)\n * console.log(autofilledTx)\n * // {\n * //  TransactionType: 'AccountSet',\n * //  Account: 'rf1BiGeXwwQoi8Z2ueFYTEXSwuJYfV2Jpn',\n * //  Flags: 393216,\n * //  Sequence: 1,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21971793\n * // }\n * ```\n */\nexport interface AccountSetFlagsInterface {\n  tfRequireDestTag?: boolean\n  tfOptionalDestTag?: boolean\n  tfRequireAuth?: boolean\n  tfOptionalAuth?: boolean\n  tfDisallowXRP?: boolean\n  tfAllowXRP?: boolean\n}\n\n/**\n * An AccountSet transaction modifies the properties of an account in the XRP\n * Ledger.\n *\n * @category Transaction Models\n */\nexport interface AccountSet extends BaseTransaction {\n  TransactionType: 'AccountSet'\n  Flags?: number | AccountSetFlagsInterface\n  /** Unique identifier of a flag to disable for this account. */\n  ClearFlag?: number\n  /**\n   * The domain that owns this account, as a string of hex representing the.\n   * ASCII for the domain in lowercase.\n   */\n  Domain?: string\n  /** Hash of an email address to be used for generating an avatar image. */\n  EmailHash?: string\n  /** Public key for sending encrypted messages to this account. */\n  MessageKey?: string\n  /** Integer flag to enable for this account. */\n  SetFlag?: AccountSetAsfFlags\n  /**\n   * The fee to charge when users transfer this account's issued currencies,\n   * represented as billionths of a unit. Cannot be more than 2000000000 or less\n   * than 1000000000, except for the special case 0 meaning no fee.\n   */\n  TransferRate?: number\n  /**\n   * Tick size to use for offers involving a currency issued by this address.\n   * The exchange rates of those offers is rounded to this many significant\n   * digits. Valid values are 3 to 15 inclusive, or 0 to disable.\n   */\n  TickSize?: number\n  /**\n   * Sets an alternate account that is allowed to mint NFTokens on this\n   * account's behalf using NFTokenMint's `Issuer` field.\n   */\n  NFTokenMinter?: Account\n}\n\nconst MIN_TICK_SIZE = 3\nconst MAX_TICK_SIZE = 15\n\n/**\n * Verify the form and type of an AccountSet at runtime.\n *\n * @param tx - An AccountSet Transaction.\n * @throws When the AccountSet is Malformed.\n */\n// eslint-disable-next-line max-lines-per-function -- okay for this method, only a little over\nexport function validateAccountSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateOptionalField(tx, 'NFTokenMinter', isAccount)\n\n  if (tx.ClearFlag !== undefined) {\n    if (typeof tx.ClearFlag !== 'number') {\n      throw new ValidationError('AccountSet: invalid ClearFlag')\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.ClearFlag)) {\n      throw new ValidationError('AccountSet: invalid ClearFlag')\n    }\n  }\n\n  if (tx.Domain !== undefined && typeof tx.Domain !== 'string') {\n    throw new ValidationError('AccountSet: invalid Domain')\n  }\n\n  if (tx.EmailHash !== undefined && typeof tx.EmailHash !== 'string') {\n    throw new ValidationError('AccountSet: invalid EmailHash')\n  }\n\n  if (tx.MessageKey !== undefined && typeof tx.MessageKey !== 'string') {\n    throw new ValidationError('AccountSet: invalid MessageKey')\n  }\n\n  if (tx.SetFlag !== undefined) {\n    if (typeof tx.SetFlag !== 'number') {\n      throw new ValidationError('AccountSet: invalid SetFlag')\n    }\n    if (!Object.values(AccountSetAsfFlags).includes(tx.SetFlag)) {\n      throw new ValidationError('AccountSet: invalid SetFlag')\n    }\n  }\n\n  if (tx.TransferRate !== undefined && typeof tx.TransferRate !== 'number') {\n    throw new ValidationError('AccountSet: invalid TransferRate')\n  }\n\n  if (tx.TickSize !== undefined) {\n    if (typeof tx.TickSize !== 'number') {\n      throw new ValidationError('AccountSet: invalid TickSize')\n    }\n    if (\n      tx.TickSize !== 0 &&\n      (tx.TickSize < MIN_TICK_SIZE || tx.TickSize > MAX_TICK_SIZE)\n    ) {\n      throw new ValidationError('AccountSet: invalid TickSize')\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}