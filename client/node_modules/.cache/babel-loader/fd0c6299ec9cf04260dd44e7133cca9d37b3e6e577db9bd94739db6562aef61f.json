{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/common/index.ts"],"sourcesContent":["export type LedgerIndex = number | ('validated' | 'closed' | 'current')\n\nexport interface XRP {\n  currency: 'XRP'\n  issuer?: never\n}\n\nexport interface IssuedCurrency {\n  currency: string\n  issuer: string\n}\n\nexport type Currency = IssuedCurrency | XRP\n\nexport interface IssuedCurrencyAmount extends IssuedCurrency {\n  value: string\n}\n\nexport type Amount = IssuedCurrencyAmount | string\n\nexport interface Balance {\n  currency: string\n  issuer?: string\n  value: string\n}\n\nexport interface Signer {\n  Signer: {\n    Account: string\n    TxnSignature: string\n    SigningPubKey: string\n  }\n}\n\nexport interface Memo {\n  Memo: {\n    MemoData?: string\n    MemoType?: string\n    MemoFormat?: string\n  }\n}\n\nexport type StreamType =\n  | 'consensus'\n  | 'ledger'\n  | 'manifests'\n  | 'peer_status'\n  | 'transactions'\n  | 'transactions_proposed'\n  | 'server'\n  | 'validations'\n\nexport interface PathStep {\n  account?: string\n  currency?: string\n  issuer?: string\n}\n\nexport type Path = PathStep[]\n\n/**\n * The object that describes the signer in SignerEntries.\n */\nexport interface SignerEntry {\n  /**\n   * The object that describes the signer in SignerEntries.\n   */\n  SignerEntry: {\n    /**\n     * An XRP Ledger address whose signature contributes to the multi-signature.\n     * It does not need to be a funded address in the ledger.\n     */\n    Account: string\n    /**\n     * The weight of a signature from this signer.\n     * A multi-signature is only valid if the sum weight of the signatures provided meets\n     * or exceeds the signer list's SignerQuorum value.\n     */\n    SignerWeight: number\n    /**\n     * An arbitrary 256-bit (32-byte) field that can be used to identify the signer, which\n     * may be useful for smart contracts, or for identifying who controls a key in a large\n     * organization.\n     */\n    WalletLocator?: string\n  }\n}\n\n/**\n * This information is added to Transactions in request responses, but is not part\n * of the canonical Transaction information on ledger. These fields are denoted with\n * lowercase letters to indicate this in the rippled responses.\n */\nexport interface ResponseOnlyTxInfo {\n  /**\n   * The date/time when this transaction was included in a validated ledger.\n   */\n  date?: number\n  /**\n   * An identifying hash value unique to this transaction, as a hex string.\n   */\n  hash?: string\n  /**\n   * The sequence number of the ledger that included this transaction.\n   */\n  ledger_index?: number\n  /**\n   * @deprecated Alias for ledger_index.\n   */\n  inLedger?: number\n}\n\n/**\n * One offer that might be returned from either an {@link NFTBuyOffersRequest}\n * or an {@link NFTSellOffersRequest}.\n *\n * @category Responses\n */\nexport interface NFTOffer {\n  amount: Amount\n  flags: number\n  nft_offer_index: string\n  owner: string\n  destination?: string\n  expiration?: number\n}\n\n/**\n * One NFToken that might be returned from an {@link NFTInfoResponse}\n *\n * @category Responses\n */\nexport interface NFToken {\n  nft_id: string\n  ledger_index: number\n  owner: string\n  is_burned: boolean\n  flags: number\n  transfer_fee: number\n  issuer: string\n  nft_taxon: number\n  nft_serial: number\n  uri: string\n}\n\nexport interface AuthAccount {\n  AuthAccount: {\n    Account: string\n  }\n}\n\nexport interface XChainBridge {\n  LockingChainDoor: string\n  LockingChainIssue: Currency\n  IssuingChainDoor: string\n  IssuingChainIssue: Currency\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}