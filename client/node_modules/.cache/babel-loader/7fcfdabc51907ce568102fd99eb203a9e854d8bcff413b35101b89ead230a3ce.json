{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseAmountValue = exports.validateBaseTransaction = exports.validateOptionalField = exports.validateRequiredField = exports.isXChainBridge = exports.isAmount = exports.isAccount = exports.isIssuedCurrency = exports.isCurrency = exports.isNumber = exports.isString = void 0;\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst MEMO_SIZE = 3;\nfunction isMemo(obj) {\n  if (obj.Memo == null) {\n    return false;\n  }\n  const memo = obj.Memo;\n  const size = Object.keys(memo).length;\n  const validData = memo.MemoData == null || typeof memo.MemoData === 'string';\n  const validFormat = memo.MemoFormat == null || typeof memo.MemoFormat === 'string';\n  const validType = memo.MemoType == null || typeof memo.MemoType === 'string';\n  return size >= 1 && size <= MEMO_SIZE && validData && validFormat && validType && (0, utils_1.onlyHasFields)(memo, ['MemoFormat', 'MemoData', 'MemoType']);\n}\nconst SIGNER_SIZE = 3;\nfunction isSigner(obj) {\n  const signerWrapper = obj;\n  if (signerWrapper.Signer == null) {\n    return false;\n  }\n  const signer = signerWrapper.Signer;\n  return Object.keys(signer).length === SIGNER_SIZE && typeof signer.Account === 'string' && typeof signer.TxnSignature === 'string' && typeof signer.SigningPubKey === 'string';\n}\nconst XRP_CURRENCY_SIZE = 1;\nconst ISSUE_SIZE = 2;\nconst ISSUED_CURRENCY_SIZE = 3;\nconst XCHAIN_BRIDGE_SIZE = 4;\nfunction isRecord(value) {\n  return value !== null && typeof value === 'object';\n}\nfunction isString(str) {\n  return typeof str === 'string';\n}\nexports.isString = isString;\nfunction isNumber(num) {\n  return typeof num === 'number';\n}\nexports.isNumber = isNumber;\nfunction isCurrency(input) {\n  return isRecord(input) && (Object.keys(input).length === ISSUE_SIZE && typeof input.issuer === 'string' && typeof input.currency === 'string' || Object.keys(input).length === XRP_CURRENCY_SIZE && input.currency === 'XRP');\n}\nexports.isCurrency = isCurrency;\nfunction isIssuedCurrency(input) {\n  return isRecord(input) && Object.keys(input).length === ISSUED_CURRENCY_SIZE && typeof input.value === 'string' && typeof input.issuer === 'string' && typeof input.currency === 'string';\n}\nexports.isIssuedCurrency = isIssuedCurrency;\nfunction isAccount(account) {\n  return typeof account === 'string' && ((0, ripple_address_codec_1.isValidClassicAddress)(account) || (0, ripple_address_codec_1.isValidXAddress)(account));\n}\nexports.isAccount = isAccount;\nfunction isAmount(amount) {\n  return typeof amount === 'string' || isIssuedCurrency(amount);\n}\nexports.isAmount = isAmount;\nfunction isXChainBridge(input) {\n  return isRecord(input) && Object.keys(input).length === XCHAIN_BRIDGE_SIZE && typeof input.LockingChainDoor === 'string' && isCurrency(input.LockingChainIssue) && typeof input.IssuingChainDoor === 'string' && isCurrency(input.IssuingChainIssue);\n}\nexports.isXChainBridge = isXChainBridge;\nfunction validateRequiredField(tx, paramName, checkValidity) {\n  if (tx[paramName] == null) {\n    throw new errors_1.ValidationError(`${tx.TransactionType}: missing field ${paramName}`);\n  }\n  if (!checkValidity(tx[paramName])) {\n    throw new errors_1.ValidationError(`${tx.TransactionType}: invalid field ${paramName}`);\n  }\n}\nexports.validateRequiredField = validateRequiredField;\nfunction validateOptionalField(tx, paramName, checkValidity) {\n  if (tx[paramName] !== undefined && !checkValidity(tx[paramName])) {\n    throw new errors_1.ValidationError(`${tx.TransactionType}: invalid field ${paramName}`);\n  }\n}\nexports.validateOptionalField = validateOptionalField;\nfunction validateBaseTransaction(common) {\n  if (common.TransactionType === undefined) {\n    throw new errors_1.ValidationError('BaseTransaction: missing field TransactionType');\n  }\n  if (typeof common.TransactionType !== 'string') {\n    throw new errors_1.ValidationError('BaseTransaction: TransactionType not string');\n  }\n  if (!ripple_binary_codec_1.TRANSACTION_TYPES.includes(common.TransactionType)) {\n    throw new errors_1.ValidationError('BaseTransaction: Unknown TransactionType');\n  }\n  validateRequiredField(common, 'Account', isString);\n  validateOptionalField(common, 'Fee', isString);\n  validateOptionalField(common, 'Sequence', isNumber);\n  validateOptionalField(common, 'AccountTxnID', isString);\n  validateOptionalField(common, 'LastLedgerSequence', isNumber);\n  const memos = common.Memos;\n  if (memos !== undefined && !memos.every(isMemo)) {\n    throw new errors_1.ValidationError('BaseTransaction: invalid Memos');\n  }\n  const signers = common.Signers;\n  if (signers !== undefined && (signers.length === 0 || !signers.every(isSigner))) {\n    throw new errors_1.ValidationError('BaseTransaction: invalid Signers');\n  }\n  validateOptionalField(common, 'SourceTag', isNumber);\n  validateOptionalField(common, 'SigningPubKey', isString);\n  validateOptionalField(common, 'TicketSequence', isNumber);\n  validateOptionalField(common, 'TxnSignature', isString);\n  validateOptionalField(common, 'NetworkID', isNumber);\n}\nexports.validateBaseTransaction = validateBaseTransaction;\nfunction parseAmountValue(amount) {\n  if (!isAmount(amount)) {\n    return NaN;\n  }\n  if (typeof amount === 'string') {\n    return parseFloat(amount);\n  }\n  return parseFloat(amount.value);\n}\nexports.parseAmountValue = parseAmountValue;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseAmountValue","validateBaseTransaction","validateOptionalField","validateRequiredField","isXChainBridge","isAmount","isAccount","isIssuedCurrency","isCurrency","isNumber","isString","ripple_address_codec_1","require","ripple_binary_codec_1","errors_1","utils_1","MEMO_SIZE","isMemo","obj","Memo","memo","size","keys","length","validData","MemoData","validFormat","MemoFormat","validType","MemoType","onlyHasFields","SIGNER_SIZE","isSigner","signerWrapper","Signer","signer","Account","TxnSignature","SigningPubKey","XRP_CURRENCY_SIZE","ISSUE_SIZE","ISSUED_CURRENCY_SIZE","XCHAIN_BRIDGE_SIZE","isRecord","str","num","input","issuer","currency","account","isValidClassicAddress","isValidXAddress","amount","LockingChainDoor","LockingChainIssue","IssuingChainDoor","IssuingChainIssue","tx","paramName","checkValidity","ValidationError","TransactionType","undefined","common","TRANSACTION_TYPES","includes","memos","Memos","every","signers","Signers","NaN","parseFloat"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/common.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseAmountValue = exports.validateBaseTransaction = exports.validateOptionalField = exports.validateRequiredField = exports.isXChainBridge = exports.isAmount = exports.isAccount = exports.isIssuedCurrency = exports.isCurrency = exports.isNumber = exports.isString = void 0;\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst MEMO_SIZE = 3;\nfunction isMemo(obj) {\n    if (obj.Memo == null) {\n        return false;\n    }\n    const memo = obj.Memo;\n    const size = Object.keys(memo).length;\n    const validData = memo.MemoData == null || typeof memo.MemoData === 'string';\n    const validFormat = memo.MemoFormat == null || typeof memo.MemoFormat === 'string';\n    const validType = memo.MemoType == null || typeof memo.MemoType === 'string';\n    return (size >= 1 &&\n        size <= MEMO_SIZE &&\n        validData &&\n        validFormat &&\n        validType &&\n        (0, utils_1.onlyHasFields)(memo, ['MemoFormat', 'MemoData', 'MemoType']));\n}\nconst SIGNER_SIZE = 3;\nfunction isSigner(obj) {\n    const signerWrapper = obj;\n    if (signerWrapper.Signer == null) {\n        return false;\n    }\n    const signer = signerWrapper.Signer;\n    return (Object.keys(signer).length === SIGNER_SIZE &&\n        typeof signer.Account === 'string' &&\n        typeof signer.TxnSignature === 'string' &&\n        typeof signer.SigningPubKey === 'string');\n}\nconst XRP_CURRENCY_SIZE = 1;\nconst ISSUE_SIZE = 2;\nconst ISSUED_CURRENCY_SIZE = 3;\nconst XCHAIN_BRIDGE_SIZE = 4;\nfunction isRecord(value) {\n    return value !== null && typeof value === 'object';\n}\nfunction isString(str) {\n    return typeof str === 'string';\n}\nexports.isString = isString;\nfunction isNumber(num) {\n    return typeof num === 'number';\n}\nexports.isNumber = isNumber;\nfunction isCurrency(input) {\n    return (isRecord(input) &&\n        ((Object.keys(input).length === ISSUE_SIZE &&\n            typeof input.issuer === 'string' &&\n            typeof input.currency === 'string') ||\n            (Object.keys(input).length === XRP_CURRENCY_SIZE &&\n                input.currency === 'XRP')));\n}\nexports.isCurrency = isCurrency;\nfunction isIssuedCurrency(input) {\n    return (isRecord(input) &&\n        Object.keys(input).length === ISSUED_CURRENCY_SIZE &&\n        typeof input.value === 'string' &&\n        typeof input.issuer === 'string' &&\n        typeof input.currency === 'string');\n}\nexports.isIssuedCurrency = isIssuedCurrency;\nfunction isAccount(account) {\n    return (typeof account === 'string' &&\n        ((0, ripple_address_codec_1.isValidClassicAddress)(account) || (0, ripple_address_codec_1.isValidXAddress)(account)));\n}\nexports.isAccount = isAccount;\nfunction isAmount(amount) {\n    return typeof amount === 'string' || isIssuedCurrency(amount);\n}\nexports.isAmount = isAmount;\nfunction isXChainBridge(input) {\n    return (isRecord(input) &&\n        Object.keys(input).length === XCHAIN_BRIDGE_SIZE &&\n        typeof input.LockingChainDoor === 'string' &&\n        isCurrency(input.LockingChainIssue) &&\n        typeof input.IssuingChainDoor === 'string' &&\n        isCurrency(input.IssuingChainIssue));\n}\nexports.isXChainBridge = isXChainBridge;\nfunction validateRequiredField(tx, paramName, checkValidity) {\n    if (tx[paramName] == null) {\n        throw new errors_1.ValidationError(`${tx.TransactionType}: missing field ${paramName}`);\n    }\n    if (!checkValidity(tx[paramName])) {\n        throw new errors_1.ValidationError(`${tx.TransactionType}: invalid field ${paramName}`);\n    }\n}\nexports.validateRequiredField = validateRequiredField;\nfunction validateOptionalField(tx, paramName, checkValidity) {\n    if (tx[paramName] !== undefined && !checkValidity(tx[paramName])) {\n        throw new errors_1.ValidationError(`${tx.TransactionType}: invalid field ${paramName}`);\n    }\n}\nexports.validateOptionalField = validateOptionalField;\nfunction validateBaseTransaction(common) {\n    if (common.TransactionType === undefined) {\n        throw new errors_1.ValidationError('BaseTransaction: missing field TransactionType');\n    }\n    if (typeof common.TransactionType !== 'string') {\n        throw new errors_1.ValidationError('BaseTransaction: TransactionType not string');\n    }\n    if (!ripple_binary_codec_1.TRANSACTION_TYPES.includes(common.TransactionType)) {\n        throw new errors_1.ValidationError('BaseTransaction: Unknown TransactionType');\n    }\n    validateRequiredField(common, 'Account', isString);\n    validateOptionalField(common, 'Fee', isString);\n    validateOptionalField(common, 'Sequence', isNumber);\n    validateOptionalField(common, 'AccountTxnID', isString);\n    validateOptionalField(common, 'LastLedgerSequence', isNumber);\n    const memos = common.Memos;\n    if (memos !== undefined && !memos.every(isMemo)) {\n        throw new errors_1.ValidationError('BaseTransaction: invalid Memos');\n    }\n    const signers = common.Signers;\n    if (signers !== undefined &&\n        (signers.length === 0 || !signers.every(isSigner))) {\n        throw new errors_1.ValidationError('BaseTransaction: invalid Signers');\n    }\n    validateOptionalField(common, 'SourceTag', isNumber);\n    validateOptionalField(common, 'SigningPubKey', isString);\n    validateOptionalField(common, 'TicketSequence', isNumber);\n    validateOptionalField(common, 'TxnSignature', isString);\n    validateOptionalField(common, 'NetworkID', isNumber);\n}\nexports.validateBaseTransaction = validateBaseTransaction;\nfunction parseAmountValue(amount) {\n    if (!isAmount(amount)) {\n        return NaN;\n    }\n    if (typeof amount === 'string') {\n        return parseFloat(amount);\n    }\n    return parseFloat(amount.value);\n}\nexports.parseAmountValue = parseAmountValue;\n//# sourceMappingURL=common.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,uBAAuB,GAAGH,OAAO,CAACI,qBAAqB,GAAGJ,OAAO,CAACK,qBAAqB,GAAGL,OAAO,CAACM,cAAc,GAAGN,OAAO,CAACO,QAAQ,GAAGP,OAAO,CAACQ,SAAS,GAAGR,OAAO,CAACS,gBAAgB,GAAGT,OAAO,CAACU,UAAU,GAAGV,OAAO,CAACW,QAAQ,GAAGX,OAAO,CAACY,QAAQ,GAAG,KAAK,CAAC;AACzR,MAAMC,sBAAsB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9D,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC5D,MAAME,QAAQ,GAAGF,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMI,SAAS,GAAG,CAAC;AACnB,SAASC,MAAMA,CAACC,GAAG,EAAE;EACjB,IAAIA,GAAG,CAACC,IAAI,IAAI,IAAI,EAAE;IAClB,OAAO,KAAK;EAChB;EACA,MAAMC,IAAI,GAAGF,GAAG,CAACC,IAAI;EACrB,MAAME,IAAI,GAAGzB,MAAM,CAAC0B,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM;EACrC,MAAMC,SAAS,GAAGJ,IAAI,CAACK,QAAQ,IAAI,IAAI,IAAI,OAAOL,IAAI,CAACK,QAAQ,KAAK,QAAQ;EAC5E,MAAMC,WAAW,GAAGN,IAAI,CAACO,UAAU,IAAI,IAAI,IAAI,OAAOP,IAAI,CAACO,UAAU,KAAK,QAAQ;EAClF,MAAMC,SAAS,GAAGR,IAAI,CAACS,QAAQ,IAAI,IAAI,IAAI,OAAOT,IAAI,CAACS,QAAQ,KAAK,QAAQ;EAC5E,OAAQR,IAAI,IAAI,CAAC,IACbA,IAAI,IAAIL,SAAS,IACjBQ,SAAS,IACTE,WAAW,IACXE,SAAS,IACT,CAAC,CAAC,EAAEb,OAAO,CAACe,aAAa,EAAEV,IAAI,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AAChF;AACA,MAAMW,WAAW,GAAG,CAAC;AACrB,SAASC,QAAQA,CAACd,GAAG,EAAE;EACnB,MAAMe,aAAa,GAAGf,GAAG;EACzB,IAAIe,aAAa,CAACC,MAAM,IAAI,IAAI,EAAE;IAC9B,OAAO,KAAK;EAChB;EACA,MAAMC,MAAM,GAAGF,aAAa,CAACC,MAAM;EACnC,OAAQtC,MAAM,CAAC0B,IAAI,CAACa,MAAM,CAAC,CAACZ,MAAM,KAAKQ,WAAW,IAC9C,OAAOI,MAAM,CAACC,OAAO,KAAK,QAAQ,IAClC,OAAOD,MAAM,CAACE,YAAY,KAAK,QAAQ,IACvC,OAAOF,MAAM,CAACG,aAAa,KAAK,QAAQ;AAChD;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAC3B,MAAMC,UAAU,GAAG,CAAC;AACpB,MAAMC,oBAAoB,GAAG,CAAC;AAC9B,MAAMC,kBAAkB,GAAG,CAAC;AAC5B,SAASC,QAAQA,CAAC5C,KAAK,EAAE;EACrB,OAAOA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ;AACtD;AACA,SAASW,QAAQA,CAACkC,GAAG,EAAE;EACnB,OAAO,OAAOA,GAAG,KAAK,QAAQ;AAClC;AACA9C,OAAO,CAACY,QAAQ,GAAGA,QAAQ;AAC3B,SAASD,QAAQA,CAACoC,GAAG,EAAE;EACnB,OAAO,OAAOA,GAAG,KAAK,QAAQ;AAClC;AACA/C,OAAO,CAACW,QAAQ,GAAGA,QAAQ;AAC3B,SAASD,UAAUA,CAACsC,KAAK,EAAE;EACvB,OAAQH,QAAQ,CAACG,KAAK,CAAC,KACjBlD,MAAM,CAAC0B,IAAI,CAACwB,KAAK,CAAC,CAACvB,MAAM,KAAKiB,UAAU,IACtC,OAAOM,KAAK,CAACC,MAAM,KAAK,QAAQ,IAChC,OAAOD,KAAK,CAACE,QAAQ,KAAK,QAAQ,IACjCpD,MAAM,CAAC0B,IAAI,CAACwB,KAAK,CAAC,CAACvB,MAAM,KAAKgB,iBAAiB,IAC5CO,KAAK,CAACE,QAAQ,KAAK,KAAM,CAAC;AAC1C;AACAlD,OAAO,CAACU,UAAU,GAAGA,UAAU;AAC/B,SAASD,gBAAgBA,CAACuC,KAAK,EAAE;EAC7B,OAAQH,QAAQ,CAACG,KAAK,CAAC,IACnBlD,MAAM,CAAC0B,IAAI,CAACwB,KAAK,CAAC,CAACvB,MAAM,KAAKkB,oBAAoB,IAClD,OAAOK,KAAK,CAAC/C,KAAK,KAAK,QAAQ,IAC/B,OAAO+C,KAAK,CAACC,MAAM,KAAK,QAAQ,IAChC,OAAOD,KAAK,CAACE,QAAQ,KAAK,QAAQ;AAC1C;AACAlD,OAAO,CAACS,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASD,SAASA,CAAC2C,OAAO,EAAE;EACxB,OAAQ,OAAOA,OAAO,KAAK,QAAQ,KAC9B,CAAC,CAAC,EAAEtC,sBAAsB,CAACuC,qBAAqB,EAAED,OAAO,CAAC,IAAI,CAAC,CAAC,EAAEtC,sBAAsB,CAACwC,eAAe,EAAEF,OAAO,CAAC,CAAC;AAC5H;AACAnD,OAAO,CAACQ,SAAS,GAAGA,SAAS;AAC7B,SAASD,QAAQA,CAAC+C,MAAM,EAAE;EACtB,OAAO,OAAOA,MAAM,KAAK,QAAQ,IAAI7C,gBAAgB,CAAC6C,MAAM,CAAC;AACjE;AACAtD,OAAO,CAACO,QAAQ,GAAGA,QAAQ;AAC3B,SAASD,cAAcA,CAAC0C,KAAK,EAAE;EAC3B,OAAQH,QAAQ,CAACG,KAAK,CAAC,IACnBlD,MAAM,CAAC0B,IAAI,CAACwB,KAAK,CAAC,CAACvB,MAAM,KAAKmB,kBAAkB,IAChD,OAAOI,KAAK,CAACO,gBAAgB,KAAK,QAAQ,IAC1C7C,UAAU,CAACsC,KAAK,CAACQ,iBAAiB,CAAC,IACnC,OAAOR,KAAK,CAACS,gBAAgB,KAAK,QAAQ,IAC1C/C,UAAU,CAACsC,KAAK,CAACU,iBAAiB,CAAC;AAC3C;AACA1D,OAAO,CAACM,cAAc,GAAGA,cAAc;AACvC,SAASD,qBAAqBA,CAACsD,EAAE,EAAEC,SAAS,EAAEC,aAAa,EAAE;EACzD,IAAIF,EAAE,CAACC,SAAS,CAAC,IAAI,IAAI,EAAE;IACvB,MAAM,IAAI5C,QAAQ,CAAC8C,eAAe,CAAE,GAAEH,EAAE,CAACI,eAAgB,mBAAkBH,SAAU,EAAC,CAAC;EAC3F;EACA,IAAI,CAACC,aAAa,CAACF,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE;IAC/B,MAAM,IAAI5C,QAAQ,CAAC8C,eAAe,CAAE,GAAEH,EAAE,CAACI,eAAgB,mBAAkBH,SAAU,EAAC,CAAC;EAC3F;AACJ;AACA5D,OAAO,CAACK,qBAAqB,GAAGA,qBAAqB;AACrD,SAASD,qBAAqBA,CAACuD,EAAE,EAAEC,SAAS,EAAEC,aAAa,EAAE;EACzD,IAAIF,EAAE,CAACC,SAAS,CAAC,KAAKI,SAAS,IAAI,CAACH,aAAa,CAACF,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE;IAC9D,MAAM,IAAI5C,QAAQ,CAAC8C,eAAe,CAAE,GAAEH,EAAE,CAACI,eAAgB,mBAAkBH,SAAU,EAAC,CAAC;EAC3F;AACJ;AACA5D,OAAO,CAACI,qBAAqB,GAAGA,qBAAqB;AACrD,SAASD,uBAAuBA,CAAC8D,MAAM,EAAE;EACrC,IAAIA,MAAM,CAACF,eAAe,KAAKC,SAAS,EAAE;IACtC,MAAM,IAAIhD,QAAQ,CAAC8C,eAAe,CAAC,gDAAgD,CAAC;EACxF;EACA,IAAI,OAAOG,MAAM,CAACF,eAAe,KAAK,QAAQ,EAAE;IAC5C,MAAM,IAAI/C,QAAQ,CAAC8C,eAAe,CAAC,6CAA6C,CAAC;EACrF;EACA,IAAI,CAAC/C,qBAAqB,CAACmD,iBAAiB,CAACC,QAAQ,CAACF,MAAM,CAACF,eAAe,CAAC,EAAE;IAC3E,MAAM,IAAI/C,QAAQ,CAAC8C,eAAe,CAAC,0CAA0C,CAAC;EAClF;EACAzD,qBAAqB,CAAC4D,MAAM,EAAE,SAAS,EAAErD,QAAQ,CAAC;EAClDR,qBAAqB,CAAC6D,MAAM,EAAE,KAAK,EAAErD,QAAQ,CAAC;EAC9CR,qBAAqB,CAAC6D,MAAM,EAAE,UAAU,EAAEtD,QAAQ,CAAC;EACnDP,qBAAqB,CAAC6D,MAAM,EAAE,cAAc,EAAErD,QAAQ,CAAC;EACvDR,qBAAqB,CAAC6D,MAAM,EAAE,oBAAoB,EAAEtD,QAAQ,CAAC;EAC7D,MAAMyD,KAAK,GAAGH,MAAM,CAACI,KAAK;EAC1B,IAAID,KAAK,KAAKJ,SAAS,IAAI,CAACI,KAAK,CAACE,KAAK,CAACnD,MAAM,CAAC,EAAE;IAC7C,MAAM,IAAIH,QAAQ,CAAC8C,eAAe,CAAC,gCAAgC,CAAC;EACxE;EACA,MAAMS,OAAO,GAAGN,MAAM,CAACO,OAAO;EAC9B,IAAID,OAAO,KAAKP,SAAS,KACpBO,OAAO,CAAC9C,MAAM,KAAK,CAAC,IAAI,CAAC8C,OAAO,CAACD,KAAK,CAACpC,QAAQ,CAAC,CAAC,EAAE;IACpD,MAAM,IAAIlB,QAAQ,CAAC8C,eAAe,CAAC,kCAAkC,CAAC;EAC1E;EACA1D,qBAAqB,CAAC6D,MAAM,EAAE,WAAW,EAAEtD,QAAQ,CAAC;EACpDP,qBAAqB,CAAC6D,MAAM,EAAE,eAAe,EAAErD,QAAQ,CAAC;EACxDR,qBAAqB,CAAC6D,MAAM,EAAE,gBAAgB,EAAEtD,QAAQ,CAAC;EACzDP,qBAAqB,CAAC6D,MAAM,EAAE,cAAc,EAAErD,QAAQ,CAAC;EACvDR,qBAAqB,CAAC6D,MAAM,EAAE,WAAW,EAAEtD,QAAQ,CAAC;AACxD;AACAX,OAAO,CAACG,uBAAuB,GAAGA,uBAAuB;AACzD,SAASD,gBAAgBA,CAACoD,MAAM,EAAE;EAC9B,IAAI,CAAC/C,QAAQ,CAAC+C,MAAM,CAAC,EAAE;IACnB,OAAOmB,GAAG;EACd;EACA,IAAI,OAAOnB,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOoB,UAAU,CAACpB,MAAM,CAAC;EAC7B;EACA,OAAOoB,UAAU,CAACpB,MAAM,CAACrD,KAAK,CAAC;AACnC;AACAD,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}