{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt64 = void 0;\nconst uint_1 = require(\"./uint\");\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst utils_2 = require(\"../utils\");\nconst HEX_REGEX = /^[a-fA-F0-9]{1,16}$/;\nconst mask = BigInt(0x00000000ffffffff);\n/**\n * Derived UInt class for serializing/deserializing 64 bit UInt\n */\nclass UInt64 extends uint_1.UInt {\n  constructor(bytes) {\n    super(bytes !== null && bytes !== void 0 ? bytes : UInt64.defaultUInt64.bytes);\n  }\n  static fromParser(parser) {\n    return new UInt64(parser.read(UInt64.width));\n  }\n  /**\n   * Construct a UInt64 object\n   *\n   * @param val A UInt64, hex-string, bigInt, or number\n   * @returns A UInt64 object\n   */\n  static from(val) {\n    if (val instanceof UInt64) {\n      return val;\n    }\n    let buf = new Uint8Array(UInt64.width);\n    if (typeof val === 'number') {\n      if (val < 0) {\n        throw new Error('value must be an unsigned integer');\n      }\n      const number = BigInt(val);\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)];\n      (0, utils_2.writeUInt32BE)(intBuf[0], Number(number >> BigInt(32)), 0);\n      (0, utils_2.writeUInt32BE)(intBuf[1], Number(number & BigInt(mask)), 0);\n      return new UInt64((0, utils_1.concat)(intBuf));\n    }\n    if (typeof val === 'string') {\n      if (!HEX_REGEX.test(val)) {\n        throw new Error(`${val} is not a valid hex-string`);\n      }\n      const strBuf = val.padStart(16, '0');\n      buf = (0, utils_1.hexToBytes)(strBuf);\n      return new UInt64(buf);\n    }\n    if (typeof val === 'bigint') {\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)];\n      (0, utils_2.writeUInt32BE)(intBuf[0], Number(Number(val >> BigInt(32))), 0);\n      (0, utils_2.writeUInt32BE)(intBuf[1], Number(val & BigInt(mask)), 0);\n      return new UInt64((0, utils_1.concat)(intBuf));\n    }\n    throw new Error('Cannot construct UInt64 from given value');\n  }\n  /**\n   * The JSON representation of a UInt64 object\n   *\n   * @returns a hex-string\n   */\n  toJSON() {\n    return (0, utils_1.bytesToHex)(this.bytes);\n  }\n  /**\n   * Get the value of the UInt64\n   *\n   * @returns the number represented buy this.bytes\n   */\n  valueOf() {\n    const msb = BigInt((0, utils_2.readUInt32BE)(this.bytes.slice(0, 4), 0));\n    const lsb = BigInt((0, utils_2.readUInt32BE)(this.bytes.slice(4), 0));\n    return msb << BigInt(32) | lsb;\n  }\n  /**\n   * Get the bytes representation of the UInt64 object\n   *\n   * @returns 8 bytes representing the UInt64\n   */\n  toBytes() {\n    return this.bytes;\n  }\n}\nexports.UInt64 = UInt64;\nUInt64.width = 64 / 8; // 8\nUInt64.defaultUInt64 = new UInt64(new Uint8Array(UInt64.width));","map":{"version":3,"names":["uint_1","require","utils_1","utils_2","HEX_REGEX","mask","BigInt","UInt64","UInt","constructor","bytes","defaultUInt64","fromParser","parser","read","width","from","val","buf","Uint8Array","Error","number","intBuf","writeUInt32BE","Number","concat","test","strBuf","padStart","hexToBytes","toJSON","bytesToHex","valueOf","msb","readUInt32BE","slice","lsb","toBytes","exports"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-binary-codec/src/types/uint-64.ts"],"sourcesContent":["import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { bytesToHex, concat, hexToBytes } from '@xrplf/isomorphic/utils'\nimport { readUInt32BE, writeUInt32BE } from '../utils'\n\nconst HEX_REGEX = /^[a-fA-F0-9]{1,16}$/\nconst mask = BigInt(0x00000000ffffffff)\n\n/**\n * Derived UInt class for serializing/deserializing 64 bit UInt\n */\nclass UInt64 extends UInt {\n  protected static readonly width: number = 64 / 8 // 8\n  static readonly defaultUInt64: UInt64 = new UInt64(\n    new Uint8Array(UInt64.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt64.defaultUInt64.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt64(parser.read(UInt64.width))\n  }\n\n  /**\n   * Construct a UInt64 object\n   *\n   * @param val A UInt64, hex-string, bigInt, or number\n   * @returns A UInt64 object\n   */\n  static from<T extends UInt64 | string | bigint | number>(val: T): UInt64 {\n    if (val instanceof UInt64) {\n      return val\n    }\n\n    let buf = new Uint8Array(UInt64.width)\n\n    if (typeof val === 'number') {\n      if (val < 0) {\n        throw new Error('value must be an unsigned integer')\n      }\n\n      const number = BigInt(val)\n\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(number >> BigInt(32)), 0)\n      writeUInt32BE(intBuf[1], Number(number & BigInt(mask)), 0)\n\n      return new UInt64(concat(intBuf))\n    }\n\n    if (typeof val === 'string') {\n      if (!HEX_REGEX.test(val)) {\n        throw new Error(`${val} is not a valid hex-string`)\n      }\n\n      const strBuf = val.padStart(16, '0')\n      buf = hexToBytes(strBuf)\n      return new UInt64(buf)\n    }\n\n    if (typeof val === 'bigint') {\n      const intBuf = [new Uint8Array(4), new Uint8Array(4)]\n      writeUInt32BE(intBuf[0], Number(Number(val >> BigInt(32))), 0)\n      writeUInt32BE(intBuf[1], Number(val & BigInt(mask)), 0)\n\n      return new UInt64(concat(intBuf))\n    }\n\n    throw new Error('Cannot construct UInt64 from given value')\n  }\n\n  /**\n   * The JSON representation of a UInt64 object\n   *\n   * @returns a hex-string\n   */\n  toJSON(): string {\n    return bytesToHex(this.bytes)\n  }\n\n  /**\n   * Get the value of the UInt64\n   *\n   * @returns the number represented buy this.bytes\n   */\n  valueOf(): bigint {\n    const msb = BigInt(readUInt32BE(this.bytes.slice(0, 4), 0))\n    const lsb = BigInt(readUInt32BE(this.bytes.slice(4), 0))\n    return (msb << BigInt(32)) | lsb\n  }\n\n  /**\n   * Get the bytes representation of the UInt64 object\n   *\n   * @returns 8 bytes representing the UInt64\n   */\n  toBytes(): Uint8Array {\n    return this.bytes\n  }\n}\n\nexport { UInt64 }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}