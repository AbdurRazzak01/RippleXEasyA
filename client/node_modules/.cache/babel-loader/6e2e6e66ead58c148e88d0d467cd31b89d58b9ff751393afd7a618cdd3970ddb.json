{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst collections_1 = require(\"./collections\");\nconst xrpConversion_1 = require(\"./xrpConversion\");\nfunction normalizeNode(affectedNode) {\n  const diffType = Object.keys(affectedNode)[0];\n  const node = affectedNode[diffType];\n  return Object.assign(Object.assign({}, node), {\n    NodeType: diffType,\n    LedgerEntryType: node.LedgerEntryType,\n    LedgerIndex: node.LedgerIndex,\n    NewFields: node.NewFields,\n    FinalFields: node.FinalFields,\n    PreviousFields: node.PreviousFields\n  });\n}\nfunction normalizeNodes(metadata) {\n  if (metadata.AffectedNodes.length === 0) {\n    return [];\n  }\n  return metadata.AffectedNodes.map(normalizeNode);\n}\nfunction groupByAccount(balanceChanges) {\n  const grouped = (0, collections_1.groupBy)(balanceChanges, node => node.account);\n  return Object.entries(grouped).map(([account, items]) => {\n    return {\n      account,\n      balances: items.map(item => item.balance)\n    };\n  });\n}\nfunction getValue(balance) {\n  if (typeof balance === 'string') {\n    return new bignumber_js_1.default(balance);\n  }\n  return new bignumber_js_1.default(balance.value);\n}\nfunction computeBalanceChange(node) {\n  var _a, _b, _c;\n  let value = null;\n  if ((_a = node.NewFields) === null || _a === void 0 ? void 0 : _a.Balance) {\n    value = getValue(node.NewFields.Balance);\n  } else if (((_b = node.PreviousFields) === null || _b === void 0 ? void 0 : _b.Balance) && ((_c = node.FinalFields) === null || _c === void 0 ? void 0 : _c.Balance)) {\n    value = getValue(node.FinalFields.Balance).minus(getValue(node.PreviousFields.Balance));\n  }\n  if (value === null || value.isZero()) {\n    return null;\n  }\n  return value;\n}\nfunction getXRPQuantity(node) {\n  var _a, _b, _c;\n  const value = computeBalanceChange(node);\n  if (value === null) {\n    return null;\n  }\n  return {\n    account: (_b = (_a = node.FinalFields) === null || _a === void 0 ? void 0 : _a.Account) !== null && _b !== void 0 ? _b : (_c = node.NewFields) === null || _c === void 0 ? void 0 : _c.Account,\n    balance: {\n      currency: 'XRP',\n      value: (0, xrpConversion_1.dropsToXrp)(value).toString()\n    }\n  };\n}\nfunction flipTrustlinePerspective(balanceChange) {\n  const negatedBalance = new bignumber_js_1.default(balanceChange.balance.value).negated();\n  return {\n    account: balanceChange.balance.issuer,\n    balance: {\n      issuer: balanceChange.account,\n      currency: balanceChange.balance.currency,\n      value: negatedBalance.toString()\n    }\n  };\n}\nfunction getTrustlineQuantity(node) {\n  var _a, _b;\n  const value = computeBalanceChange(node);\n  if (value === null) {\n    return null;\n  }\n  const fields = node.NewFields == null ? node.FinalFields : node.NewFields;\n  const result = {\n    account: (_a = fields === null || fields === void 0 ? void 0 : fields.LowLimit) === null || _a === void 0 ? void 0 : _a.issuer,\n    balance: {\n      issuer: (_b = fields === null || fields === void 0 ? void 0 : fields.HighLimit) === null || _b === void 0 ? void 0 : _b.issuer,\n      currency: (fields === null || fields === void 0 ? void 0 : fields.Balance).currency,\n      value: value.toString()\n    }\n  };\n  return [result, flipTrustlinePerspective(result)];\n}\nfunction getBalanceChanges(metadata) {\n  const quantities = normalizeNodes(metadata).map(node => {\n    if (node.LedgerEntryType === 'AccountRoot') {\n      const xrpQuantity = getXRPQuantity(node);\n      if (xrpQuantity == null) {\n        return [];\n      }\n      return [xrpQuantity];\n    }\n    if (node.LedgerEntryType === 'RippleState') {\n      const trustlineQuantity = getTrustlineQuantity(node);\n      if (trustlineQuantity == null) {\n        return [];\n      }\n      return trustlineQuantity;\n    }\n    return [];\n  });\n  return groupByAccount(quantities.flat());\n}\nexports.default = getBalanceChanges;","map":{"version":3,"names":["bignumber_js_1","__importDefault","require","collections_1","xrpConversion_1","normalizeNode","affectedNode","diffType","Object","keys","node","assign","NodeType","LedgerEntryType","LedgerIndex","NewFields","FinalFields","PreviousFields","normalizeNodes","metadata","AffectedNodes","length","map","groupByAccount","balanceChanges","grouped","groupBy","account","entries","items","balances","item","balance","getValue","default","value","computeBalanceChange","_a","Balance","_b","_c","minus","isZero","getXRPQuantity","Account","currency","dropsToXrp","toString","flipTrustlinePerspective","balanceChange","negatedBalance","negated","issuer","getTrustlineQuantity","fields","result","LowLimit","HighLimit","getBalanceChanges","quantities","xrpQuantity","trustlineQuantity","flat","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/getBalanceChanges.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\n\nimport {\n  Amount,\n  Balance,\n  IssuedCurrencyAmount,\n  TransactionMetadata,\n  Node,\n} from '../models'\n\nimport { groupBy } from './collections'\nimport { dropsToXrp } from './xrpConversion'\n\ninterface BalanceChange {\n  account: string\n  balance: Balance\n}\ninterface Fields {\n  Account?: string\n  Balance?: Amount\n  LowLimit?: IssuedCurrencyAmount\n  HighLimit?: IssuedCurrencyAmount\n  // eslint-disable-next-line @typescript-eslint/member-ordering -- okay here, just some of the fields are typed to make it easier\n  [field: string]: unknown\n}\n\ninterface NormalizedNode {\n  // 'CreatedNode' | 'ModifiedNode' | 'DeletedNode'\n  NodeType: string\n  LedgerEntryType: string\n  LedgerIndex: string\n  NewFields?: Fields\n  FinalFields?: Fields\n  PreviousFields?: Fields\n  PreviousTxnID?: string\n  PreviousTxnLgrSeq?: number\n}\n\nfunction normalizeNode(affectedNode: Node): NormalizedNode {\n  const diffType = Object.keys(affectedNode)[0]\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- not quite right, but close enough\n  const node = affectedNode[diffType] as NormalizedNode\n  return {\n    ...node,\n    NodeType: diffType,\n    LedgerEntryType: node.LedgerEntryType,\n    LedgerIndex: node.LedgerIndex,\n    NewFields: node.NewFields,\n    FinalFields: node.FinalFields,\n    PreviousFields: node.PreviousFields,\n  }\n}\n\nfunction normalizeNodes(metadata: TransactionMetadata): NormalizedNode[] {\n  if (metadata.AffectedNodes.length === 0) {\n    return []\n  }\n  return metadata.AffectedNodes.map(normalizeNode)\n}\n\nfunction groupByAccount(balanceChanges: BalanceChange[]): Array<{\n  account: string\n  balances: Balance[]\n}> {\n  const grouped = groupBy(balanceChanges, (node) => node.account)\n  return Object.entries(grouped).map(([account, items]) => {\n    return { account, balances: items.map((item) => item.balance) }\n  })\n}\n\nfunction getValue(balance: Amount): BigNumber {\n  if (typeof balance === 'string') {\n    return new BigNumber(balance)\n  }\n  return new BigNumber(balance.value)\n}\n\nfunction computeBalanceChange(node: NormalizedNode): BigNumber | null {\n  let value: BigNumber | null = null\n  if (node.NewFields?.Balance) {\n    value = getValue(node.NewFields.Balance)\n  } else if (node.PreviousFields?.Balance && node.FinalFields?.Balance) {\n    value = getValue(node.FinalFields.Balance).minus(\n      getValue(node.PreviousFields.Balance),\n    )\n  }\n  if (value === null || value.isZero()) {\n    return null\n  }\n  return value\n}\n\nfunction getXRPQuantity(\n  node: NormalizedNode,\n): { account: string; balance: Balance } | null {\n  const value = computeBalanceChange(node)\n\n  if (value === null) {\n    return null\n  }\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- okay here\n    account: (node.FinalFields?.Account ?? node.NewFields?.Account) as string,\n    balance: {\n      currency: 'XRP',\n      value: dropsToXrp(value).toString(),\n    },\n  }\n}\n\nfunction flipTrustlinePerspective(balanceChange: BalanceChange): BalanceChange {\n  const negatedBalance = new BigNumber(balanceChange.balance.value).negated()\n  return {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know this is true\n    account: balanceChange.balance.issuer as string,\n    balance: {\n      issuer: balanceChange.account,\n      currency: balanceChange.balance.currency,\n      value: negatedBalance.toString(),\n    },\n  }\n}\n\nfunction getTrustlineQuantity(node: NormalizedNode): BalanceChange[] | null {\n  const value = computeBalanceChange(node)\n\n  if (value === null) {\n    return null\n  }\n\n  /*\n   * A trustline can be created with a non-zero starting balance.\n   * If an offer is placed to acquire an asset with no existing trustline,\n   * the trustline can be created when the offer is taken.\n   */\n  const fields = node.NewFields == null ? node.FinalFields : node.NewFields\n\n  // the balance is always from low node's perspective\n  const result = {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that this is true\n    account: fields?.LowLimit?.issuer as string,\n    balance: {\n      issuer: fields?.HighLimit?.issuer,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- we know that this is true\n      currency: (fields?.Balance as IssuedCurrencyAmount).currency,\n      value: value.toString(),\n    },\n  }\n  return [result, flipTrustlinePerspective(result)]\n}\n\n/**\n * Computes the complete list of every balance that changed in the ledger\n * as a result of the given transaction.\n *\n * @param metadata - Transaction metadata.\n * @returns Parsed balance changes.\n * @category Utilities\n */\nexport default function getBalanceChanges(\n  metadata: TransactionMetadata,\n): Array<{\n  account: string\n  balances: Balance[]\n}> {\n  const quantities = normalizeNodes(metadata).map((node) => {\n    if (node.LedgerEntryType === 'AccountRoot') {\n      const xrpQuantity = getXRPQuantity(node)\n      if (xrpQuantity == null) {\n        return []\n      }\n      return [xrpQuantity]\n    }\n    if (node.LedgerEntryType === 'RippleState') {\n      const trustlineQuantity = getTrustlineQuantity(node)\n      if (trustlineQuantity == null) {\n        return []\n      }\n      return trustlineQuantity\n    }\n    return []\n  })\n  return groupByAccount(quantities.flat())\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}