{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMDeposit = exports.AMMDepositFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar AMMDepositFlags;\n(function (AMMDepositFlags) {\n  AMMDepositFlags[AMMDepositFlags[\"tfLPToken\"] = 65536] = \"tfLPToken\";\n  AMMDepositFlags[AMMDepositFlags[\"tfSingleAsset\"] = 524288] = \"tfSingleAsset\";\n  AMMDepositFlags[AMMDepositFlags[\"tfTwoAsset\"] = 1048576] = \"tfTwoAsset\";\n  AMMDepositFlags[AMMDepositFlags[\"tfOneAssetLPToken\"] = 2097152] = \"tfOneAssetLPToken\";\n  AMMDepositFlags[AMMDepositFlags[\"tfLimitLPToken\"] = 4194304] = \"tfLimitLPToken\";\n})(AMMDepositFlags || (exports.AMMDepositFlags = AMMDepositFlags = {}));\nfunction validateAMMDeposit(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Asset == null) {\n    throw new errors_1.ValidationError('AMMDeposit: missing field Asset');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset)) {\n    throw new errors_1.ValidationError('AMMDeposit: Asset must be a Currency');\n  }\n  if (tx.Asset2 == null) {\n    throw new errors_1.ValidationError('AMMDeposit: missing field Asset2');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset2)) {\n    throw new errors_1.ValidationError('AMMDeposit: Asset2 must be a Currency');\n  }\n  if (tx.Amount2 != null && tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMDeposit: must set Amount with Amount2');\n  } else if (tx.EPrice != null && tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMDeposit: must set Amount with EPrice');\n  } else if (tx.LPTokenOut == null && tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMDeposit: must set at least LPTokenOut or Amount');\n  }\n  if (tx.LPTokenOut != null && !(0, common_1.isIssuedCurrency)(tx.LPTokenOut)) {\n    throw new errors_1.ValidationError('AMMDeposit: LPTokenOut must be an IssuedCurrencyAmount');\n  }\n  if (tx.Amount != null && !(0, common_1.isAmount)(tx.Amount)) {\n    throw new errors_1.ValidationError('AMMDeposit: Amount must be an Amount');\n  }\n  if (tx.Amount2 != null && !(0, common_1.isAmount)(tx.Amount2)) {\n    throw new errors_1.ValidationError('AMMDeposit: Amount2 must be an Amount');\n  }\n  if (tx.EPrice != null && !(0, common_1.isAmount)(tx.EPrice)) {\n    throw new errors_1.ValidationError('AMMDeposit: EPrice must be an Amount');\n  }\n}\nexports.validateAMMDeposit = validateAMMDeposit;","map":{"version":3,"names":["Object","defineProperty","exports","value","validateAMMDeposit","AMMDepositFlags","errors_1","require","common_1","tx","validateBaseTransaction","Asset","ValidationError","isCurrency","Asset2","Amount2","Amount","EPrice","LPTokenOut","isIssuedCurrency","isAmount"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/AMMDeposit.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateAMMDeposit = exports.AMMDepositFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar AMMDepositFlags;\n(function (AMMDepositFlags) {\n    AMMDepositFlags[AMMDepositFlags[\"tfLPToken\"] = 65536] = \"tfLPToken\";\n    AMMDepositFlags[AMMDepositFlags[\"tfSingleAsset\"] = 524288] = \"tfSingleAsset\";\n    AMMDepositFlags[AMMDepositFlags[\"tfTwoAsset\"] = 1048576] = \"tfTwoAsset\";\n    AMMDepositFlags[AMMDepositFlags[\"tfOneAssetLPToken\"] = 2097152] = \"tfOneAssetLPToken\";\n    AMMDepositFlags[AMMDepositFlags[\"tfLimitLPToken\"] = 4194304] = \"tfLimitLPToken\";\n})(AMMDepositFlags || (exports.AMMDepositFlags = AMMDepositFlags = {}));\nfunction validateAMMDeposit(tx) {\n    (0, common_1.validateBaseTransaction)(tx);\n    if (tx.Asset == null) {\n        throw new errors_1.ValidationError('AMMDeposit: missing field Asset');\n    }\n    if (!(0, common_1.isCurrency)(tx.Asset)) {\n        throw new errors_1.ValidationError('AMMDeposit: Asset must be a Currency');\n    }\n    if (tx.Asset2 == null) {\n        throw new errors_1.ValidationError('AMMDeposit: missing field Asset2');\n    }\n    if (!(0, common_1.isCurrency)(tx.Asset2)) {\n        throw new errors_1.ValidationError('AMMDeposit: Asset2 must be a Currency');\n    }\n    if (tx.Amount2 != null && tx.Amount == null) {\n        throw new errors_1.ValidationError('AMMDeposit: must set Amount with Amount2');\n    }\n    else if (tx.EPrice != null && tx.Amount == null) {\n        throw new errors_1.ValidationError('AMMDeposit: must set Amount with EPrice');\n    }\n    else if (tx.LPTokenOut == null && tx.Amount == null) {\n        throw new errors_1.ValidationError('AMMDeposit: must set at least LPTokenOut or Amount');\n    }\n    if (tx.LPTokenOut != null && !(0, common_1.isIssuedCurrency)(tx.LPTokenOut)) {\n        throw new errors_1.ValidationError('AMMDeposit: LPTokenOut must be an IssuedCurrencyAmount');\n    }\n    if (tx.Amount != null && !(0, common_1.isAmount)(tx.Amount)) {\n        throw new errors_1.ValidationError('AMMDeposit: Amount must be an Amount');\n    }\n    if (tx.Amount2 != null && !(0, common_1.isAmount)(tx.Amount2)) {\n        throw new errors_1.ValidationError('AMMDeposit: Amount2 must be an Amount');\n    }\n    if (tx.EPrice != null && !(0, common_1.isAmount)(tx.EPrice)) {\n        throw new errors_1.ValidationError('AMMDeposit: EPrice must be an Amount');\n    }\n}\nexports.validateAMMDeposit = validateAMMDeposit;\n//# sourceMappingURL=AMMDeposit.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}