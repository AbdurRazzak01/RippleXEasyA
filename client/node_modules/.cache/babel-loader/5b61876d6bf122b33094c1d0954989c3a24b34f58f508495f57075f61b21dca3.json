{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar HashPrefix;\n(function (HashPrefix) {\n  HashPrefix[HashPrefix[\"TRANSACTION_ID\"] = 1415073280] = \"TRANSACTION_ID\";\n  HashPrefix[HashPrefix[\"TRANSACTION_NODE\"] = 1397638144] = \"TRANSACTION_NODE\";\n  HashPrefix[HashPrefix[\"INNER_NODE\"] = 1296649728] = \"INNER_NODE\";\n  HashPrefix[HashPrefix[\"LEAF_NODE\"] = 1296846336] = \"LEAF_NODE\";\n  HashPrefix[HashPrefix[\"TRANSACTION_SIGN\"] = 1398036480] = \"TRANSACTION_SIGN\";\n  HashPrefix[HashPrefix[\"TRANSACTION_SIGN_TESTNET\"] = 1937012736] = \"TRANSACTION_SIGN_TESTNET\";\n  HashPrefix[HashPrefix[\"TRANSACTION_MULTISIGN\"] = 1397576704] = \"TRANSACTION_MULTISIGN\";\n  HashPrefix[HashPrefix[\"LEDGER\"] = 1280791040] = \"LEDGER\";\n})(HashPrefix || (HashPrefix = {}));\nexports.default = HashPrefix;","map":{"version":3,"names":["HashPrefix","exports","default"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/hashes/HashPrefix.ts"],"sourcesContent":["/**\n * Prefix for hashing functions.\n *\n * These prefixes are inserted before the source material used to\n * generate various hashes. This is done to put each hash in its own\n * \"space.\" This way, two different types of objects with the\n * same binary data will produce different hashes.\n *\n * Each prefix is a 4-byte value with the last byte set to zero\n * and the first three bytes formed from the ASCII equivalent of\n * some arbitrary string. For example \"TXN\".\n */\n\nenum HashPrefix {\n  // transaction plus signature to give transaction ID 'TXN'\n  TRANSACTION_ID = 0x54584e00,\n\n  // transaction plus metadata 'TND'\n  TRANSACTION_NODE = 0x534e4400,\n\n  // inner node in tree 'MIN'\n  INNER_NODE = 0x4d494e00,\n\n  // leaf node in tree 'MLN'\n  LEAF_NODE = 0x4d4c4e00,\n\n  // inner transaction to sign 'STX'\n  TRANSACTION_SIGN = 0x53545800,\n\n  // inner transaction to sign (TESTNET) 'stx'\n  TRANSACTION_SIGN_TESTNET = 0x73747800,\n\n  // inner transaction to multisign 'SMT'\n  TRANSACTION_MULTISIGN = 0x534d5400,\n\n  // ledger 'LWR'\n  LEDGER = 0x4c575200,\n}\n\nexport default HashPrefix\n"],"mappings":";;;;;AAaA,IAAKA,UAwBJ;AAxBD,WAAKA,UAAU;EAEbA,UAAA,CAAAA,UAAA,mDAA2B;EAG3BA,UAAA,CAAAA,UAAA,uDAA6B;EAG7BA,UAAA,CAAAA,UAAA,2CAAuB;EAGvBA,UAAA,CAAAA,UAAA,yCAAsB;EAGtBA,UAAA,CAAAA,UAAA,uDAA6B;EAG7BA,UAAA,CAAAA,UAAA,uEAAqC;EAGrCA,UAAA,CAAAA,UAAA,iEAAkC;EAGlCA,UAAA,CAAAA,UAAA,mCAAmB;AACrB,CAAC,EAxBIA,UAAU,KAAVA,UAAU;AA0BfC,OAAA,CAAAC,OAAA,GAAeF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}