{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HDKey = exports.HARDENED_OFFSET = void 0;\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst _assert_1 = require(\"@noble/hashes/_assert\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst secp256k1_1 = require(\"@noble/curves/secp256k1\");\nconst modular_1 = require(\"@noble/curves/abstract/modular\");\nconst base_1 = require(\"@scure/base\");\nconst Point = secp256k1_1.secp256k1.ProjectivePoint;\nconst base58check = (0, base_1.createBase58check)(sha256_1.sha256);\nfunction bytesToNumber(bytes) {\n  return BigInt(`0x${(0, utils_1.bytesToHex)(bytes)}`);\n}\nfunction numberToBytes(num) {\n  return (0, utils_1.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0, utils_1.utf8ToBytes)('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS = {\n  private: 0x0488ade4,\n  public: 0x0488b21e\n};\nexports.HARDENED_OFFSET = 0x80000000;\nconst hash160 = data => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(data));\nconst fromU32 = data => (0, utils_1.createView)(data).getUint32(0, false);\nconst toU32 = n => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  (0, utils_1.createView)(buf).setUint32(0, n, false);\n  return buf;\n};\nclass HDKey {\n  get fingerprint() {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier() {\n    return this.pubHash;\n  }\n  get pubKeyHash() {\n    return this.pubHash;\n  }\n  get privateKey() {\n    return this.privKeyBytes || null;\n  }\n  get publicKey() {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey() {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(this.serialize(this.versions.private, (0, utils_1.concatBytes)(new Uint8Array([0]), priv)));\n  }\n  get publicExtendedKey() {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n  static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n    (0, _assert_1.bytes)(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32)\n    });\n  }\n  static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer = base58check.decode(base58key);\n    const keyView = (0, utils_1.createView)(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45)\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({\n        ...opt,\n        privateKey: key.slice(1)\n      });\n    } else {\n      return new HDKey({\n        ...opt,\n        publicKey: key\n      });\n    }\n  }\n  static fromJSON(json) {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  constructor(opt) {\n    this.depth = 0;\n    this.index = 0;\n    this.chainCode = null;\n    this.parentFingerprint = 0;\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey = typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp256k1_1.secp256k1.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n  derive(path) {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string') {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= exports.HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += exports.HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n  deriveChild(index) {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= exports.HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = (0, utils_1.concatBytes)(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = (0, utils_1.concatBytes)(this.pubKey, data);\n    }\n    const I = (0, hmac_1.hmac)(sha512_1.sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = (0, modular_1.mod)(this.privKey + childTweak, secp256k1_1.secp256k1.CURVE.n);\n        if (!secp256k1_1.secp256k1.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n  sign(hash) {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    (0, _assert_1.bytes)(hash, 32);\n    return secp256k1_1.secp256k1.sign(hash, this.privKey).toCompactRawBytes();\n  }\n  verify(hash, signature) {\n    (0, _assert_1.bytes)(hash, 32);\n    (0, _assert_1.bytes)(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp256k1_1.secp256k1.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp256k1_1.secp256k1.verify(sig, hash, this.publicKey);\n  }\n  wipePrivateData() {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  toJSON() {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey\n    };\n  }\n  serialize(version, key) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    (0, _assert_1.bytes)(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return (0, utils_1.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n  }\n}\nexports.HDKey = HDKey;","map":{"version":3,"names":["hmac_1","require","ripemd160_1","sha256_1","sha512_1","_assert_1","utils_1","secp256k1_1","modular_1","base_1","Point","secp256k1","ProjectivePoint","base58check","createBase58check","sha256","bytesToNumber","bytes","BigInt","bytesToHex","numberToBytes","num","hexToBytes","toString","padStart","MASTER_SECRET","utf8ToBytes","BITCOIN_VERSIONS","private","public","exports","HARDENED_OFFSET","hash160","data","ripemd160","fromU32","createView","getUint32","toU32","n","Number","isSafeInteger","Error","buf","Uint8Array","setUint32","HDKey","fingerprint","pubHash","identifier","pubKeyHash","privateKey","privKeyBytes","publicKey","pubKey","privateExtendedKey","priv","encode","serialize","versions","concatBytes","publicExtendedKey","fromMasterSeed","seed","length","I","hmac","sha512","chainCode","slice","fromExtendedKey","base58key","keyBuffer","decode","keyView","version","opt","depth","parentFingerprint","index","key","isPriv","fromJSON","json","xpriv","constructor","utils","isValidPrivateKey","privKey","getPublicKey","fromHex","toRawBytes","derive","path","test","parts","replace","split","child","c","m","exec","m1","idx","deriveChild","childTweak","added","mod","CURVE","add","fromPrivateKey","equals","ZERO","err","sign","hash","toCompactRawBytes","verify","signature","sig","Signature","fromCompact","error","wipePrivateData","undefined","fill","toJSON","xpub"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/@scure/bip32/index.ts"],"sourcesContent":["/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\nimport { mod } from '@noble/curves/abstract/modular';\nimport { createBase58check } from '@scure/base';\n\nconst Point = secp.ProjectivePoint;\nconst base58check = createBase58check(sha256);\n\nfunction bytesToNumber(bytes: Uint8Array): bigint {\n  return BigInt(`0x${bytesToHex(bytes)}`);\n}\n\nfunction numberToBytes(num: bigint): Uint8Array {\n  return hexToBytes(num.toString(16).padStart(64, '0'));\n}\n\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\nexport const HARDENED_OFFSET: number = 0x80000000;\n\nexport interface Versions {\n  private: number;\n  public: number;\n}\n\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\nconst toU32 = (n: number) => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\n\ninterface HDKeyOpt {\n  versions?: Versions;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: number;\n  chainCode?: Uint8Array;\n  publicKey?: Uint8Array;\n  privateKey?: Uint8Array | bigint;\n}\n\nexport class HDKey {\n  get fingerprint(): number {\n    if (!this.pubHash) {\n      throw new Error('No publicKey set!');\n    }\n    return fromU32(this.pubHash);\n  }\n  get identifier(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get pubKeyHash(): Uint8Array | undefined {\n    return this.pubHash;\n  }\n  get privateKey(): Uint8Array | null {\n    return this.privKeyBytes || null;\n  }\n  get publicKey(): Uint8Array | null {\n    return this.pubKey || null;\n  }\n  get privateExtendedKey(): string {\n    const priv = this.privateKey;\n    if (!priv) {\n      throw new Error('No private key');\n    }\n    return base58check.encode(\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\n    );\n  }\n  get publicExtendedKey(): string {\n    if (!this.pubKey) {\n      throw new Error('No public key');\n    }\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n  }\n\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    assertBytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(\n        `HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`\n      );\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      versions,\n      chainCode: I.slice(32),\n      privateKey: I.slice(0, 32),\n    });\n  }\n\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\n    const keyView = createView(keyBuffer);\n    const version = keyView.getUint32(0, false);\n    const opt = {\n      versions,\n      depth: keyBuffer[4],\n      parentFingerprint: keyView.getUint32(5, false),\n      index: keyView.getUint32(9, false),\n      chainCode: keyBuffer.slice(13, 45),\n    };\n    const key = keyBuffer.slice(45);\n    const isPriv = key[0] === 0;\n    if (version !== versions[isPriv ? 'private' : 'public']) {\n      throw new Error('Version mismatch');\n    }\n    if (isPriv) {\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\n    } else {\n      return new HDKey({ ...opt, publicKey: key });\n    }\n  }\n\n  public static fromJSON(json: { xpriv: string }): HDKey {\n    return HDKey.fromExtendedKey(json.xpriv);\n  }\n  public readonly versions: Versions;\n  public readonly depth: number = 0;\n  public readonly index: number = 0;\n  public readonly chainCode: Uint8Array | null = null;\n  public readonly parentFingerprint: number = 0;\n  private privKey?: bigint;\n  private privKeyBytes?: Uint8Array;\n  private pubKey?: Uint8Array;\n  private pubHash: Uint8Array | undefined;\n\n  constructor(opt: HDKeyOpt) {\n    if (!opt || typeof opt !== 'object') {\n      throw new Error('HDKey.constructor must not be called directly');\n    }\n    this.versions = opt.versions || BITCOIN_VERSIONS;\n    this.depth = opt.depth || 0;\n    this.chainCode = opt.chainCode || null;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) {\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n      }\n    }\n    if (opt.publicKey && opt.privateKey) {\n      throw new Error('HDKey: publicKey and privateKey at same time.');\n    }\n    if (opt.privateKey) {\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\n        throw new Error('Invalid private key');\n      }\n      this.privKey =\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n      this.privKeyBytes = numberToBytes(this.privKey);\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\n    } else if (opt.publicKey) {\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n    } else {\n      throw new Error('HDKey: no public or private key provided');\n    }\n    this.pubHash = hash160(this.pubKey);\n  }\n\n  public derive(path: string): HDKey {\n    if (!/^[mM]'?/.test(path)) {\n      throw new Error('Path must start with \"m\" or \"M\"');\n    }\n    if (/^[mM]'?$/.test(path)) {\n      return this;\n    }\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child: HDKey = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      const m1 = m && m[1];\n      if (!m || m.length !== 3 || typeof m1 !== 'string') {\n        throw new Error(`Invalid child index: ${c}`);\n      }\n      let idx = +m1;\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n        throw new Error('Invalid index');\n      }\n      // hardened key\n      if (m[2] === \"'\") {\n        idx += HARDENED_OFFSET;\n      }\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n\n  public deriveChild(index: number): HDKey {\n    if (!this.pubKey || !this.chainCode) {\n      throw new Error('No publicKey or chainCode set');\n    }\n    let data = toU32(index);\n    if (index >= HARDENED_OFFSET) {\n      // Hardened\n      const priv = this.privateKey;\n      if (!priv) {\n        throw new Error('Could not derive hardened child key');\n      }\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n      data = concatBytes(new Uint8Array([0]), priv, data);\n    } else {\n      // Normal child: serP(point(kpar)) || ser32(index)\n      data = concatBytes(this.pubKey, data);\n    }\n    const I = hmac(sha512, this.chainCode, data);\n    const childTweak = bytesToNumber(I.slice(0, 32));\n    const chainCode = I.slice(32);\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\n      throw new Error('Tweak bigger than curve order');\n    }\n    const opt: HDKeyOpt = {\n      versions: this.versions,\n      chainCode,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n    };\n    try {\n      // Private parent key -> private child key\n      if (this.privateKey) {\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\n        if (!secp.utils.isValidPrivateKey(added)) {\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\n        }\n        opt.privateKey = added;\n      } else {\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\n        if (added.equals(Point.ZERO)) {\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\n        }\n        opt.publicKey = added.toRawBytes(true);\n      }\n      return new HDKey(opt);\n    } catch (err) {\n      return this.deriveChild(index + 1);\n    }\n  }\n\n  public sign(hash: Uint8Array): Uint8Array {\n    if (!this.privateKey) {\n      throw new Error('No privateKey set!');\n    }\n    assertBytes(hash, 32);\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\n  }\n\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\n    assertBytes(hash, 32);\n    assertBytes(signature, 64);\n    if (!this.publicKey) {\n      throw new Error('No publicKey set!');\n    }\n    let sig;\n    try {\n      sig = secp.Signature.fromCompact(signature);\n    } catch (error) {\n      return false;\n    }\n    return secp.verify(sig, hash, this.publicKey);\n  }\n\n  public wipePrivateData(): this {\n    this.privKey = undefined;\n    if (this.privKeyBytes) {\n      this.privKeyBytes.fill(0);\n      this.privKeyBytes = undefined;\n    }\n    return this;\n  }\n  public toJSON(): { xpriv: string; xpub: string } {\n    return {\n      xpriv: this.privateExtendedKey,\n      xpub: this.publicExtendedKey,\n    };\n  }\n\n  private serialize(version: number, key: Uint8Array) {\n    if (!this.chainCode) {\n      throw new Error('No chainCode set');\n    }\n    assertBytes(key, 33);\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n    return concatBytes(\n      toU32(version),\n      new Uint8Array([this.depth]),\n      toU32(this.parentFingerprint),\n      toU32(this.index),\n      this.chainCode,\n      key\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}