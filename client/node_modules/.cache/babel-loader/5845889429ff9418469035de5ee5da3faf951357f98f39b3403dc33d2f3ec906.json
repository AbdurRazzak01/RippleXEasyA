{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleStreamPartialPayment = exports.handlePartialPayment = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst transactions_1 = require(\"../models/transactions\");\nconst utils_1 = require(\"../models/utils\");\nconst WARN_PARTIAL_PAYMENT_CODE = 2001;\nfunction amountsEqual(amt1, amt2) {\n  if (typeof amt1 === 'string' && typeof amt2 === 'string') {\n    return amt1 === amt2;\n  }\n  if (typeof amt1 === 'string' || typeof amt2 === 'string') {\n    return false;\n  }\n  const aValue = new bignumber_js_1.default(amt1.value);\n  const bValue = new bignumber_js_1.default(amt2.value);\n  return amt1.currency === amt2.currency && amt1.issuer === amt2.issuer && aValue.isEqualTo(bValue);\n}\nfunction isPartialPayment(tx, metadata) {\n  var _a;\n  if (tx == null || metadata == null || tx.TransactionType !== 'Payment') {\n    return false;\n  }\n  let meta = metadata;\n  if (typeof meta === 'string') {\n    if (meta === 'unavailable') {\n      return false;\n    }\n    meta = (0, ripple_binary_codec_1.decode)(meta);\n  }\n  const tfPartial = typeof tx.Flags === 'number' ? (0, utils_1.isFlagEnabled)(tx.Flags, transactions_1.PaymentFlags.tfPartialPayment) : (_a = tx.Flags) === null || _a === void 0 ? void 0 : _a.tfPartialPayment;\n  if (!tfPartial) {\n    return false;\n  }\n  const delivered = meta.delivered_amount;\n  const amount = tx.Amount;\n  if (delivered === undefined) {\n    return false;\n  }\n  return !amountsEqual(delivered, amount);\n}\nfunction txHasPartialPayment(response) {\n  return isPartialPayment(response.result, response.result.meta);\n}\nfunction txEntryHasPartialPayment(response) {\n  return isPartialPayment(response.result.tx_json, response.result.metadata);\n}\nfunction accountTxHasPartialPayment(response) {\n  const {\n    transactions\n  } = response.result;\n  const foo = transactions.some(tx => isPartialPayment(tx.tx, tx.meta));\n  return foo;\n}\nfunction hasPartialPayment(command, response) {\n  switch (command) {\n    case 'tx':\n      return txHasPartialPayment(response);\n    case 'transaction_entry':\n      return txEntryHasPartialPayment(response);\n    case 'account_tx':\n      return accountTxHasPartialPayment(response);\n    default:\n      return false;\n  }\n}\nfunction handlePartialPayment(command, response) {\n  var _a;\n  if (hasPartialPayment(command, response)) {\n    const warnings = (_a = response.warnings) !== null && _a !== void 0 ? _a : [];\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment'\n    };\n    warnings.push(warning);\n    response.warnings = warnings;\n  }\n}\nexports.handlePartialPayment = handlePartialPayment;\nfunction handleStreamPartialPayment(stream, log) {\n  var _a;\n  if (isPartialPayment(stream.transaction, stream.meta)) {\n    const warnings = (_a = stream.warnings) !== null && _a !== void 0 ? _a : [];\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment'\n    };\n    warnings.push(warning);\n    stream.warnings = warnings;\n    log('Partial payment received', JSON.stringify(stream));\n  }\n}\nexports.handleStreamPartialPayment = handleStreamPartialPayment;","map":{"version":3,"names":["bignumber_js_1","__importDefault","require","ripple_binary_codec_1","transactions_1","utils_1","WARN_PARTIAL_PAYMENT_CODE","amountsEqual","amt1","amt2","aValue","default","value","bValue","currency","issuer","isEqualTo","isPartialPayment","tx","metadata","TransactionType","meta","decode","tfPartial","Flags","isFlagEnabled","PaymentFlags","tfPartialPayment","_a","delivered","delivered_amount","amount","Amount","undefined","txHasPartialPayment","response","result","txEntryHasPartialPayment","tx_json","accountTxHasPartialPayment","transactions","foo","some","hasPartialPayment","command","handlePartialPayment","warnings","warning","id","message","push","exports","handleStreamPartialPayment","stream","log","transaction","JSON","stringify"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/client/partialPayment.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\nimport { decode } from 'ripple-binary-codec'\n\nimport type {\n  AccountTxResponse,\n  TransactionEntryResponse,\n  TransactionStream,\n  TxResponse,\n} from '..'\nimport type { Amount } from '../models/common'\nimport type { RequestResponseMap } from '../models/methods'\nimport { BaseRequest, BaseResponse } from '../models/methods/baseMethod'\nimport { PaymentFlags, Transaction } from '../models/transactions'\nimport type { TransactionMetadata } from '../models/transactions/metadata'\nimport { isFlagEnabled } from '../models/utils'\n\nconst WARN_PARTIAL_PAYMENT_CODE = 2001\n\nfunction amountsEqual(amt1: Amount, amt2: Amount): boolean {\n  if (typeof amt1 === 'string' && typeof amt2 === 'string') {\n    return amt1 === amt2\n  }\n\n  if (typeof amt1 === 'string' || typeof amt2 === 'string') {\n    return false\n  }\n\n  const aValue = new BigNumber(amt1.value)\n  const bValue = new BigNumber(amt2.value)\n\n  return (\n    amt1.currency === amt2.currency &&\n    amt1.issuer === amt2.issuer &&\n    aValue.isEqualTo(bValue)\n  )\n}\n\nfunction isPartialPayment(\n  tx?: Transaction,\n  metadata?: TransactionMetadata | string,\n): boolean {\n  if (tx == null || metadata == null || tx.TransactionType !== 'Payment') {\n    return false\n  }\n\n  let meta = metadata\n  if (typeof meta === 'string') {\n    if (meta === 'unavailable') {\n      return false\n    }\n\n    /* eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- binary-codec typing */\n    meta = decode(meta) as unknown as TransactionMetadata\n  }\n\n  const tfPartial =\n    typeof tx.Flags === 'number'\n      ? isFlagEnabled(tx.Flags, PaymentFlags.tfPartialPayment)\n      : tx.Flags?.tfPartialPayment\n\n  if (!tfPartial) {\n    return false\n  }\n\n  const delivered = meta.delivered_amount\n  const amount = tx.Amount\n\n  if (delivered === undefined) {\n    return false\n  }\n\n  return !amountsEqual(delivered, amount)\n}\n\nfunction txHasPartialPayment(response: TxResponse): boolean {\n  return isPartialPayment(response.result, response.result.meta)\n}\n\nfunction txEntryHasPartialPayment(response: TransactionEntryResponse): boolean {\n  return isPartialPayment(response.result.tx_json, response.result.metadata)\n}\n\nfunction accountTxHasPartialPayment(response: AccountTxResponse): boolean {\n  const { transactions } = response.result\n  const foo = transactions.some((tx) => isPartialPayment(tx.tx, tx.meta))\n  return foo\n}\n\nfunction hasPartialPayment<R extends BaseRequest, T = RequestResponseMap<R>>(\n  command: string,\n  response: T,\n): boolean {\n  /* eslint-disable @typescript-eslint/consistent-type-assertions -- Request type is known at runtime from command */\n  switch (command) {\n    case 'tx':\n      return txHasPartialPayment(response as TxResponse)\n    case 'transaction_entry':\n      return txEntryHasPartialPayment(response as TransactionEntryResponse)\n    case 'account_tx':\n      return accountTxHasPartialPayment(response as AccountTxResponse)\n    default:\n      return false\n  }\n  /* eslint-enable @typescript-eslint/consistent-type-assertions */\n}\n\n/**\n * Checks a response for a partial payment.\n *\n * @param command - Command from the request, tells us what response to expect.\n * @param response - Response to check for a partial payment.\n */\nexport function handlePartialPayment<\n  R extends BaseRequest,\n  T = RequestResponseMap<R>,\n>(command: string, response: T): void {\n  if (hasPartialPayment(command, response)) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- We are checking dynamically and safely.\n    const warnings = (response as BaseResponse).warnings ?? []\n\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment',\n    }\n\n    warnings.push(warning)\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- We are checking dynamically and safely.\n    // @ts-expect-error -- We are checking dynamically and safely.\n    response.warnings = warnings\n  }\n}\n\n/**\n * Check a transaction from a subscription stream for partial payment.\n *\n * @param stream - Stream Transaction to check for partial payment.\n * @param log - The method used for logging by the connection (to report the partial payment).\n */\nexport function handleStreamPartialPayment(\n  stream: TransactionStream,\n  log: (id: string, message: string) => void,\n): void {\n  if (isPartialPayment(stream.transaction, stream.meta)) {\n    const warnings = stream.warnings ?? []\n\n    const warning = {\n      id: WARN_PARTIAL_PAYMENT_CODE,\n      message: 'This response contains a Partial Payment',\n    }\n\n    warnings.push(warning)\n\n    /* eslint-disable-next-line no-param-reassign -- Handles the case where there are no warnings */\n    stream.warnings = warnings\n\n    log('Partial payment received', JSON.stringify(stream))\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}