{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkAccountDeleteBlockers = exports.setLatestValidatedLedgerSequence = exports.calculateFeePerTransactionType = exports.setNextValidSequenceNumber = exports.setValidAddresses = exports.txNeedsNetworkID = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nconst getFeeXrp_1 = __importDefault(require(\"./getFeeXrp\"));\nconst LEDGER_OFFSET = 20;\nconst RESTRICTED_NETWORKS = 1024;\nconst REQUIRED_NETWORKID_VERSION = '1.11.0';\nconst HOOKS_TESTNET_ID = 21338;\nfunction isNotLaterRippledVersion(source, target) {\n  if (source === target) {\n    return true;\n  }\n  const sourceDecomp = source.split('.');\n  const targetDecomp = target.split('.');\n  const sourceMajor = parseInt(sourceDecomp[0], 10);\n  const sourceMinor = parseInt(sourceDecomp[1], 10);\n  const targetMajor = parseInt(targetDecomp[0], 10);\n  const targetMinor = parseInt(targetDecomp[1], 10);\n  if (sourceMajor !== targetMajor) {\n    return sourceMajor < targetMajor;\n  }\n  if (sourceMinor !== targetMinor) {\n    return sourceMinor < targetMinor;\n  }\n  const sourcePatch = sourceDecomp[2].split('-');\n  const targetPatch = targetDecomp[2].split('-');\n  const sourcePatchVersion = parseInt(sourcePatch[0], 10);\n  const targetPatchVersion = parseInt(targetPatch[0], 10);\n  if (sourcePatchVersion !== targetPatchVersion) {\n    return sourcePatchVersion < targetPatchVersion;\n  }\n  if (sourcePatch.length !== targetPatch.length) {\n    return sourcePatch.length > targetPatch.length;\n  }\n  if (sourcePatch.length === 2) {\n    if (!sourcePatch[1][0].startsWith(targetPatch[1][0])) {\n      return sourcePatch[1] < targetPatch[1];\n    }\n    if (sourcePatch[1].startsWith('b')) {\n      return parseInt(sourcePatch[1].slice(1), 10) < parseInt(targetPatch[1].slice(1), 10);\n    }\n    return parseInt(sourcePatch[1].slice(2), 10) < parseInt(targetPatch[1].slice(2), 10);\n  }\n  return false;\n}\nfunction txNeedsNetworkID(client) {\n  if (client.networkID !== undefined && client.networkID > RESTRICTED_NETWORKS) {\n    if (client.buildVersion && isNotLaterRippledVersion(REQUIRED_NETWORKID_VERSION, client.buildVersion) || client.networkID === HOOKS_TESTNET_ID) {\n      return true;\n    }\n  }\n  return false;\n}\nexports.txNeedsNetworkID = txNeedsNetworkID;\nfunction setValidAddresses(tx) {\n  validateAccountAddress(tx, 'Account', 'SourceTag');\n  if (tx['Destination'] != null) {\n    validateAccountAddress(tx, 'Destination', 'DestinationTag');\n  }\n  convertToClassicAddress(tx, 'Authorize');\n  convertToClassicAddress(tx, 'Unauthorize');\n  convertToClassicAddress(tx, 'Owner');\n  convertToClassicAddress(tx, 'RegularKey');\n}\nexports.setValidAddresses = setValidAddresses;\nfunction validateAccountAddress(tx, accountField, tagField) {\n  const {\n    classicAccount,\n    tag\n  } = getClassicAccountAndTag(tx[accountField]);\n  tx[accountField] = classicAccount;\n  if (tag != null && tag !== false) {\n    if (tx[tagField] && tx[tagField] !== tag) {\n      throw new errors_1.ValidationError(`The ${tagField}, if present, must match the tag of the ${accountField} X-address`);\n    }\n    tx[tagField] = tag;\n  }\n}\nfunction getClassicAccountAndTag(Account, expectedTag) {\n  if ((0, ripple_address_codec_1.isValidXAddress)(Account)) {\n    const classic = (0, ripple_address_codec_1.xAddressToClassicAddress)(Account);\n    if (expectedTag != null && classic.tag !== expectedTag) {\n      throw new errors_1.ValidationError('address includes a tag that does not match the tag specified in the transaction');\n    }\n    return {\n      classicAccount: classic.classicAddress,\n      tag: classic.tag\n    };\n  }\n  return {\n    classicAccount: Account,\n    tag: expectedTag\n  };\n}\nfunction convertToClassicAddress(tx, fieldName) {\n  const account = tx[fieldName];\n  if (typeof account === 'string') {\n    const {\n      classicAccount\n    } = getClassicAccountAndTag(account);\n    tx[fieldName] = classicAccount;\n  }\n}\nfunction setNextValidSequenceNumber(client, tx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const request = {\n      command: 'account_info',\n      account: tx.Account,\n      ledger_index: 'current'\n    };\n    const data = yield client.request(request);\n    tx.Sequence = data.result.account_data.Sequence;\n  });\n}\nexports.setNextValidSequenceNumber = setNextValidSequenceNumber;\nfunction fetchAccountDeleteFee(client) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield client.request({\n      command: 'server_state'\n    });\n    const fee = (_a = response.result.state.validated_ledger) === null || _a === void 0 ? void 0 : _a.reserve_inc;\n    if (fee == null) {\n      return Promise.reject(new Error('Could not fetch Owner Reserve.'));\n    }\n    return new bignumber_js_1.default(fee);\n  });\n}\nfunction calculateFeePerTransactionType(client, tx, signersCount = 0) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const netFeeXRP = yield (0, getFeeXrp_1.default)(client);\n    const netFeeDrops = (0, utils_1.xrpToDrops)(netFeeXRP);\n    let baseFee = new bignumber_js_1.default(netFeeDrops);\n    if (tx.TransactionType === 'EscrowFinish' && tx.Fulfillment != null) {\n      const fulfillmentBytesSize = Math.ceil(tx.Fulfillment.length / 2);\n      const product = new bignumber_js_1.default(scaleValue(netFeeDrops, 33 + fulfillmentBytesSize / 16));\n      baseFee = product.dp(0, bignumber_js_1.default.ROUND_CEIL);\n    }\n    if (tx.TransactionType === 'AccountDelete' || tx.TransactionType === 'AMMCreate') {\n      baseFee = yield fetchAccountDeleteFee(client);\n    }\n    if (signersCount > 0) {\n      baseFee = bignumber_js_1.default.sum(baseFee, scaleValue(netFeeDrops, 1 + signersCount));\n    }\n    const maxFeeDrops = (0, utils_1.xrpToDrops)(client.maxFeeXRP);\n    const totalFee = tx.TransactionType === 'AccountDelete' ? baseFee : bignumber_js_1.default.min(baseFee, maxFeeDrops);\n    tx.Fee = totalFee.dp(0, bignumber_js_1.default.ROUND_CEIL).toString(10);\n  });\n}\nexports.calculateFeePerTransactionType = calculateFeePerTransactionType;\nfunction scaleValue(value, multiplier) {\n  return new bignumber_js_1.default(value).times(multiplier).toString();\n}\nfunction setLatestValidatedLedgerSequence(client, tx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const ledgerSequence = yield client.getLedgerIndex();\n    tx.LastLedgerSequence = ledgerSequence + LEDGER_OFFSET;\n  });\n}\nexports.setLatestValidatedLedgerSequence = setLatestValidatedLedgerSequence;\nfunction checkAccountDeleteBlockers(client, tx) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const request = {\n      command: 'account_objects',\n      account: tx.Account,\n      ledger_index: 'validated',\n      deletion_blockers_only: true\n    };\n    const response = yield client.request(request);\n    return new Promise((resolve, reject) => {\n      if (response.result.account_objects.length > 0) {\n        reject(new errors_1.XrplError(`Account ${tx.Account} cannot be deleted; there are Escrows, PayChannels, RippleStates, or Checks associated with the account.`, response.result.account_objects));\n      }\n      resolve();\n    });\n  });\n}\nexports.checkAccountDeleteBlockers = checkAccountDeleteBlockers;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","checkAccountDeleteBlockers","setLatestValidatedLedgerSequence","calculateFeePerTransactionType","setNextValidSequenceNumber","setValidAddresses","txNeedsNetworkID","bignumber_js_1","require","ripple_address_codec_1","errors_1","utils_1","getFeeXrp_1","LEDGER_OFFSET","RESTRICTED_NETWORKS","REQUIRED_NETWORKID_VERSION","HOOKS_TESTNET_ID","isNotLaterRippledVersion","source","target","sourceDecomp","split","targetDecomp","sourceMajor","parseInt","sourceMinor","targetMajor","targetMinor","sourcePatch","targetPatch","sourcePatchVersion","targetPatchVersion","length","startsWith","slice","client","networkID","undefined","buildVersion","tx","validateAccountAddress","convertToClassicAddress","accountField","tagField","classicAccount","tag","getClassicAccountAndTag","ValidationError","Account","expectedTag","isValidXAddress","classic","xAddressToClassicAddress","classicAddress","fieldName","account","request","command","ledger_index","data","Sequence","account_data","fetchAccountDeleteFee","_a","response","fee","state","validated_ledger","reserve_inc","Error","default","signersCount","netFeeXRP","netFeeDrops","xrpToDrops","baseFee","TransactionType","Fulfillment","fulfillmentBytesSize","Math","ceil","product","scaleValue","dp","ROUND_CEIL","sum","maxFeeDrops","maxFeeXRP","totalFee","min","Fee","toString","multiplier","times","ledgerSequence","getLedgerIndex","LastLedgerSequence","deletion_blockers_only","account_objects","XrplError"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/sugar/autofill.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkAccountDeleteBlockers = exports.setLatestValidatedLedgerSequence = exports.calculateFeePerTransactionType = exports.setNextValidSequenceNumber = exports.setValidAddresses = exports.txNeedsNetworkID = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nconst getFeeXrp_1 = __importDefault(require(\"./getFeeXrp\"));\nconst LEDGER_OFFSET = 20;\nconst RESTRICTED_NETWORKS = 1024;\nconst REQUIRED_NETWORKID_VERSION = '1.11.0';\nconst HOOKS_TESTNET_ID = 21338;\nfunction isNotLaterRippledVersion(source, target) {\n    if (source === target) {\n        return true;\n    }\n    const sourceDecomp = source.split('.');\n    const targetDecomp = target.split('.');\n    const sourceMajor = parseInt(sourceDecomp[0], 10);\n    const sourceMinor = parseInt(sourceDecomp[1], 10);\n    const targetMajor = parseInt(targetDecomp[0], 10);\n    const targetMinor = parseInt(targetDecomp[1], 10);\n    if (sourceMajor !== targetMajor) {\n        return sourceMajor < targetMajor;\n    }\n    if (sourceMinor !== targetMinor) {\n        return sourceMinor < targetMinor;\n    }\n    const sourcePatch = sourceDecomp[2].split('-');\n    const targetPatch = targetDecomp[2].split('-');\n    const sourcePatchVersion = parseInt(sourcePatch[0], 10);\n    const targetPatchVersion = parseInt(targetPatch[0], 10);\n    if (sourcePatchVersion !== targetPatchVersion) {\n        return sourcePatchVersion < targetPatchVersion;\n    }\n    if (sourcePatch.length !== targetPatch.length) {\n        return sourcePatch.length > targetPatch.length;\n    }\n    if (sourcePatch.length === 2) {\n        if (!sourcePatch[1][0].startsWith(targetPatch[1][0])) {\n            return sourcePatch[1] < targetPatch[1];\n        }\n        if (sourcePatch[1].startsWith('b')) {\n            return (parseInt(sourcePatch[1].slice(1), 10) <\n                parseInt(targetPatch[1].slice(1), 10));\n        }\n        return (parseInt(sourcePatch[1].slice(2), 10) <\n            parseInt(targetPatch[1].slice(2), 10));\n    }\n    return false;\n}\nfunction txNeedsNetworkID(client) {\n    if (client.networkID !== undefined &&\n        client.networkID > RESTRICTED_NETWORKS) {\n        if ((client.buildVersion &&\n            isNotLaterRippledVersion(REQUIRED_NETWORKID_VERSION, client.buildVersion)) ||\n            client.networkID === HOOKS_TESTNET_ID) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.txNeedsNetworkID = txNeedsNetworkID;\nfunction setValidAddresses(tx) {\n    validateAccountAddress(tx, 'Account', 'SourceTag');\n    if (tx['Destination'] != null) {\n        validateAccountAddress(tx, 'Destination', 'DestinationTag');\n    }\n    convertToClassicAddress(tx, 'Authorize');\n    convertToClassicAddress(tx, 'Unauthorize');\n    convertToClassicAddress(tx, 'Owner');\n    convertToClassicAddress(tx, 'RegularKey');\n}\nexports.setValidAddresses = setValidAddresses;\nfunction validateAccountAddress(tx, accountField, tagField) {\n    const { classicAccount, tag } = getClassicAccountAndTag(tx[accountField]);\n    tx[accountField] = classicAccount;\n    if (tag != null && tag !== false) {\n        if (tx[tagField] && tx[tagField] !== tag) {\n            throw new errors_1.ValidationError(`The ${tagField}, if present, must match the tag of the ${accountField} X-address`);\n        }\n        tx[tagField] = tag;\n    }\n}\nfunction getClassicAccountAndTag(Account, expectedTag) {\n    if ((0, ripple_address_codec_1.isValidXAddress)(Account)) {\n        const classic = (0, ripple_address_codec_1.xAddressToClassicAddress)(Account);\n        if (expectedTag != null && classic.tag !== expectedTag) {\n            throw new errors_1.ValidationError('address includes a tag that does not match the tag specified in the transaction');\n        }\n        return {\n            classicAccount: classic.classicAddress,\n            tag: classic.tag,\n        };\n    }\n    return {\n        classicAccount: Account,\n        tag: expectedTag,\n    };\n}\nfunction convertToClassicAddress(tx, fieldName) {\n    const account = tx[fieldName];\n    if (typeof account === 'string') {\n        const { classicAccount } = getClassicAccountAndTag(account);\n        tx[fieldName] = classicAccount;\n    }\n}\nfunction setNextValidSequenceNumber(client, tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const request = {\n            command: 'account_info',\n            account: tx.Account,\n            ledger_index: 'current',\n        };\n        const data = yield client.request(request);\n        tx.Sequence = data.result.account_data.Sequence;\n    });\n}\nexports.setNextValidSequenceNumber = setNextValidSequenceNumber;\nfunction fetchAccountDeleteFee(client) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield client.request({ command: 'server_state' });\n        const fee = (_a = response.result.state.validated_ledger) === null || _a === void 0 ? void 0 : _a.reserve_inc;\n        if (fee == null) {\n            return Promise.reject(new Error('Could not fetch Owner Reserve.'));\n        }\n        return new bignumber_js_1.default(fee);\n    });\n}\nfunction calculateFeePerTransactionType(client, tx, signersCount = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const netFeeXRP = yield (0, getFeeXrp_1.default)(client);\n        const netFeeDrops = (0, utils_1.xrpToDrops)(netFeeXRP);\n        let baseFee = new bignumber_js_1.default(netFeeDrops);\n        if (tx.TransactionType === 'EscrowFinish' && tx.Fulfillment != null) {\n            const fulfillmentBytesSize = Math.ceil(tx.Fulfillment.length / 2);\n            const product = new bignumber_js_1.default(scaleValue(netFeeDrops, 33 + fulfillmentBytesSize / 16));\n            baseFee = product.dp(0, bignumber_js_1.default.ROUND_CEIL);\n        }\n        if (tx.TransactionType === 'AccountDelete' ||\n            tx.TransactionType === 'AMMCreate') {\n            baseFee = yield fetchAccountDeleteFee(client);\n        }\n        if (signersCount > 0) {\n            baseFee = bignumber_js_1.default.sum(baseFee, scaleValue(netFeeDrops, 1 + signersCount));\n        }\n        const maxFeeDrops = (0, utils_1.xrpToDrops)(client.maxFeeXRP);\n        const totalFee = tx.TransactionType === 'AccountDelete'\n            ? baseFee\n            : bignumber_js_1.default.min(baseFee, maxFeeDrops);\n        tx.Fee = totalFee.dp(0, bignumber_js_1.default.ROUND_CEIL).toString(10);\n    });\n}\nexports.calculateFeePerTransactionType = calculateFeePerTransactionType;\nfunction scaleValue(value, multiplier) {\n    return new bignumber_js_1.default(value).times(multiplier).toString();\n}\nfunction setLatestValidatedLedgerSequence(client, tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const ledgerSequence = yield client.getLedgerIndex();\n        tx.LastLedgerSequence = ledgerSequence + LEDGER_OFFSET;\n    });\n}\nexports.setLatestValidatedLedgerSequence = setLatestValidatedLedgerSequence;\nfunction checkAccountDeleteBlockers(client, tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const request = {\n            command: 'account_objects',\n            account: tx.Account,\n            ledger_index: 'validated',\n            deletion_blockers_only: true,\n        };\n        const response = yield client.request(request);\n        return new Promise((resolve, reject) => {\n            if (response.result.account_objects.length > 0) {\n                reject(new errors_1.XrplError(`Account ${tx.Account} cannot be deleted; there are Escrows, PayChannels, RippleStates, or Checks associated with the account.`, response.result.account_objects));\n            }\n            resolve();\n        });\n    });\n}\nexports.checkAccountDeleteBlockers = checkAccountDeleteBlockers;\n//# sourceMappingURL=autofill.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}