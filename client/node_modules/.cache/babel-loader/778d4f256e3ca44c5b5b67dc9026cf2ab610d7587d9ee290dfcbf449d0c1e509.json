{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaInfo = () => {\n  _s();\n  const [accountBalance, setAccountBalance] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          // Get the balance of the user's account\n          const balance = await window.ethereum.request({\n            method: 'eth_getBalance',\n            params: [accounts[0]] // Pass the account address\n          });\n          setAccountBalance(balance);\n        } else {\n          setError('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        setError('Error reading data: ' + error.message);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array to ensure the effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [accountBalance && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account balance: \", accountBalance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 26\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaInfo, \"5+PODLdwBwSiGGG+2Fpd2DRXDCQ=\");\n_c = MetaInfo;\nexport default MetaInfo;\nvar _c;\n$RefreshReg$(_c, \"MetaInfo\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MetaInfo","_s","accountBalance","setAccountBalance","error","setError","fetchData","window","ethereum","accounts","request","method","balance","params","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst MetaInfo = () => {\n  const [accountBalance, setAccountBalance] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    \n          // Get the balance of the user's account\n          const balance = await window.ethereum.request({\n            method: 'eth_getBalance',\n            params: [accounts[0]], // Pass the account address\n          });\n\n          setAccountBalance(balance);\n        } else {\n          setError('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        setError('Error reading data: ' + error.message);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array to ensure the effect runs only once\n\n  return (\n    <div>\n      {accountBalance && <p>Account balance: {accountBalance}</p>}\n      {error && <p>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default MetaInfo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;UACnB;UACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;YAAEC,MAAM,EAAE;UAAsB,CAAC,CAAC;;UAEjF;UACA,MAAMC,OAAO,GAAG,MAAML,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;YAC5CC,MAAM,EAAE,gBAAgB;YACxBE,MAAM,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;UACzB,CAAC,CAAC;UAEFN,iBAAiB,CAACS,OAAO,CAAC;QAC5B,CAAC,MAAM;UACLP,QAAQ,CAAC,kEAAkE,CAAC;QAC9E;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,sBAAsB,GAAGD,KAAK,CAACU,OAAO,CAAC;MAClD;IACF,CAAC;IAEDR,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEP,OAAA;IAAAgB,QAAA,GACGb,cAAc,iBAAIH,OAAA;MAAAgB,QAAA,GAAG,mBAAiB,EAACb,cAAc;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Df,KAAK,iBAAIL,OAAA;MAAAgB,QAAA,GAAG,SAAO,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAClB,EAAA,CApCID,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AAsCd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}