{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compare = exports.equal = exports.readUInt32BE = exports.readUInt16BE = exports.writeUInt32BE = exports.writeUInt16BE = exports.writeUInt8 = void 0;\n/**\n * Writes value to array at the specified offset. The value must be a valid unsigned 8-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nfunction writeUInt8(array, value, offset) {\n  value = Number(value);\n  array[offset] = value;\n}\nexports.writeUInt8 = writeUInt8;\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 16-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nfunction writeUInt16BE(array, value, offset) {\n  value = Number(value);\n  array[offset] = value >>> 8;\n  array[offset + 1] = value;\n}\nexports.writeUInt16BE = writeUInt16BE;\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 32-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nfunction writeUInt32BE(array, value, offset) {\n  array[offset] = value >>> 24 & 0xff;\n  array[offset + 1] = value >>> 16 & 0xff;\n  array[offset + 2] = value >>> 8 & 0xff;\n  array[offset + 3] = value & 0xff;\n}\nexports.writeUInt32BE = writeUInt32BE;\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2\n */\nfunction readUInt16BE(array, offset) {\n  return new DataView(array.buffer).getUint16(offset, false).toString(10);\n}\nexports.readUInt16BE = readUInt16BE;\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4\n */\nfunction readUInt32BE(array, offset) {\n  return new DataView(array.buffer).getUint32(offset, false).toString(10);\n}\nexports.readUInt32BE = readUInt32BE;\n/**\n * Compares two Uint8Array or ArrayBuffers\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction equal(a, b) {\n  const aUInt = a instanceof ArrayBuffer ? new Uint8Array(a, 0) : a;\n  const bUInt = b instanceof ArrayBuffer ? new Uint8Array(b, 0) : b;\n  if (aUInt.byteLength != bUInt.byteLength) return false;\n  if (aligned32(aUInt) && aligned32(bUInt)) return compare32(aUInt, bUInt) === 0;\n  if (aligned16(aUInt) && aligned16(bUInt)) return compare16(aUInt, bUInt) === 0;\n  return compare8(aUInt, bUInt) === 0;\n}\nexports.equal = equal;\n/**\n * Compares two 8 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare8(a, b) {\n  const ua = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n  const ub = new Uint8Array(b.buffer, b.byteOffset, b.byteLength);\n  return compare(ua, ub);\n}\n/**\n * Compares two 16 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare16(a, b) {\n  const ua = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n  const ub = new Uint16Array(b.buffer, b.byteOffset, b.byteLength / 2);\n  return compare(ua, ub);\n}\n/**\n * Compares two 32 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare32(a, b) {\n  const ua = new Uint32Array(a.buffer, a.byteOffset, a.byteLength / 4);\n  const ub = new Uint32Array(b.buffer, b.byteOffset, b.byteLength / 4);\n  return compare(ua, ub);\n}\n/**\n * Compare two TypedArrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare(a, b) {\n  if (a.byteLength !== b.byteLength) {\n    throw new Error('Cannot compare arrays of different length');\n  }\n  for (let i = 0; i < a.length - 1; i += 1) {\n    if (a[i] > b[i]) return 1;\n    if (a[i] < b[i]) return -1;\n  }\n  return 0;\n}\nexports.compare = compare;\n/**\n * Determine if TypedArray is 16 bit aligned\n * @param array The array to check\n */\nfunction aligned16(array) {\n  return array.byteOffset % 2 === 0 && array.byteLength % 2 === 0;\n}\n/**\n * Determine if TypedArray is 32 bit aligned\n * @param array The array to check\n */\nfunction aligned32(array) {\n  return array.byteOffset % 4 === 0 && array.byteLength % 4 === 0;\n}","map":{"version":3,"names":["writeUInt8","array","value","offset","Number","exports","writeUInt16BE","writeUInt32BE","readUInt16BE","DataView","buffer","getUint16","toString","readUInt32BE","getUint32","equal","a","b","aUInt","ArrayBuffer","Uint8Array","bUInt","byteLength","aligned32","compare32","aligned16","compare16","compare8","ua","byteOffset","ub","compare","Uint16Array","Uint32Array","Error","i","length"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-binary-codec/src/utils.ts"],"sourcesContent":["// Even though this comes from NodeJS it is valid in the browser\nimport TypedArray = NodeJS.TypedArray\n\n/**\n * Writes value to array at the specified offset. The value must be a valid unsigned 8-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt8(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  value = Number(value)\n  array[offset] = value\n}\n\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 16-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt16BE(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  value = Number(value)\n\n  array[offset] = value >>> 8\n  array[offset + 1] = value\n}\n\n/**\n * Writes value to array at the specified offset as big-endian. The value must be a valid unsigned 32-bit integer.\n * @param array Uint8Array to be written to\n * @param value Number to be written to array.\n * @param offset plus the number of bytes written.\n */\nexport function writeUInt32BE(\n  array: Uint8Array,\n  value: number,\n  offset: number,\n): void {\n  array[offset] = (value >>> 24) & 0xff\n  array[offset + 1] = (value >>> 16) & 0xff\n  array[offset + 2] = (value >>> 8) & 0xff\n  array[offset + 3] = value & 0xff\n}\n\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 2\n */\nexport function readUInt16BE(array: Uint8Array, offset: number): string {\n  return new DataView(array.buffer).getUint16(offset, false).toString(10)\n}\n\n/**\n * Reads an unsigned, big-endian 16-bit integer from the array at the specified offset.\n * @param array Uint8Array to read\n * @param offset Number of bytes to skip before starting to read. Must satisfy 0 <= offset <= buf.length - 4\n */\nexport function readUInt32BE(array: Uint8Array, offset: number): string {\n  return new DataView(array.buffer).getUint32(offset, false).toString(10)\n}\n\n/**\n * Compares two Uint8Array or ArrayBuffers\n * @param a first array to compare\n * @param b second array to compare\n */\nexport function equal(\n  a: Uint8Array | ArrayBuffer,\n  b: Uint8Array | ArrayBuffer,\n): boolean {\n  const aUInt = a instanceof ArrayBuffer ? new Uint8Array(a, 0) : a\n  const bUInt = b instanceof ArrayBuffer ? new Uint8Array(b, 0) : b\n  if (aUInt.byteLength != bUInt.byteLength) return false\n  if (aligned32(aUInt) && aligned32(bUInt)) return compare32(aUInt, bUInt) === 0\n  if (aligned16(aUInt) && aligned16(bUInt)) return compare16(aUInt, bUInt) === 0\n  return compare8(aUInt, bUInt) === 0\n}\n\n/**\n * Compares two 8 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare8(a, b) {\n  const ua = new Uint8Array(a.buffer, a.byteOffset, a.byteLength)\n  const ub = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n  return compare(ua, ub)\n}\n\n/**\n * Compares two 16 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare16(a: Uint8Array, b: Uint8Array) {\n  const ua = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2)\n  const ub = new Uint16Array(b.buffer, b.byteOffset, b.byteLength / 2)\n  return compare(ua, ub)\n}\n\n/**\n * Compares two 32 bit aligned arrays\n * @param a first array to compare\n * @param b second array to compare\n */\nfunction compare32(a: Uint8Array, b: Uint8Array) {\n  const ua = new Uint32Array(a.buffer, a.byteOffset, a.byteLength / 4)\n  const ub = new Uint32Array(b.buffer, b.byteOffset, b.byteLength / 4)\n  return compare(ua, ub)\n}\n\n/**\n * Compare two TypedArrays\n * @param a first array to compare\n * @param b second array to compare\n */\nexport function compare(a: TypedArray, b: TypedArray): 1 | -1 | 0 {\n  if (a.byteLength !== b.byteLength) {\n    throw new Error('Cannot compare arrays of different length')\n  }\n\n  for (let i = 0; i < a.length - 1; i += 1) {\n    if (a[i] > b[i]) return 1\n    if (a[i] < b[i]) return -1\n  }\n  return 0\n}\n\n/**\n * Determine if TypedArray is 16 bit aligned\n * @param array The array to check\n */\nfunction aligned16(array: TypedArray) {\n  return array.byteOffset % 2 === 0 && array.byteLength % 2 === 0\n}\n\n/**\n * Determine if TypedArray is 32 bit aligned\n * @param array The array to check\n */\nfunction aligned32(array: TypedArray) {\n  return array.byteOffset % 4 === 0 && array.byteLength % 4 === 0\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}