{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst ripple_keypairs_1 = require(\"ripple-keypairs\");\nconst xrpConversion_1 = require(\"./xrpConversion\");\nfunction signPaymentChannelClaim(channel, xrpAmount, privateKey) {\n  const signingData = (0, ripple_binary_codec_1.encodeForSigningClaim)({\n    channel,\n    amount: (0, xrpConversion_1.xrpToDrops)(xrpAmount)\n  });\n  return (0, ripple_keypairs_1.sign)(signingData, privateKey);\n}\nexports.default = signPaymentChannelClaim;","map":{"version":3,"names":["ripple_binary_codec_1","require","ripple_keypairs_1","xrpConversion_1","signPaymentChannelClaim","channel","xrpAmount","privateKey","signingData","encodeForSigningClaim","amount","xrpToDrops","sign","exports","default"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/signPaymentChannelClaim.ts"],"sourcesContent":["import { encodeForSigningClaim } from 'ripple-binary-codec'\nimport { sign } from 'ripple-keypairs'\n\nimport { xrpToDrops } from './xrpConversion'\n\n/**\n * Sign a payment channel claim.\n *\n * @param channel - Channel identifier specified by the paymentChannelClaim.\n * @param xrpAmount - XRP Amount specified by the paymentChannelClaim.\n * @param privateKey - Private Key to sign paymentChannelClaim with.\n * @returns True if the channel is valid.\n * @category Utilities\n */\nfunction signPaymentChannelClaim(\n  channel: string,\n  xrpAmount: string,\n  privateKey: string,\n): string {\n  const signingData = encodeForSigningClaim({\n    channel,\n    amount: xrpToDrops(xrpAmount),\n  })\n  return sign(signingData, privateKey)\n}\n\nexport default signPaymentChannelClaim\n"],"mappings":";;;;;AAAA,MAAAA,qBAAA,GAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AAEA,MAAAE,eAAA,GAAAF,OAAA;AAWA,SAASG,uBAAuBA,CAC9BC,OAAe,EACfC,SAAiB,EACjBC,UAAkB;EAElB,MAAMC,WAAW,GAAG,IAAAR,qBAAA,CAAAS,qBAAqB,EAAC;IACxCJ,OAAO;IACPK,MAAM,EAAE,IAAAP,eAAA,CAAAQ,UAAU,EAACL,SAAS;GAC7B,CAAC;EACF,OAAO,IAAAJ,iBAAA,CAAAU,IAAI,EAACJ,WAAW,EAAED,UAAU,CAAC;AACtC;AAEAM,OAAA,CAAAC,OAAA,GAAeV,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}