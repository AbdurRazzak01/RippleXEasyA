{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMVote = void 0;\nconst errors_1 = require(\"../../errors\");\nconst AMMCreate_1 = require(\"./AMMCreate\");\nconst common_1 = require(\"./common\");\nfunction validateAMMVote(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Asset == null) {\n    throw new errors_1.ValidationError('AMMVote: missing field Asset');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset)) {\n    throw new errors_1.ValidationError('AMMVote: Asset must be a Currency');\n  }\n  if (tx.Asset2 == null) {\n    throw new errors_1.ValidationError('AMMVote: missing field Asset2');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset2)) {\n    throw new errors_1.ValidationError('AMMVote: Asset2 must be a Currency');\n  }\n  if (tx.TradingFee == null) {\n    throw new errors_1.ValidationError('AMMVote: missing field TradingFee');\n  }\n  if (typeof tx.TradingFee !== 'number') {\n    throw new errors_1.ValidationError('AMMVote: TradingFee must be a number');\n  }\n  if (tx.TradingFee < 0 || tx.TradingFee > AMMCreate_1.AMM_MAX_TRADING_FEE) {\n    throw new errors_1.ValidationError(`AMMVote: TradingFee must be between 0 and ${AMMCreate_1.AMM_MAX_TRADING_FEE}`);\n  }\n}\nexports.validateAMMVote = validateAMMVote;","map":{"version":3,"names":["errors_1","require","AMMCreate_1","common_1","validateAMMVote","tx","validateBaseTransaction","Asset","ValidationError","isCurrency","Asset2","TradingFee","AMM_MAX_TRADING_FEE","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/AMMVote.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Currency } from '../common'\n\nimport { AMM_MAX_TRADING_FEE } from './AMMCreate'\nimport { BaseTransaction, isCurrency, validateBaseTransaction } from './common'\n\n/**\n * Vote on the trading fee for an Automated Market Maker (AMM) instance.\n *\n * Up to 8 accounts can vote in proportion to the amount of the AMM's LP Tokens they hold.\n * Each new vote re-calculates the AMM's trading fee based on a weighted average of the votes.\n */\nexport interface AMMVote extends BaseTransaction {\n  TransactionType: 'AMMVote'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * The proposed fee to vote for, in units of 1/100,000; a value of 1 is equivalent to 0.001%.\n   * The maximum value is 1000, indicating a 1% fee.\n   */\n  TradingFee: number\n}\n\n/**\n * Verify the form and type of an AMMVote at runtime.\n *\n * @param tx - An AMMVote Transaction.\n * @throws When the AMMVote is Malformed.\n */\nexport function validateAMMVote(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMVote: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMVote: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMVote: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMVote: Asset2 must be a Currency')\n  }\n\n  if (tx.TradingFee == null) {\n    throw new ValidationError('AMMVote: missing field TradingFee')\n  }\n\n  if (typeof tx.TradingFee !== 'number') {\n    throw new ValidationError('AMMVote: TradingFee must be a number')\n  }\n\n  if (tx.TradingFee < 0 || tx.TradingFee > AMM_MAX_TRADING_FEE) {\n    throw new ValidationError(\n      `AMMVote: TradingFee must be between 0 and ${AMM_MAX_TRADING_FEE}`,\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,WAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AAkCA,SAAgBG,eAAeA,CAACC,EAA2B;EACzD,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,KAAK,IAAI,IAAI,EAAE;IACpB,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;EAG3D,IAAI,CAAC,IAAAL,QAAA,CAAAM,UAAU,EAACJ,EAAE,CAACE,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,mCAAmC,CAAC;;EAGhE,IAAIH,EAAE,CAACK,MAAM,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIV,QAAA,CAAAQ,eAAe,CAAC,+BAA+B,CAAC;;EAG5D,IAAI,CAAC,IAAAL,QAAA,CAAAM,UAAU,EAACJ,EAAE,CAACK,MAAM,CAAC,EAAE;IAC1B,MAAM,IAAIV,QAAA,CAAAQ,eAAe,CAAC,oCAAoC,CAAC;;EAGjE,IAAIH,EAAE,CAACM,UAAU,IAAI,IAAI,EAAE;IACzB,MAAM,IAAIX,QAAA,CAAAQ,eAAe,CAAC,mCAAmC,CAAC;;EAGhE,IAAI,OAAOH,EAAE,CAACM,UAAU,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAIX,QAAA,CAAAQ,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAIH,EAAE,CAACM,UAAU,GAAG,CAAC,IAAIN,EAAE,CAACM,UAAU,GAAGT,WAAA,CAAAU,mBAAmB,EAAE;IAC5D,MAAM,IAAIZ,QAAA,CAAAQ,eAAe,CACvB,6CAA6CN,WAAA,CAAAU,mBAAmB,EAAE,CACnE;;AAEL;AAhCAC,OAAA,CAAAT,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}