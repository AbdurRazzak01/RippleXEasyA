{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RippleStateFlags = void 0;\nvar RippleStateFlags;\n(function (RippleStateFlags) {\n  RippleStateFlags[RippleStateFlags[\"lsfLowReserve\"] = 65536] = \"lsfLowReserve\";\n  RippleStateFlags[RippleStateFlags[\"lsfHighReserve\"] = 131072] = \"lsfHighReserve\";\n  RippleStateFlags[RippleStateFlags[\"lsfLowAuth\"] = 262144] = \"lsfLowAuth\";\n  RippleStateFlags[RippleStateFlags[\"lsfHighAuth\"] = 524288] = \"lsfHighAuth\";\n  RippleStateFlags[RippleStateFlags[\"lsfLowNoRipple\"] = 1048576] = \"lsfLowNoRipple\";\n  RippleStateFlags[RippleStateFlags[\"lsfHighNoRipple\"] = 2097152] = \"lsfHighNoRipple\";\n  RippleStateFlags[RippleStateFlags[\"lsfLowFreeze\"] = 4194304] = \"lsfLowFreeze\";\n  RippleStateFlags[RippleStateFlags[\"lsfHighFreeze\"] = 8388608] = \"lsfHighFreeze\";\n})(RippleStateFlags || (exports.RippleStateFlags = RippleStateFlags = {}));","map":{"version":3,"names":["RippleStateFlags","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/ledger/RippleState.ts"],"sourcesContent":["import { IssuedCurrencyAmount } from '../common'\n\nimport { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The RippleState object type connects two accounts in a single currency.\n *\n * @category Ledger Entries\n */\nexport default interface RippleState extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'RippleState'\n  /** A bit-map of boolean options enabled for this object. */\n  Flags: number\n  /**\n   * The balance of the trust line, from the perspective of the low account. A\n   * negative balance indicates that the low account has issued currency to the\n   * high account. The issuer is always the neutral value ACCOUNT_ONE.\n   */\n  Balance: IssuedCurrencyAmount\n  /**\n   * The limit that the low account has set on the trust line. The issuer is\n   * the address of the low account that set this limit.\n   */\n  LowLimit: IssuedCurrencyAmount\n  /**\n   * The limit that the high account has set on the trust line. The issuer is\n   * the address of the high account that set this limit.\n   */\n  HighLimit: IssuedCurrencyAmount\n  /**\n   * A hint indicating which page of the low account's owner directory links to\n   * this object, in case the directory consists of multiple pages.\n   */\n  LowNode?: string\n  /**\n   * A hint indicating which page of the high account's owner directory links\n   * to this object, in case the directory consists of multiple pages.\n   */\n  HighNode?: string\n  /**\n   * The inbound quality set by the low account, as an integer in the implied\n   * ratio LowQualityIn:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  LowQualityIn?: number\n  /**\n   * The outbound quality set by the low account, as an integer in the implied\n   * ratio LowQualityOut:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  LowQualityOut?: number\n  /**\n   * The inbound quality set by the high account, as an integer in the implied\n   * ratio HighQualityIn:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  HighQualityIn?: number\n  /**\n   * The outbound quality set by the high account, as an integer in the implied\n   * ratio HighQualityOut:1,000,000,000. As a special case, the value 0 is\n   * equivalent to 1 billion, or face value.\n   */\n  HighQualityOut?: number\n}\n\nexport enum RippleStateFlags {\n  // True, if entry counts toward reserve.\n  lsfLowReserve = 0x00010000,\n  lsfHighReserve = 0x00020000,\n  lsfLowAuth = 0x00040000,\n  lsfHighAuth = 0x00080000,\n  lsfLowNoRipple = 0x00100000,\n  lsfHighNoRipple = 0x00200000,\n  // True, low side has set freeze flag\n  lsfLowFreeze = 0x00400000,\n  // True, high side has set freeze flag\n  lsfHighFreeze = 0x00800000,\n}\n"],"mappings":";;;;;;AAiEA,IAAYA,gBAYX;AAZD,WAAYA,gBAAgB;EAE1BA,gBAAA,CAAAA,gBAAA,4CAA0B;EAC1BA,gBAAA,CAAAA,gBAAA,+CAA2B;EAC3BA,gBAAA,CAAAA,gBAAA,uCAAuB;EACvBA,gBAAA,CAAAA,gBAAA,yCAAwB;EACxBA,gBAAA,CAAAA,gBAAA,gDAA2B;EAC3BA,gBAAA,CAAAA,gBAAA,kDAA4B;EAE5BA,gBAAA,CAAAA,gBAAA,4CAAyB;EAEzBA,gBAAA,CAAAA,gBAAA,8CAA0B;AAC5B,CAAC,EAZWA,gBAAgB,KAAAC,OAAA,CAAAD,gBAAA,GAAhBA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}