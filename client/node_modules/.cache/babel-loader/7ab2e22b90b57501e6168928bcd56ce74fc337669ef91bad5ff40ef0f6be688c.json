{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultFaucetPath = exports.getFaucetHost = exports.FaucetNetworkPaths = exports.FaucetNetwork = void 0;\nconst errors_1 = require(\"../errors\");\nvar FaucetNetwork;\n(function (FaucetNetwork) {\n  FaucetNetwork[\"Testnet\"] = \"faucet.altnet.rippletest.net\";\n  FaucetNetwork[\"Devnet\"] = \"faucet.devnet.rippletest.net\";\n  FaucetNetwork[\"HooksV3Testnet\"] = \"hooks-testnet-v3.xrpl-labs.com\";\n})(FaucetNetwork || (exports.FaucetNetwork = FaucetNetwork = {}));\nexports.FaucetNetworkPaths = {\n  [FaucetNetwork.Testnet]: '/accounts',\n  [FaucetNetwork.Devnet]: '/accounts',\n  [FaucetNetwork.HooksV3Testnet]: '/accounts'\n};\nfunction getFaucetHost(client) {\n  const connectionUrl = client.url;\n  if (connectionUrl.includes('hooks-testnet-v3')) {\n    return FaucetNetwork.HooksV3Testnet;\n  }\n  if (connectionUrl.includes('altnet') || connectionUrl.includes('testnet')) {\n    return FaucetNetwork.Testnet;\n  }\n  if (connectionUrl.includes('sidechain-net2')) {\n    throw new errors_1.XRPLFaucetError('Cannot fund an account on an issuing chain. Accounts must be created via the bridge.');\n  }\n  if (connectionUrl.includes('devnet')) {\n    return FaucetNetwork.Devnet;\n  }\n  throw new errors_1.XRPLFaucetError('Faucet URL is not defined or inferrable.');\n}\nexports.getFaucetHost = getFaucetHost;\nfunction getDefaultFaucetPath(hostname) {\n  if (hostname === undefined) {\n    return '/accounts';\n  }\n  return exports.FaucetNetworkPaths[hostname] || '/accounts';\n}\nexports.getDefaultFaucetPath = getDefaultFaucetPath;","map":{"version":3,"names":["errors_1","require","FaucetNetwork","exports","FaucetNetworkPaths","Testnet","Devnet","HooksV3Testnet","getFaucetHost","client","connectionUrl","url","includes","XRPLFaucetError","getDefaultFaucetPath","hostname","undefined"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/Wallet/defaultFaucets.ts"],"sourcesContent":["import type { Client } from '../client'\nimport { XRPLFaucetError } from '../errors'\n\nexport interface FaucetWallet {\n  account: {\n    xAddress: string\n    classicAddress?: string\n    secret: string\n  }\n  amount: number\n  balance: number\n}\n\nexport enum FaucetNetwork {\n  Testnet = 'faucet.altnet.rippletest.net',\n  Devnet = 'faucet.devnet.rippletest.net',\n  HooksV3Testnet = 'hooks-testnet-v3.xrpl-labs.com',\n}\n\nexport const FaucetNetworkPaths: Record<string, string> = {\n  [FaucetNetwork.Testnet]: '/accounts',\n  [FaucetNetwork.Devnet]: '/accounts',\n  [FaucetNetwork.HooksV3Testnet]: '/accounts',\n}\n\n/**\n * Get the faucet host based on the Client connection.\n *\n * @param client - Client.\n * @returns A {@link FaucetNetwork}.\n * @throws When the client url is not on altnet or devnet.\n */\nexport function getFaucetHost(client: Client): FaucetNetwork | undefined {\n  const connectionUrl = client.url\n\n  if (connectionUrl.includes('hooks-testnet-v3')) {\n    return FaucetNetwork.HooksV3Testnet\n  }\n\n  // 'altnet' for Ripple Testnet server and 'testnet' for XRPL Labs Testnet server\n  if (connectionUrl.includes('altnet') || connectionUrl.includes('testnet')) {\n    return FaucetNetwork.Testnet\n  }\n\n  if (connectionUrl.includes('sidechain-net2')) {\n    throw new XRPLFaucetError(\n      'Cannot fund an account on an issuing chain. Accounts must be created via the bridge.',\n    )\n  }\n\n  if (connectionUrl.includes('devnet')) {\n    return FaucetNetwork.Devnet\n  }\n\n  throw new XRPLFaucetError('Faucet URL is not defined or inferrable.')\n}\n\n/**\n * Get the faucet pathname based on the faucet hostname.\n *\n * @param hostname - hostname.\n * @returns A String with the correct path for the input hostname.\n * If hostname undefined or cannot find (key, value) pair in {@link FaucetNetworkPaths}, defaults to '/accounts'\n */\nexport function getDefaultFaucetPath(hostname: string | undefined): string {\n  if (hostname === undefined) {\n    return '/accounts'\n  }\n  return FaucetNetworkPaths[hostname] || '/accounts'\n}\n"],"mappings":";;;;;;AACA,MAAAA,QAAA,GAAAC,OAAA;AAYA,IAAYC,aAIX;AAJD,WAAYA,aAAa;EACvBA,aAAA,4CAAwC;EACxCA,aAAA,2CAAuC;EACvCA,aAAA,qDAAiD;AACnD,CAAC,EAJWA,aAAa,KAAAC,OAAA,CAAAD,aAAA,GAAbA,aAAa;AAMZC,OAAA,CAAAC,kBAAkB,GAA2B;EACxD,CAACF,aAAa,CAACG,OAAO,GAAG,WAAW;EACpC,CAACH,aAAa,CAACI,MAAM,GAAG,WAAW;EACnC,CAACJ,aAAa,CAACK,cAAc,GAAG;CACjC;AASD,SAAgBC,aAAaA,CAACC,MAAc;EAC1C,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAG;EAEhC,IAAID,aAAa,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC9C,OAAOV,aAAa,CAACK,cAAc;;EAIrC,IAAIG,aAAa,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,aAAa,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;IACzE,OAAOV,aAAa,CAACG,OAAO;;EAG9B,IAAIK,aAAa,CAACE,QAAQ,CAAC,gBAAgB,CAAC,EAAE;IAC5C,MAAM,IAAIZ,QAAA,CAAAa,eAAe,CACvB,sFAAsF,CACvF;;EAGH,IAAIH,aAAa,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACpC,OAAOV,aAAa,CAACI,MAAM;;EAG7B,MAAM,IAAIN,QAAA,CAAAa,eAAe,CAAC,0CAA0C,CAAC;AACvE;AAvBAV,OAAA,CAAAK,aAAA,GAAAA,aAAA;AAgCA,SAAgBM,oBAAoBA,CAACC,QAA4B;EAC/D,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAO,WAAW;;EAEpB,OAAOb,OAAA,CAAAC,kBAAkB,CAACW,QAAQ,CAAC,IAAI,WAAW;AACpD;AALAZ,OAAA,CAAAW,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}