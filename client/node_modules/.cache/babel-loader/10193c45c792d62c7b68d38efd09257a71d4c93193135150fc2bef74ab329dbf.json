{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateXChainCreateClaimID = void 0;\nconst common_1 = require(\"./common\");\nfunction validateXChainCreateClaimID(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'XChainBridge', common_1.isXChainBridge);\n  (0, common_1.validateRequiredField)(tx, 'SignatureReward', common_1.isAmount);\n  (0, common_1.validateRequiredField)(tx, 'OtherChainSource', common_1.isAccount);\n}\nexports.validateXChainCreateClaimID = validateXChainCreateClaimID;","map":{"version":3,"names":["common_1","require","validateXChainCreateClaimID","tx","validateBaseTransaction","validateRequiredField","isXChainBridge","isAmount","isAccount","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/XChainCreateClaimID.ts"],"sourcesContent":["import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainCreateClaimID transaction creates a new cross-chain claim ID that is\n * used for a cross-chain transfer. A cross-chain claim ID represents one\n * cross-chain transfer of value.\n *\n * @category Transaction Models\n */\nexport interface XChainCreateClaimID extends BaseTransaction {\n  TransactionType: 'XChainCreateClaimID'\n\n  /**\n   * The bridge to create the claim ID for.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The amount, in XRP, to reward the witness servers for providing signatures.\n   * This must match the amount on the {@link Bridge} ledger object.\n   */\n  SignatureReward: Amount\n\n  /**\n   * The account that must send the {@link XChainCommit} transaction on the source chain.\n   */\n  OtherChainSource: Account\n}\n\n/**\n * Verify the form and type of an XChainCreateClaimID at runtime.\n *\n * @param tx - An XChainCreateClaimID Transaction.\n * @throws When the XChainCreateClaimID is malformed.\n */\nexport function validateXChainCreateClaimID(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateRequiredField(tx, 'OtherChainSource', isAccount)\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AA2CA,SAAgBC,2BAA2BA,CAACC,EAA2B;EACrE,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,cAAc,EAAEH,QAAA,CAAAM,cAAc,CAAC;EAEzD,IAAAN,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,iBAAiB,EAAEH,QAAA,CAAAO,QAAQ,CAAC;EAEtD,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,kBAAkB,EAAEH,QAAA,CAAAQ,SAAS,CAAC;AAC1D;AARAC,OAAA,CAAAP,2BAAA,GAAAA,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}