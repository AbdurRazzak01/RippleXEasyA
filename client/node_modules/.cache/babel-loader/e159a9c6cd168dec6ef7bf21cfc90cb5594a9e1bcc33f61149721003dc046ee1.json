{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenMint = exports.NFTokenMintFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nvar NFTokenMintFlags;\n(function (NFTokenMintFlags) {\n  NFTokenMintFlags[NFTokenMintFlags[\"tfBurnable\"] = 1] = \"tfBurnable\";\n  NFTokenMintFlags[NFTokenMintFlags[\"tfOnlyXRP\"] = 2] = \"tfOnlyXRP\";\n  NFTokenMintFlags[NFTokenMintFlags[\"tfTrustLine\"] = 4] = \"tfTrustLine\";\n  NFTokenMintFlags[NFTokenMintFlags[\"tfTransferable\"] = 8] = \"tfTransferable\";\n})(NFTokenMintFlags || (exports.NFTokenMintFlags = NFTokenMintFlags = {}));\nfunction validateNFTokenMint(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Account === tx.Issuer) {\n    throw new errors_1.ValidationError('NFTokenMint: Issuer must not be equal to Account');\n  }\n  (0, common_1.validateOptionalField)(tx, 'Issuer', common_1.isAccount);\n  if (typeof tx.URI === 'string' && tx.URI === '') {\n    throw new errors_1.ValidationError('NFTokenMint: URI must not be empty string');\n  }\n  if (typeof tx.URI === 'string' && !(0, utils_1.isHex)(tx.URI)) {\n    throw new errors_1.ValidationError('NFTokenMint: URI must be in hex format');\n  }\n  if (tx.NFTokenTaxon == null) {\n    throw new errors_1.ValidationError('NFTokenMint: missing field NFTokenTaxon');\n  }\n}\nexports.validateNFTokenMint = validateNFTokenMint;","map":{"version":3,"names":["Object","defineProperty","exports","value","validateNFTokenMint","NFTokenMintFlags","errors_1","require","utils_1","common_1","tx","validateBaseTransaction","Account","Issuer","ValidationError","validateOptionalField","isAccount","URI","isHex","NFTokenTaxon"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/NFTokenMint.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateNFTokenMint = exports.NFTokenMintFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nvar NFTokenMintFlags;\n(function (NFTokenMintFlags) {\n    NFTokenMintFlags[NFTokenMintFlags[\"tfBurnable\"] = 1] = \"tfBurnable\";\n    NFTokenMintFlags[NFTokenMintFlags[\"tfOnlyXRP\"] = 2] = \"tfOnlyXRP\";\n    NFTokenMintFlags[NFTokenMintFlags[\"tfTrustLine\"] = 4] = \"tfTrustLine\";\n    NFTokenMintFlags[NFTokenMintFlags[\"tfTransferable\"] = 8] = \"tfTransferable\";\n})(NFTokenMintFlags || (exports.NFTokenMintFlags = NFTokenMintFlags = {}));\nfunction validateNFTokenMint(tx) {\n    (0, common_1.validateBaseTransaction)(tx);\n    if (tx.Account === tx.Issuer) {\n        throw new errors_1.ValidationError('NFTokenMint: Issuer must not be equal to Account');\n    }\n    (0, common_1.validateOptionalField)(tx, 'Issuer', common_1.isAccount);\n    if (typeof tx.URI === 'string' && tx.URI === '') {\n        throw new errors_1.ValidationError('NFTokenMint: URI must not be empty string');\n    }\n    if (typeof tx.URI === 'string' && !(0, utils_1.isHex)(tx.URI)) {\n        throw new errors_1.ValidationError('NFTokenMint: URI must be in hex format');\n    }\n    if (tx.NFTokenTaxon == null) {\n        throw new errors_1.ValidationError('NFTokenMint: missing field NFTokenTaxon');\n    }\n}\nexports.validateNFTokenMint = validateNFTokenMint;\n//# sourceMappingURL=NFTokenMint.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AAC/D,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpC,IAAIF,gBAAgB;AACpB,CAAC,UAAUA,gBAAgB,EAAE;EACzBA,gBAAgB,CAACA,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACnEA,gBAAgB,CAACA,gBAAgB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;EACjEA,gBAAgB,CAACA,gBAAgB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa;EACrEA,gBAAgB,CAACA,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB;AAC/E,CAAC,EAAEA,gBAAgB,KAAKH,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1E,SAASD,mBAAmBA,CAACM,EAAE,EAAE;EAC7B,CAAC,CAAC,EAAED,QAAQ,CAACE,uBAAuB,EAAED,EAAE,CAAC;EACzC,IAAIA,EAAE,CAACE,OAAO,KAAKF,EAAE,CAACG,MAAM,EAAE;IAC1B,MAAM,IAAIP,QAAQ,CAACQ,eAAe,CAAC,kDAAkD,CAAC;EAC1F;EACA,CAAC,CAAC,EAAEL,QAAQ,CAACM,qBAAqB,EAAEL,EAAE,EAAE,QAAQ,EAAED,QAAQ,CAACO,SAAS,CAAC;EACrE,IAAI,OAAON,EAAE,CAACO,GAAG,KAAK,QAAQ,IAAIP,EAAE,CAACO,GAAG,KAAK,EAAE,EAAE;IAC7C,MAAM,IAAIX,QAAQ,CAACQ,eAAe,CAAC,2CAA2C,CAAC;EACnF;EACA,IAAI,OAAOJ,EAAE,CAACO,GAAG,KAAK,QAAQ,IAAI,CAAC,CAAC,CAAC,EAAET,OAAO,CAACU,KAAK,EAAER,EAAE,CAACO,GAAG,CAAC,EAAE;IAC3D,MAAM,IAAIX,QAAQ,CAACQ,eAAe,CAAC,wCAAwC,CAAC;EAChF;EACA,IAAIJ,EAAE,CAACS,YAAY,IAAI,IAAI,EAAE;IACzB,MAAM,IAAIb,QAAQ,CAACQ,eAAe,CAAC,yCAAyC,CAAC;EACjF;AACJ;AACAZ,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}