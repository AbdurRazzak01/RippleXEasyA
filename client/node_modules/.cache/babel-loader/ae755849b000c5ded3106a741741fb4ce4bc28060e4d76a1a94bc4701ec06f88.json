{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\nconst eventemitter3_1 = require(\"eventemitter3\");\nconst errors_1 = require(\"../errors\");\nconst flags_1 = require(\"../models/utils/flags\");\nconst sugar_1 = require(\"../sugar\");\nconst autofill_1 = require(\"../sugar/autofill\");\nconst balances_1 = require(\"../sugar/balances\");\nconst getOrderbook_1 = require(\"../sugar/getOrderbook\");\nconst utils_1 = require(\"../utils\");\nconst Wallet_1 = require(\"../Wallet\");\nconst fundWallet_1 = require(\"../Wallet/fundWallet\");\nconst connection_1 = require(\"./connection\");\nconst partialPayment_1 = require(\"./partialPayment\");\nfunction getCollectKeyFromCommand(command) {\n  switch (command) {\n    case 'account_channels':\n      return 'channels';\n    case 'account_lines':\n      return 'lines';\n    case 'account_objects':\n      return 'account_objects';\n    case 'account_tx':\n      return 'transactions';\n    case 'account_offers':\n    case 'book_offers':\n      return 'offers';\n    case 'ledger_data':\n      return 'state';\n    default:\n      return null;\n  }\n}\nfunction clamp(value, min, max) {\n  if (min > max) {\n    throw new Error('Illegal clamp bounds');\n  }\n  return Math.min(Math.max(value, min), max);\n}\nconst DEFAULT_FEE_CUSHION = 1.2;\nconst DEFAULT_MAX_FEE_XRP = '2';\nconst MIN_LIMIT = 10;\nconst MAX_LIMIT = 400;\nconst NORMAL_DISCONNECT_CODE = 1000;\nclass Client extends eventemitter3_1.EventEmitter {\n  constructor(server, options = {}) {\n    var _a, _b;\n    super();\n    if (typeof server !== 'string' || !/wss?(?:\\+unix)?:\\/\\//u.exec(server)) {\n      throw new errors_1.ValidationError('server URI must start with `wss://`, `ws://`, `wss+unix://`, or `ws+unix://`.');\n    }\n    this.feeCushion = (_a = options.feeCushion) !== null && _a !== void 0 ? _a : DEFAULT_FEE_CUSHION;\n    this.maxFeeXRP = (_b = options.maxFeeXRP) !== null && _b !== void 0 ? _b : DEFAULT_MAX_FEE_XRP;\n    this.connection = new connection_1.Connection(server, options);\n    this.connection.on('error', (errorCode, errorMessage, data) => {\n      this.emit('error', errorCode, errorMessage, data);\n    });\n    this.connection.on('reconnect', () => {\n      this.connection.on('connected', () => this.emit('connected'));\n    });\n    this.connection.on('disconnected', code => {\n      let finalCode = code;\n      if (finalCode === connection_1.INTENTIONAL_DISCONNECT_CODE) {\n        finalCode = NORMAL_DISCONNECT_CODE;\n      }\n      this.emit('disconnected', finalCode);\n    });\n    this.connection.on('ledgerClosed', ledger => {\n      this.emit('ledgerClosed', ledger);\n    });\n    this.connection.on('transaction', tx => {\n      (0, partialPayment_1.handleStreamPartialPayment)(tx, this.connection.trace);\n      this.emit('transaction', tx);\n    });\n    this.connection.on('validationReceived', validation => {\n      this.emit('validationReceived', validation);\n    });\n    this.connection.on('manifestReceived', manifest => {\n      this.emit('manifestReceived', manifest);\n    });\n    this.connection.on('peerStatusChange', status => {\n      this.emit('peerStatusChange', status);\n    });\n    this.connection.on('consensusPhase', consensus => {\n      this.emit('consensusPhase', consensus);\n    });\n    this.connection.on('path_find', path => {\n      this.emit('path_find', path);\n    });\n  }\n  get url() {\n    return this.connection.getUrl();\n  }\n  request(req) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield this.connection.request(Object.assign(Object.assign({}, req), {\n        account: req.account ? (0, sugar_1.ensureClassicAddress)(req.account) : undefined\n      }));\n      (0, partialPayment_1.handlePartialPayment)(req.command, response);\n      return response;\n    });\n  }\n  requestNextPage(req, resp) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!resp.result.marker) {\n        return Promise.reject(new errors_1.NotFoundError('response does not have a next page'));\n      }\n      const nextPageRequest = Object.assign(Object.assign({}, req), {\n        marker: resp.result.marker\n      });\n      return this.request(nextPageRequest);\n    });\n  }\n  on(eventName, listener) {\n    return super.on(eventName, listener);\n  }\n  requestAll(request, collect) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const collectKey = collect !== null && collect !== void 0 ? collect : getCollectKeyFromCommand(request.command);\n      if (!collectKey) {\n        throw new errors_1.ValidationError(`no collect key for command ${request.command}`);\n      }\n      const countTo = request.limit == null ? Infinity : request.limit;\n      let count = 0;\n      let marker = request.marker;\n      let lastBatchLength;\n      const results = [];\n      do {\n        const countRemaining = clamp(countTo - count, MIN_LIMIT, MAX_LIMIT);\n        const repeatProps = Object.assign(Object.assign({}, request), {\n          limit: countRemaining,\n          marker\n        });\n        const singleResponse = yield this.connection.request(repeatProps);\n        const singleResult = singleResponse.result;\n        if (!(collectKey in singleResult)) {\n          throw new errors_1.XrplError(`${collectKey} not in result`);\n        }\n        const collectedData = singleResult[collectKey];\n        marker = singleResult.marker;\n        results.push(singleResponse);\n        if (Array.isArray(collectedData)) {\n          count += collectedData.length;\n          lastBatchLength = collectedData.length;\n        } else {\n          lastBatchLength = 0;\n        }\n      } while (Boolean(marker) && count < countTo && lastBatchLength !== 0);\n      return results;\n    });\n  }\n  getServerInfo() {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const response = yield this.request({\n          command: 'server_info'\n        });\n        this.networkID = (_a = response.result.info.network_id) !== null && _a !== void 0 ? _a : undefined;\n        this.buildVersion = response.result.info.build_version;\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.connection.connect().then(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.getServerInfo();\n        this.emit('connected');\n      }));\n    });\n  }\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.connection.disconnect();\n    });\n  }\n  isConnected() {\n    return this.connection.isConnected();\n  }\n  autofill(transaction, signersCount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = Object.assign({}, transaction);\n      (0, autofill_1.setValidAddresses)(tx);\n      (0, flags_1.setTransactionFlagsToNumber)(tx);\n      const promises = [];\n      if (tx.NetworkID == null) {\n        tx.NetworkID = (0, autofill_1.txNeedsNetworkID)(this) ? this.networkID : undefined;\n      }\n      if (tx.Sequence == null) {\n        promises.push((0, autofill_1.setNextValidSequenceNumber)(this, tx));\n      }\n      if (tx.Fee == null) {\n        promises.push((0, autofill_1.calculateFeePerTransactionType)(this, tx, signersCount));\n      }\n      if (tx.LastLedgerSequence == null) {\n        promises.push((0, autofill_1.setLatestValidatedLedgerSequence)(this, tx));\n      }\n      if (tx.TransactionType === 'AccountDelete') {\n        promises.push((0, autofill_1.checkAccountDeleteBlockers)(this, tx));\n      }\n      return Promise.all(promises).then(() => tx);\n    });\n  }\n  submit(transaction, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedTx = yield (0, sugar_1.getSignedTx)(this, transaction, opts);\n      return (0, sugar_1.submitRequest)(this, signedTx, opts === null || opts === void 0 ? void 0 : opts.failHard);\n    });\n  }\n  submitAndWait(transaction, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedTx = yield (0, sugar_1.getSignedTx)(this, transaction, opts);\n      const lastLedger = (0, sugar_1.getLastLedgerSequence)(signedTx);\n      if (lastLedger == null) {\n        throw new errors_1.ValidationError('Transaction must contain a LastLedgerSequence value for reliable submission.');\n      }\n      const response = yield (0, sugar_1.submitRequest)(this, signedTx, opts === null || opts === void 0 ? void 0 : opts.failHard);\n      const txHash = utils_1.hashes.hashSignedTx(signedTx);\n      return (0, sugar_1.waitForFinalTransactionOutcome)(this, txHash, lastLedger, response.result.engine_result);\n    });\n  }\n  prepareTransaction(transaction, signersCount) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.autofill(transaction, signersCount);\n    });\n  }\n  getXrpBalance(address, options = {}) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const xrpRequest = {\n        command: 'account_info',\n        account: address,\n        ledger_index: (_a = options.ledger_index) !== null && _a !== void 0 ? _a : 'validated',\n        ledger_hash: options.ledger_hash\n      };\n      const response = yield this.request(xrpRequest);\n      return (0, utils_1.dropsToXrp)(response.result.account_data.Balance);\n    });\n  }\n  getBalances(address, options = {}) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const balances = [];\n      let xrpPromise = Promise.resolve(0);\n      if (!options.peer) {\n        xrpPromise = this.getXrpBalance(address, {\n          ledger_hash: options.ledger_hash,\n          ledger_index: options.ledger_index\n        });\n      }\n      const linesRequest = {\n        command: 'account_lines',\n        account: address,\n        ledger_index: (_a = options.ledger_index) !== null && _a !== void 0 ? _a : 'validated',\n        ledger_hash: options.ledger_hash,\n        peer: options.peer,\n        limit: options.limit\n      };\n      const linesPromise = this.requestAll(linesRequest);\n      yield Promise.all([xrpPromise, linesPromise]).then(([xrpBalance, linesResponses]) => {\n        const accountLinesBalance = linesResponses.flatMap(response => (0, balances_1.formatBalances)(response.result.lines));\n        if (xrpBalance !== 0) {\n          balances.push({\n            currency: 'XRP',\n            value: xrpBalance.toString()\n          });\n        }\n        balances.push(...accountLinesBalance);\n      });\n      return balances.slice(0, options.limit);\n    });\n  }\n  getOrderbook(currency1, currency2, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      (0, getOrderbook_1.validateOrderbookOptions)(options);\n      const request = (0, getOrderbook_1.createBookOffersRequest)(currency1, currency2, options);\n      const directOfferResults = yield (0, getOrderbook_1.requestAllOffers)(this, request);\n      const reverseOfferResults = yield (0, getOrderbook_1.requestAllOffers)(this, (0, getOrderbook_1.reverseRequest)(request));\n      const directOffers = (0, getOrderbook_1.extractOffers)(directOfferResults);\n      const reverseOffers = (0, getOrderbook_1.extractOffers)(reverseOfferResults);\n      const orders = (0, getOrderbook_1.combineOrders)(directOffers, reverseOffers);\n      const {\n        buy,\n        sell\n      } = (0, getOrderbook_1.separateBuySellOrders)(orders);\n      return {\n        buy: (0, getOrderbook_1.sortAndLimitOffers)(buy, options.limit),\n        sell: (0, getOrderbook_1.sortAndLimitOffers)(sell, options.limit)\n      };\n    });\n  }\n  getLedgerIndex() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const ledgerResponse = yield this.request({\n        command: 'ledger',\n        ledger_index: 'validated'\n      });\n      return ledgerResponse.result.ledger_index;\n    });\n  }\n  fundWallet(wallet, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isConnected()) {\n        throw new errors_1.RippledError('Client not connected, cannot call faucet');\n      }\n      const existingWallet = Boolean(wallet);\n      const walletToFund = wallet && (0, utils_1.isValidClassicAddress)(wallet.classicAddress) ? wallet : Wallet_1.Wallet.generate();\n      const postBody = {\n        destination: walletToFund.classicAddress,\n        xrpAmount: options.amount,\n        usageContext: options.usageContext,\n        userAgent: 'xrpl.js'\n      };\n      let startingBalance = 0;\n      if (existingWallet) {\n        try {\n          startingBalance = Number(yield this.getXrpBalance(walletToFund.classicAddress));\n        } catch (_a) {}\n      }\n      return (0, fundWallet_1.requestFunding)(options, this, startingBalance, walletToFund, postBody);\n    });\n  }\n}\nexports.Client = Client;","map":{"version":3,"names":["eventemitter3_1","require","errors_1","flags_1","sugar_1","autofill_1","balances_1","getOrderbook_1","utils_1","Wallet_1","fundWallet_1","connection_1","partialPayment_1","getCollectKeyFromCommand","command","clamp","value","min","max","Error","Math","DEFAULT_FEE_CUSHION","DEFAULT_MAX_FEE_XRP","MIN_LIMIT","MAX_LIMIT","NORMAL_DISCONNECT_CODE","Client","EventEmitter","constructor","server","options","exec","ValidationError","feeCushion","_a","maxFeeXRP","_b","connection","Connection","on","errorCode","errorMessage","data","emit","code","finalCode","INTENTIONAL_DISCONNECT_CODE","ledger","tx","handleStreamPartialPayment","trace","validation","manifest","status","consensus","path","url","getUrl","request","req","response","Object","assign","account","ensureClassicAddress","undefined","handlePartialPayment","requestNextPage","resp","result","marker","Promise","reject","NotFoundError","nextPageRequest","eventName","listener","requestAll","collect","collectKey","countTo","limit","Infinity","count","lastBatchLength","results","countRemaining","repeatProps","singleResponse","singleResult","XrplError","collectedData","push","Array","isArray","length","Boolean","getServerInfo","networkID","info","network_id","buildVersion","build_version","error","console","connect","then","__awaiter","disconnect","isConnected","autofill","transaction","signersCount","setValidAddresses","setTransactionFlagsToNumber","promises","NetworkID","txNeedsNetworkID","Sequence","setNextValidSequenceNumber","Fee","calculateFeePerTransactionType","LastLedgerSequence","setLatestValidatedLedgerSequence","TransactionType","checkAccountDeleteBlockers","all","submit","opts","signedTx","getSignedTx","submitRequest","failHard","submitAndWait","lastLedger","getLastLedgerSequence","txHash","hashes","hashSignedTx","waitForFinalTransactionOutcome","engine_result","prepareTransaction","getXrpBalance","address","xrpRequest","ledger_index","ledger_hash","dropsToXrp","account_data","Balance","getBalances","balances","xrpPromise","resolve","peer","linesRequest","linesPromise","xrpBalance","linesResponses","accountLinesBalance","flatMap","formatBalances","lines","currency","toString","slice","getOrderbook","currency1","currency2","validateOrderbookOptions","createBookOffersRequest","directOfferResults","requestAllOffers","reverseOfferResults","reverseRequest","directOffers","extractOffers","reverseOffers","orders","combineOrders","buy","sell","separateBuySellOrders","sortAndLimitOffers","getLedgerIndex","ledgerResponse","fundWallet","wallet","RippledError","existingWallet","walletToFund","isValidClassicAddress","classicAddress","Wallet","generate","postBody","destination","xrpAmount","amount","usageContext","userAgent","startingBalance","Number","requestFunding","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/client/index.ts"],"sourcesContent":["/* eslint-disable jsdoc/require-jsdoc -- Request has many aliases, but they don't need unique docs */\n\n/* eslint-disable max-lines -- Client is a large file w/ lots of imports/exports */\nimport { EventEmitter } from 'eventemitter3'\n\nimport {\n  RippledError,\n  NotFoundError,\n  ValidationError,\n  XrplError,\n} from '../errors'\nimport type { LedgerIndex, Balance } from '../models/common'\nimport {\n  Request,\n  // account methods\n  AccountChannelsRequest,\n  AccountChannelsResponse,\n  AccountInfoRequest,\n  AccountLinesRequest,\n  AccountLinesResponse,\n  AccountObjectsRequest,\n  AccountObjectsResponse,\n  AccountOffersRequest,\n  AccountOffersResponse,\n  AccountTxRequest,\n  AccountTxResponse,\n  // ledger methods\n  LedgerDataRequest,\n  LedgerDataResponse,\n  TxResponse,\n} from '../models/methods'\nimport type {\n  RequestResponseMap,\n  RequestAllResponseMap,\n  MarkerRequest,\n  MarkerResponse,\n  SubmitResponse,\n} from '../models/methods'\nimport type { BookOffer, BookOfferCurrency } from '../models/methods/bookOffers'\nimport type {\n  EventTypes,\n  OnEventToListenerMap,\n} from '../models/methods/subscribe'\nimport type { SubmittableTransaction } from '../models/transactions'\nimport { setTransactionFlagsToNumber } from '../models/utils/flags'\nimport {\n  ensureClassicAddress,\n  submitRequest,\n  getSignedTx,\n  getLastLedgerSequence,\n  waitForFinalTransactionOutcome,\n} from '../sugar'\nimport {\n  setValidAddresses,\n  setNextValidSequenceNumber,\n  calculateFeePerTransactionType,\n  setLatestValidatedLedgerSequence,\n  checkAccountDeleteBlockers,\n  txNeedsNetworkID,\n} from '../sugar/autofill'\nimport { formatBalances } from '../sugar/balances'\nimport {\n  validateOrderbookOptions,\n  createBookOffersRequest,\n  requestAllOffers,\n  reverseRequest,\n  extractOffers,\n  combineOrders,\n  separateBuySellOrders,\n  sortAndLimitOffers,\n} from '../sugar/getOrderbook'\nimport { dropsToXrp, hashes, isValidClassicAddress } from '../utils'\nimport { Wallet } from '../Wallet'\nimport {\n  type FaucetRequestBody,\n  FundingOptions,\n  requestFunding,\n} from '../Wallet/fundWallet'\n\nimport {\n  Connection,\n  ConnectionUserOptions,\n  INTENTIONAL_DISCONNECT_CODE,\n} from './connection'\nimport {\n  handlePartialPayment,\n  handleStreamPartialPayment,\n} from './partialPayment'\n\nexport interface ClientOptions extends ConnectionUserOptions {\n  feeCushion?: number\n  maxFeeXRP?: string\n  timeout?: number\n}\n\n// Make sure to update both this and `RequestNextPageReturnMap` at the same time\ntype RequestNextPageType =\n  | AccountChannelsRequest\n  | AccountLinesRequest\n  | AccountObjectsRequest\n  | AccountOffersRequest\n  | AccountTxRequest\n  | LedgerDataRequest\n\ntype RequestNextPageReturnMap<T> = T extends AccountChannelsRequest\n  ? AccountChannelsResponse\n  : T extends AccountLinesRequest\n  ? AccountLinesResponse\n  : T extends AccountObjectsRequest\n  ? AccountObjectsResponse\n  : T extends AccountOffersRequest\n  ? AccountOffersResponse\n  : T extends AccountTxRequest\n  ? AccountTxResponse\n  : T extends LedgerDataRequest\n  ? LedgerDataResponse\n  : never\n\n/**\n * Get the response key / property name that contains the listed data for a\n * command. This varies from command to command, but we need to know it to\n * properly count across many requests.\n *\n * @param command - The rippled request command.\n * @returns The property key corresponding to the command.\n */\nfunction getCollectKeyFromCommand(command: string): string | null {\n  switch (command) {\n    case 'account_channels':\n      return 'channels'\n    case 'account_lines':\n      return 'lines'\n    case 'account_objects':\n      return 'account_objects'\n    case 'account_tx':\n      return 'transactions'\n    case 'account_offers':\n    case 'book_offers':\n      return 'offers'\n    case 'ledger_data':\n      return 'state'\n    default:\n      return null\n  }\n}\n\nfunction clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new Error('Illegal clamp bounds')\n  }\n  return Math.min(Math.max(value, min), max)\n}\n\nconst DEFAULT_FEE_CUSHION = 1.2\nconst DEFAULT_MAX_FEE_XRP = '2'\n\nconst MIN_LIMIT = 10\nconst MAX_LIMIT = 400\n\nconst NORMAL_DISCONNECT_CODE = 1000\n\n/**\n * Client for interacting with rippled servers.\n *\n * @category Clients\n */\nclass Client extends EventEmitter<EventTypes> {\n  /*\n   * Underlying connection to rippled.\n   */\n  public readonly connection: Connection\n\n  /**\n   * Factor to multiply estimated fee by to provide a cushion in case the\n   * required fee rises during submission of a transaction. Defaults to 1.2.\n   *\n   * @category Fee\n   */\n  public readonly feeCushion: number\n\n  /**\n   * Maximum transaction cost to allow, in decimal XRP. Must be a string-encoded\n   * number. Defaults to '2'.\n   *\n   * @category Fee\n   */\n  public readonly maxFeeXRP: string\n\n  /**\n   * Network ID of the server this client is connected to\n   *\n   */\n  public networkID: number | undefined\n\n  /**\n   * Rippled Version used by the server this client is connected to\n   *\n   */\n  public buildVersion: string | undefined\n\n  /**\n   * Creates a new Client with a websocket connection to a rippled server.\n   *\n   * @param server - URL of the server to connect to.\n   * @param options - Options for client settings.\n   * @category Constructor\n   *\n   * @example\n   * ```ts\n   * import { Client } from \"xrpl\"\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * ```\n   */\n  // eslint-disable-next-line max-lines-per-function -- okay because we have to set up all the connection handlers\n  public constructor(server: string, options: ClientOptions = {}) {\n    super()\n    if (typeof server !== 'string' || !/wss?(?:\\+unix)?:\\/\\//u.exec(server)) {\n      throw new ValidationError(\n        'server URI must start with `wss://`, `ws://`, `wss+unix://`, or `ws+unix://`.',\n      )\n    }\n\n    this.feeCushion = options.feeCushion ?? DEFAULT_FEE_CUSHION\n    this.maxFeeXRP = options.maxFeeXRP ?? DEFAULT_MAX_FEE_XRP\n\n    this.connection = new Connection(server, options)\n\n    this.connection.on('error', (errorCode, errorMessage, data) => {\n      this.emit('error', errorCode, errorMessage, data)\n    })\n\n    this.connection.on('reconnect', () => {\n      this.connection.on('connected', () => this.emit('connected'))\n    })\n\n    this.connection.on('disconnected', (code: number) => {\n      let finalCode = code\n      /*\n       * 4000: Connection uses a 4000 code internally to indicate a manual disconnect/close\n       * Since 4000 is a normal disconnect reason, we convert this to the standard exit code 1000\n       */\n      if (finalCode === INTENTIONAL_DISCONNECT_CODE) {\n        finalCode = NORMAL_DISCONNECT_CODE\n      }\n      this.emit('disconnected', finalCode)\n    })\n\n    this.connection.on('ledgerClosed', (ledger) => {\n      this.emit('ledgerClosed', ledger)\n    })\n\n    this.connection.on('transaction', (tx) => {\n      // mutates `tx` to add warnings\n      handleStreamPartialPayment(tx, this.connection.trace)\n      this.emit('transaction', tx)\n    })\n\n    this.connection.on('validationReceived', (validation) => {\n      this.emit('validationReceived', validation)\n    })\n\n    this.connection.on('manifestReceived', (manifest) => {\n      this.emit('manifestReceived', manifest)\n    })\n\n    this.connection.on('peerStatusChange', (status) => {\n      this.emit('peerStatusChange', status)\n    })\n\n    this.connection.on('consensusPhase', (consensus) => {\n      this.emit('consensusPhase', consensus)\n    })\n\n    this.connection.on('path_find', (path) => {\n      this.emit('path_find', path)\n    })\n  }\n\n  /**\n   * Get the url that the client is connected to.\n   *\n   * @returns The URL of the server this client is connected to.\n   * @category Network\n   */\n  public get url(): string {\n    return this.connection.getUrl()\n  }\n\n  /**\n   * Makes a request to the client with the given command and\n   * additional request body parameters.\n   *\n   * @category Network\n   *\n   * @param req - Request to send to the server.\n   * @returns The response from the server.\n   *\n   * @example\n   * ```ts\n   * const response = await client.request({\n   *   command: 'account_info',\n   *   account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * })\n   * console.log(response)\n   * ```\n   */\n  public async request<R extends Request, T = RequestResponseMap<R>>(\n    req: R,\n  ): Promise<T> {\n    const response = await this.connection.request<R, T>({\n      ...req,\n      account: req.account\n        ? // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Must be string\n          ensureClassicAddress(req.account as string)\n        : undefined,\n    })\n\n    // mutates `response` to add warnings\n    handlePartialPayment(req.command, response)\n\n    return response\n  }\n\n  /**\n   * Requests the next page of data.\n   *\n   * @category Network\n   *\n   * @param req - Request to send.\n   * @param resp - Response with the marker to use in the request.\n   * @returns The response with the next page of data.\n   *\n   * @example\n   * ```ts\n   * const response = await client.request({\n   *  command: 'account_tx',\n   *  account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * })\n   * console.log(response)\n   * const nextResponse = await client.requestNextPage({\n   *   command: 'account_tx',\n   *   account: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   * },\n   * response)\n   * console.log(nextResponse)\n   * ```\n   */\n  public async requestNextPage<\n    T extends RequestNextPageType,\n    U extends RequestNextPageReturnMap<T>,\n  >(req: T, resp: U): Promise<RequestNextPageReturnMap<T>> {\n    if (!resp.result.marker) {\n      return Promise.reject(\n        new NotFoundError('response does not have a next page'),\n      )\n    }\n    const nextPageRequest = { ...req, marker: resp.result.marker }\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Necessary for overloading\n    return this.request(nextPageRequest) as unknown as U\n  }\n\n  /**\n   * Event handler for subscription streams.\n   *\n   * @category Network\n   *\n   * @param eventName - Name of the event. Only forwards streams.\n   * @param listener - Function to run on event.\n   * @returns This, because it inherits from EventEmitter.\n   *\n   * * @example\n   * ```ts\n   * const api = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * api.on('transaction', (tx: TransactionStream) => {\n   *  console.log(\"Received Transaction\")\n   *  console.log(tx)\n   * })\n   *\n   * await api.connect()\n   * const response = await api.request({\n   *     command: 'subscribe',\n   *     streams: ['transactions_proposed']\n   * })\n   * ```\n   */\n  public on<\n    T extends EventTypes,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- needs to be any for overload\n    U extends (...args: any[]) => void = OnEventToListenerMap<T>,\n  >(eventName: T, listener: U): this {\n    return super.on(eventName, listener)\n  }\n\n  /**\n   * Makes multiple paged requests to the client to return a given number of\n   * resources. Multiple paged requests will be made until the `limit`\n   * number of resources is reached (if no `limit` is provided, a single request\n   * will be made).\n   *\n   * If the command is unknown, an additional `collect` property is required to\n   * know which response key contains the array of resources.\n   *\n   * NOTE: This command is used by existing methods and is not recommended for\n   * general use. Instead, use rippled's built-in pagination and make multiple\n   * requests as needed.\n   *\n   * @category Network\n   *\n   * @param request - The initial request to send to the server.\n   * @param collect - (Optional) the param to use to collect the array of resources (only needed if command is unknown).\n   * @returns The array of all responses.\n   * @throws ValidationError if there is no collection key (either from a known command or for the unknown command).\n   *\n   * @example\n   * // Request all ledger data pages\n   * const allResponses = await client.requestAll({ command: 'ledger_data' });\n   * console.log(allResponses);\n   *\n   * @example\n   * // Request all transaction data pages\n   * const allResponses = await client.requestAll({ command: 'transaction_data' });\n   * console.log(allResponses);\n   */\n  public async requestAll<\n    T extends MarkerRequest,\n    U = RequestAllResponseMap<T>,\n  >(request: T, collect?: string): Promise<U[]> {\n    /*\n     * The data under collection is keyed based on the command. Fail if command\n     * not recognized and collection key not provided.\n     */\n    const collectKey = collect ?? getCollectKeyFromCommand(request.command)\n    if (!collectKey) {\n      throw new ValidationError(`no collect key for command ${request.command}`)\n    }\n    /*\n     * If limit is not provided, fetches all data over multiple requests.\n     * NOTE: This may return much more than needed. Set limit when possible.\n     */\n    const countTo: number = request.limit == null ? Infinity : request.limit\n    let count = 0\n    let marker: unknown = request.marker\n    let lastBatchLength: number\n    const results: U[] = []\n    do {\n      const countRemaining = clamp(countTo - count, MIN_LIMIT, MAX_LIMIT)\n      const repeatProps = {\n        ...request,\n        limit: countRemaining,\n        marker,\n      }\n      // eslint-disable-next-line no-await-in-loop -- Necessary for this, it really has to wait\n      const singleResponse = await this.connection.request(repeatProps)\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be true\n      const singleResult = (singleResponse as MarkerResponse).result\n      if (!(collectKey in singleResult)) {\n        throw new XrplError(`${collectKey} not in result`)\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- Should be true\n      const collectedData = singleResult[collectKey]\n      marker = singleResult.marker\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be true\n      results.push(singleResponse as U)\n      // Make sure we handle when no data (not even an empty array) is returned.\n      if (Array.isArray(collectedData)) {\n        count += collectedData.length\n        lastBatchLength = collectedData.length\n      } else {\n        lastBatchLength = 0\n      }\n    } while (Boolean(marker) && count < countTo && lastBatchLength !== 0)\n    return results\n  }\n\n  /**\n   * Get networkID and buildVersion from server_info\n   *\n   * @returns void\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.getServerInfo()\n   * console.log(client.networkID)\n   * console.log(client.buildVersion)\n   * ```\n   */\n  public async getServerInfo(): Promise<void> {\n    try {\n      const response = await this.request({\n        command: 'server_info',\n      })\n      this.networkID = response.result.info.network_id ?? undefined\n      this.buildVersion = response.result.info.build_version\n    } catch (error) {\n      // eslint-disable-next-line no-console -- Print the error to console but allows client to be connected.\n      console.error(error)\n    }\n  }\n\n  /**\n   * Tells the Client instance to connect to its rippled server.\n   *\n   * @example\n   *\n   * Client.connect() establishes a connection between a Client object and the server.\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   * If you open a client connection, be sure to close it with `await client.disconnect()`\n   * before exiting your application.\n   * @returns A promise that resolves with a void value when a connection is established.\n   * @category Network\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   */\n  public async connect(): Promise<void> {\n    return this.connection.connect().then(async () => {\n      await this.getServerInfo()\n      this.emit('connected')\n    })\n  }\n\n  /**\n   * Disconnects the XRPL client from the server and cancels all pending requests and subscriptions. Call when\n   * you want to disconnect the client from the server, such as when you're finished using the client or when you\n   * need to switch to a different server.\n   *\n   * @example\n   *\n   * To use the disconnect() method, you first need to create a new Client object and connect it to a server:\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * // do something with the client\n   * await client.disconnect()\n   * ```\n   *\n   * @returns A promise that resolves with a void value when a connection is destroyed.\n   * @category Network\n   */\n  public async disconnect(): Promise<void> {\n    /*\n     * backwards compatibility: connection.disconnect() can return a number, but\n     * this method returns nothing. SO we await but don't return any result.\n     */\n    await this.connection.disconnect()\n  }\n\n  /**\n   * Checks if the Client instance is connected to its rippled server.\n   *\n   * @returns Whether the client instance is connected.\n   * @category Network\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * console.log(client.isConnected())\n   * // true\n   * await client.disconnect()\n   * console.log(client.isConnected())\n   * // false\n   * ```\n   */\n  public isConnected(): boolean {\n    return this.connection.isConnected()\n  }\n\n  /**\n   * Autofills fields in a transaction. This will set `Sequence`, `Fee`,\n   * `lastLedgerSequence` according to the current state of the server this Client\n   * is connected to. It also converts all X-Addresses to classic addresses and\n   * flags interfaces into numbers.\n   *\n   * @category Core\n   *\n   * @example\n   *\n   * ```ts\n   * const { Client } = require('xrpl')\n   *\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * async function createAndAutofillTransaction() {\n   *   const transaction = {\n   *     TransactionType: 'Payment',\n   *     Account: 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh',\n   *     Destination: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   *     Amount: '10000000' // 10 XRP in drops (1/1,000,000th of an XRP)\n   *   }\n   *\n   *   try {\n   *     const autofilledTransaction = await client.autofill(transaction)\n   *     console.log(autofilledTransaction)\n   *   } catch (error) {\n   *     console.error(`Failed to autofill transaction: ${error}`)\n   *   }\n   * }\n   *\n   * createAndAutofillTransaction()\n   * ```\n   *\n   * Autofill helps fill in fields which should be included in a transaction, but can be determined automatically\n   * such as `LastLedgerSequence` and `Fee`. If you override one of the fields `autofill` changes, your explicit\n   * values will be used instead. By default, this is done as part of `submit` and `submitAndWait` when you pass\n   * in an unsigned transaction along with your wallet to be submitted.\n   *\n   * @template T\n   * @param transaction - A {@link SubmittableTransaction} in JSON format\n   * @param signersCount - The expected number of signers for this transaction.\n   * Only used for multisigned transactions.\n   * @returns The autofilled transaction.\n   */\n  public async autofill<T extends SubmittableTransaction>(\n    transaction: T,\n    signersCount?: number,\n  ): Promise<T> {\n    const tx = { ...transaction }\n\n    setValidAddresses(tx)\n\n    setTransactionFlagsToNumber(tx)\n\n    const promises: Array<Promise<void>> = []\n    if (tx.NetworkID == null) {\n      tx.NetworkID = txNeedsNetworkID(this) ? this.networkID : undefined\n    }\n    if (tx.Sequence == null) {\n      promises.push(setNextValidSequenceNumber(this, tx))\n    }\n    if (tx.Fee == null) {\n      promises.push(calculateFeePerTransactionType(this, tx, signersCount))\n    }\n    if (tx.LastLedgerSequence == null) {\n      promises.push(setLatestValidatedLedgerSequence(this, tx))\n    }\n    if (tx.TransactionType === 'AccountDelete') {\n      promises.push(checkAccountDeleteBlockers(this, tx))\n    }\n\n    return Promise.all(promises).then(() => tx)\n  }\n\n  /**\n   * Submits a signed/unsigned transaction.\n   * Steps performed on a transaction:\n   *    1. Autofill.\n   *    2. Sign & Encode.\n   *    3. Submit.\n   *\n   * @category Core\n   *\n   * @param transaction - A transaction to autofill, sign & encode, and submit.\n   * @param opts - (Optional) Options used to sign and submit a transaction.\n   * @param opts.autofill - If true, autofill a transaction.\n   * @param opts.failHard - If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n   * @param opts.wallet - A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n   *\n   * @returns A promise that contains SubmitResponse.\n   * @throws RippledError if submit request fails.\n   *\n   * @example\n   * ```ts\n   * const { Client, Wallet } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const wallet = Wallet.generate()\n   * const transaction = {\n   *   TransactionType: 'Payment',\n   *   Account: wallet.classicAddress,\n   *   Destination: 'r9cZA1mLK5R5Am25ArfXFmqgNwjZgnfk59',\n   *   Amount: '10000000' // 10 XRP in drops (1/1,000,000th of an XRP)\n   * }\n   * const submitResponse = await client.submit(transaction, { wallet })\n   * console.log(submitResponse)\n   * ```\n   */\n  public async submit(\n    transaction: SubmittableTransaction | string,\n    opts?: {\n      // If true, autofill a transaction.\n      autofill?: boolean\n      // If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n      failHard?: boolean\n      // A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n      wallet?: Wallet\n    },\n  ): Promise<SubmitResponse> {\n    const signedTx = await getSignedTx(this, transaction, opts)\n    return submitRequest(this, signedTx, opts?.failHard)\n  }\n\n  /**\n   * Asynchronously submits a transaction and verifies that it has been included in a\n   * validated ledger (or has errored/will not be included for some reason).\n   * See [Reliable Transaction Submission](https://xrpl.org/reliable-transaction-submission.html).\n   *\n   * @category Core\n   *\n   * @example\n   *\n   * ```ts\n   * const { Client, Wallet } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   *\n   * async function submitTransaction() {\n   *   const senderWallet = client.fundWallet()\n   *   const recipientWallet = client.fundWallet()\n   *\n   *   const transaction = {\n   *     TransactionType: 'Payment',\n   *     Account: senderWallet.address,\n   *     Destination: recipientWallet.address,\n   *     Amount: '10'\n   *   }\n   *\n   *   try {\n   *     await client.submit(signedTransaction, { wallet: senderWallet })\n   *     console.log(result)\n   *   } catch (error) {\n   *     console.error(`Failed to submit transaction: ${error}`)\n   *   }\n   * }\n   *\n   * submitTransaction()\n   * ```\n   *\n   * In this example we submit a payment transaction between two newly created testnet accounts.\n   *\n   * Under the hood, `submit` will call `client.autofill` by default, and because we've passed in a `Wallet` it\n   * Will also sign the transaction for us before submitting the signed transaction binary blob to the ledger.\n   *\n   * This is similar to `submitAndWait` which does all of the above, but also waits to see if the transaction has been validated.\n   * @param transaction - A transaction to autofill, sign & encode, and submit.\n   * @param opts - (Optional) Options used to sign and submit a transaction.\n   * @param opts.autofill - If true, autofill a transaction.\n   * @param opts.failHard - If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n   * @param opts.wallet - A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n   * @throws Connection errors: If the `Client` object is unable to establish a connection to the specified WebSocket endpoint,\n   * an error will be thrown.\n   * @throws Transaction errors: If the submitted transaction is invalid or cannot be included in a validated ledger for any\n   * reason, the promise returned by `submitAndWait()` will be rejected with an error. This could include issues with insufficient\n   * balance, invalid transaction fields, or other issues specific to the transaction being submitted.\n   * @throws Ledger errors: If the ledger being used to submit the transaction is undergoing maintenance or otherwise unavailable,\n   * an error will be thrown.\n   * @throws Timeout errors: If the transaction takes longer than the specified timeout period to be included in a validated\n   * ledger, the promise returned by `submitAndWait()` will be rejected with an error.\n   * @returns A promise that contains TxResponse, that will return when the transaction has been validated.\n   */\n  public async submitAndWait<\n    T extends SubmittableTransaction = SubmittableTransaction,\n  >(\n    transaction: T | string,\n    opts?: {\n      // If true, autofill a transaction.\n      autofill?: boolean\n      // If true, and the transaction fails locally, do not retry or relay the transaction to other servers.\n      failHard?: boolean\n      // A wallet to sign a transaction. It must be provided when submitting an unsigned transaction.\n      wallet?: Wallet\n    },\n  ): Promise<TxResponse<T>> {\n    const signedTx = await getSignedTx(this, transaction, opts)\n\n    const lastLedger = getLastLedgerSequence(signedTx)\n    if (lastLedger == null) {\n      throw new ValidationError(\n        'Transaction must contain a LastLedgerSequence value for reliable submission.',\n      )\n    }\n\n    const response = await submitRequest(this, signedTx, opts?.failHard)\n\n    const txHash = hashes.hashSignedTx(signedTx)\n    return waitForFinalTransactionOutcome(\n      this,\n      txHash,\n      lastLedger,\n      response.result.engine_result,\n    )\n  }\n\n  /**\n   * Deprecated: Use autofill instead, provided for users familiar with v1\n   *\n   * @param transaction - A {@link Transaction} in JSON format\n   * @param signersCount - The expected number of signers for this transaction.\n   * Only used for multisigned transactions.\n   * @deprecated Use autofill instead, provided for users familiar with v1\n   */\n  public async prepareTransaction(\n    transaction: SubmittableTransaction,\n    signersCount?: number,\n  ): ReturnType<Client['autofill']> {\n    return this.autofill(transaction, signersCount)\n  }\n\n  /**\n   * Retrieves the XRP balance of a given account address.\n   *\n   * @category Abstraction\n   *\n   * @example\n   * ```ts\n   * const client = new Client(wss://s.altnet.rippletest.net:51233)\n   * await client.connect()\n   * const balance = await client.getXrpBalance('rG1QQv2nh2gr7RCZ1P8YYcBUKCCN633jCn')\n   * console.log(balance)\n   * await client.disconnect()\n   * /// '200'\n   * ```\n   *\n   * @param address - The XRP address to retrieve the balance for.\n   * @param [options] - Additional options for fetching the balance (optional).\n   * @param [options.ledger_hash] - The hash of the ledger to retrieve the balance from (optional).\n   * @param [options.ledger_index] - The index of the ledger to retrieve the balance from (optional).\n   * @returns A promise that resolves with the XRP balance as a number.\n   */\n  public async getXrpBalance(\n    address: string,\n    options: {\n      ledger_hash?: string\n      ledger_index?: LedgerIndex\n    } = {},\n  ): Promise<number> {\n    const xrpRequest: AccountInfoRequest = {\n      command: 'account_info',\n      account: address,\n      ledger_index: options.ledger_index ?? 'validated',\n      ledger_hash: options.ledger_hash,\n    }\n    const response = await this.request(xrpRequest)\n    return dropsToXrp(response.result.account_data.Balance)\n  }\n\n  /**\n   * Get XRP/non-XRP balances for an account.\n   *\n   * @category Abstraction\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   *\n   * async function getAccountBalances(address) {\n   *   try {\n   *     const options = {\n   *       ledger_index: 'validated',\n   *       limit: 10\n   *     };\n   *\n   *     const balances = await xrplClient.getBalances(address, options);\n   *\n   *     console.log('Account Balances:');\n   *     balances.forEach((balance) => {\n   *       console.log(`Currency: ${balance.currency}`);\n   *       console.log(`Value: ${balance.value}`);\n   *       console.log(`Issuer: ${balance.issuer}`);\n   *       console.log('---');\n   *     });\n   *   } catch (error) {\n   *     console.error('Error retrieving account balances:', error);\n   *   }\n   * }\n   *\n   * const address = 'rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh';\n   * await getAccountBalances(address);\n   * await client.disconnect();\n   * ```\n   *\n   * @param address - Address of the account to retrieve balances for.\n   * @param options - Allows the client to specify a ledger_hash, ledger_index,\n   * filter by peer, and/or limit number of balances.\n   * @param options.ledger_index - Retrieve the account balances at a given\n   * ledger_index.\n   * @param options.ledger_hash - Retrieve the account balances at the ledger with\n   * a given ledger_hash.\n   * @param options.peer - Filter balances by peer.\n   * @param options.limit - Limit number of balances to return.\n   * @returns An array of XRP/non-XRP balances for the given account.\n   */\n  // eslint-disable-next-line max-lines-per-function -- Longer definition is required for end users to see the definition.\n  public async getBalances(\n    address: string,\n    options: {\n      ledger_hash?: string\n      ledger_index?: LedgerIndex\n      peer?: string\n      limit?: number\n    } = {},\n  ): Promise<\n    Array<{ value: string; currency: string; issuer?: string | undefined }>\n  > {\n    const balances: Balance[] = []\n\n    // get XRP balance\n    let xrpPromise: Promise<number> = Promise.resolve(0)\n    if (!options.peer) {\n      xrpPromise = this.getXrpBalance(address, {\n        ledger_hash: options.ledger_hash,\n        ledger_index: options.ledger_index,\n      })\n    }\n\n    // get non-XRP balances\n    const linesRequest: AccountLinesRequest = {\n      command: 'account_lines',\n      account: address,\n      ledger_index: options.ledger_index ?? 'validated',\n      ledger_hash: options.ledger_hash,\n      peer: options.peer,\n      limit: options.limit,\n    }\n    const linesPromise = this.requestAll(linesRequest)\n\n    // combine results\n    await Promise.all([xrpPromise, linesPromise]).then(\n      ([xrpBalance, linesResponses]) => {\n        const accountLinesBalance = linesResponses.flatMap((response) =>\n          formatBalances(response.result.lines),\n        )\n        if (xrpBalance !== 0) {\n          balances.push({ currency: 'XRP', value: xrpBalance.toString() })\n        }\n        balances.push(...accountLinesBalance)\n      },\n    )\n    return balances.slice(0, options.limit)\n  }\n\n  /**\n   * Fetch orderbook (buy/sell orders) between two currency pairs. This checks both sides of the orderbook\n   * by making two `order_book` requests (with the second reversing takerPays and takerGets). Returned offers are\n   * not normalized in this function, so either currency could be takerGets or takerPays.\n   *\n   * @category Abstraction\n   *\n   * @param currency1 - Specification of one currency involved. (With a currency code and optionally an issuer)\n   * @param currency2 - Specification of a second currency involved. (With a currency code and optionally an issuer)\n   * @param options - Options allowing the client to specify ledger_index,\n   * ledger_hash, filter by taker, and/or limit number of orders.\n   * @param options.ledger_index - Retrieve the orderbook at a given ledger_index.\n   * @param options.ledger_hash - Retrieve the orderbook at the ledger with a\n   * given ledger_hash.\n   * @param options.taker - Filter orders by taker.\n   * @param options.limit - The limit passed into each book_offers request.\n   * Can return more than this due to two calls being made. Defaults to 20.\n   * @returns An object containing buy and sell objects.\n   */\n\n  public async getOrderbook(\n    currency1: BookOfferCurrency,\n    currency2: BookOfferCurrency,\n    options: {\n      limit?: number\n      ledger_index?: LedgerIndex\n      ledger_hash?: string | null\n      taker?: string | null\n    } = {},\n  ): Promise<{\n    buy: BookOffer[]\n    sell: BookOffer[]\n  }> {\n    validateOrderbookOptions(options)\n\n    const request = createBookOffersRequest(currency1, currency2, options)\n\n    const directOfferResults = await requestAllOffers(this, request)\n    const reverseOfferResults = await requestAllOffers(\n      this,\n      reverseRequest(request),\n    )\n\n    const directOffers = extractOffers(directOfferResults)\n    const reverseOffers = extractOffers(reverseOfferResults)\n\n    const orders = combineOrders(directOffers, reverseOffers)\n\n    const { buy, sell } = separateBuySellOrders(orders)\n\n    /*\n     * Sort the orders\n     * for both buys and sells, lowest quality is closest to mid-market\n     * we sort the orders so that earlier orders are closer to mid-market\n     */\n    return {\n      buy: sortAndLimitOffers(buy, options.limit),\n      sell: sortAndLimitOffers(sell, options.limit),\n    }\n  }\n\n  /**\n   * Returns the index of the most recently validated ledger.\n   *\n   * @category Abstraction\n   *\n   * @returns The most recently validated ledger index.\n   *\n   * @example\n   * ```ts\n   * const { Client } = require('xrpl')\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const ledgerIndex = await client.getLedgerIndex()\n   * console.log(ledgerIndex)\n   * // 884039\n   * ```\n   */\n  public async getLedgerIndex(): Promise<number> {\n    const ledgerResponse = await this.request({\n      command: 'ledger',\n      ledger_index: 'validated',\n    })\n    return ledgerResponse.result.ledger_index\n  }\n\n  /**\n   * The fundWallet() method is used to send an amount of XRP (usually 1000) to a new (randomly generated)\n   * or existing XRP Ledger wallet.\n   *\n   * @category Faucet\n   *\n   * @example\n   *\n   * Example 1: Fund a randomly generated wallet\n   * const { Client, Wallet } = require('xrpl')\n   *\n   * const client = new Client('wss://s.altnet.rippletest.net:51233')\n   * await client.connect()\n   * const { balance, wallet } = await client.fundWallet()\n   *\n   * Under the hood, this will use `Wallet.generate()` to create a new random wallet, then ask a testnet faucet\n   * To send it XRP on ledger to make it a real account. If successful, this will return the new account balance in XRP\n   * Along with the Wallet object to track the keys for that account. If you'd like, you can also re-fill an existing\n   * Account by passing in a Wallet you already have.\n   * ```ts\n   * const api = new xrpl.Client(\"wss://s.altnet.rippletest.net:51233\")\n   * await api.connect()\n   * const { wallet, balance } = await api.fundWallet()\n   * ```\n   *\n   * Example 2: Fund wallet using a custom faucet host and known wallet address\n   *\n   * `fundWallet` will try to infer the url of a faucet API from the network your client is connected to.\n   * There are hardcoded default faucets for popular test networks like testnet and devnet.\n   * However, if you're working with a newer or more obscure network, you may have to specify the faucetHost\n   * And faucetPath so `fundWallet` can ask that faucet to fund your wallet.\n   *\n   * ```ts\n   * const newWallet = Wallet.generate()\n   * const { balance, wallet  } = await client.fundWallet(newWallet, {\n   *       amount: '10',\n   *       faucetHost: 'https://custom-faucet.example.com',\n   *       faucetPath: '/accounts'\n   *     })\n   *     console.log(`Sent 10 XRP to wallet: ${address} from the given faucet. Resulting balance: ${balance} XRP`)\n   *   } catch (error) {\n   *     console.error(`Failed to fund wallet: ${error}`)\n   *   }\n   * }\n   * ```\n   *\n   * @param wallet - An existing XRPL Wallet to fund. If undefined or null, a new Wallet will be created.\n   * @param options - See below.\n   * @param options.faucetHost - A custom host for a faucet server. On devnet,\n   * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct server automatically. In other environments,\n   * or if you would like to customize the faucet host in devnet or testnet,\n   * you should provide the host using this option.\n   * @param options.faucetPath - A custom path for a faucet server. On devnet,\n   * testnet, AMM devnet, and HooksV3 testnet, `fundWallet` will\n   * attempt to determine the correct path automatically. In other environments,\n   * or if you would like to customize the faucet path in devnet or testnet,\n   * you should provide the path using this option.\n   * Ex: client.fundWallet(null,{'faucet.altnet.rippletest.net', '/accounts'})\n   * specifies a request to 'faucet.altnet.rippletest.net/accounts' to fund a new wallet.\n   * @param options.amount - A custom amount to fund, if undefined or null, the default amount will be 1000.\n   * @returns A Wallet on the Testnet or Devnet that contains some amount of XRP,\n   * and that wallet's balance in XRP.\n   * @throws When either Client isn't connected or unable to fund wallet address.\n   */\n  public async fundWallet(\n    this: Client,\n    wallet?: Wallet | null,\n    options: FundingOptions = {},\n  ): Promise<{\n    wallet: Wallet\n    balance: number\n  }> {\n    if (!this.isConnected()) {\n      throw new RippledError('Client not connected, cannot call faucet')\n    }\n    const existingWallet = Boolean(wallet)\n\n    // Generate a new Wallet if no existing Wallet is provided or its address is invalid to fund\n    const walletToFund =\n      wallet && isValidClassicAddress(wallet.classicAddress)\n        ? wallet\n        : Wallet.generate()\n\n    // Create the POST request body\n    const postBody: FaucetRequestBody = {\n      destination: walletToFund.classicAddress,\n      xrpAmount: options.amount,\n      usageContext: options.usageContext,\n      userAgent: 'xrpl.js',\n    }\n\n    let startingBalance = 0\n    if (existingWallet) {\n      try {\n        startingBalance = Number(\n          await this.getXrpBalance(walletToFund.classicAddress),\n        )\n      } catch {\n        /* startingBalance remains what it was previously */\n      }\n    }\n\n    return requestFunding(\n      options,\n      this,\n      startingBalance,\n      walletToFund,\n      postBody,\n    )\n  }\n}\n\nexport { Client }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}