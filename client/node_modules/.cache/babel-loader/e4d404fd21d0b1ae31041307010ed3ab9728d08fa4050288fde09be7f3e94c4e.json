{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst errors_1 = require(\"../../../errors\");\nconst HashPrefix_1 = __importDefault(require(\"../HashPrefix\"));\nconst sha512Half_1 = __importDefault(require(\"../sha512Half\"));\nconst node_1 = require(\"./node\");\nconst HEX = 16;\nclass LeafNode extends node_1.Node {\n  constructor(tag, data, type) {\n    super();\n    this.tag = tag;\n    this.type = type;\n    this.data = data;\n  }\n  get hash() {\n    switch (this.type) {\n      case node_1.NodeType.ACCOUNT_STATE:\n        {\n          const leafPrefix = HashPrefix_1.default.LEAF_NODE.toString(HEX);\n          return (0, sha512Half_1.default)(leafPrefix + this.data + this.tag);\n        }\n      case node_1.NodeType.TRANSACTION_NO_METADATA:\n        {\n          const txIDPrefix = HashPrefix_1.default.TRANSACTION_ID.toString(HEX);\n          return (0, sha512Half_1.default)(txIDPrefix + this.data);\n        }\n      case node_1.NodeType.TRANSACTION_METADATA:\n        {\n          const txNodePrefix = HashPrefix_1.default.TRANSACTION_NODE.toString(HEX);\n          return (0, sha512Half_1.default)(txNodePrefix + this.data + this.tag);\n        }\n      default:\n        throw new errors_1.XrplError('Tried to hash a SHAMap node of unknown type.');\n    }\n  }\n  addItem(tag, node) {\n    throw new errors_1.XrplError('Cannot call addItem on a LeafNode');\n    this.addItem(tag, node);\n  }\n}\nexports.default = LeafNode;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","errors_1","require","HashPrefix_1","sha512Half_1","node_1","HEX","LeafNode","Node","constructor","tag","data","type","hash","NodeType","ACCOUNT_STATE","leafPrefix","default","LEAF_NODE","toString","TRANSACTION_NO_METADATA","txIDPrefix","TRANSACTION_ID","TRANSACTION_METADATA","txNodePrefix","TRANSACTION_NODE","XrplError","addItem","node"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/hashes/SHAMap/LeafNode.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../../../errors\");\nconst HashPrefix_1 = __importDefault(require(\"../HashPrefix\"));\nconst sha512Half_1 = __importDefault(require(\"../sha512Half\"));\nconst node_1 = require(\"./node\");\nconst HEX = 16;\nclass LeafNode extends node_1.Node {\n    constructor(tag, data, type) {\n        super();\n        this.tag = tag;\n        this.type = type;\n        this.data = data;\n    }\n    get hash() {\n        switch (this.type) {\n            case node_1.NodeType.ACCOUNT_STATE: {\n                const leafPrefix = HashPrefix_1.default.LEAF_NODE.toString(HEX);\n                return (0, sha512Half_1.default)(leafPrefix + this.data + this.tag);\n            }\n            case node_1.NodeType.TRANSACTION_NO_METADATA: {\n                const txIDPrefix = HashPrefix_1.default.TRANSACTION_ID.toString(HEX);\n                return (0, sha512Half_1.default)(txIDPrefix + this.data);\n            }\n            case node_1.NodeType.TRANSACTION_METADATA: {\n                const txNodePrefix = HashPrefix_1.default.TRANSACTION_NODE.toString(HEX);\n                return (0, sha512Half_1.default)(txNodePrefix + this.data + this.tag);\n            }\n            default:\n                throw new errors_1.XrplError('Tried to hash a SHAMap node of unknown type.');\n        }\n    }\n    addItem(tag, node) {\n        throw new errors_1.XrplError('Cannot call addItem on a LeafNode');\n        this.addItem(tag, node);\n    }\n}\nexports.default = LeafNode;\n//# sourceMappingURL=LeafNode.js.map"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,QAAQ,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMC,YAAY,GAAGT,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9D,MAAME,YAAY,GAAGV,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9D,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,GAAG,GAAG,EAAE;AACd,MAAMC,QAAQ,SAASF,MAAM,CAACG,IAAI,CAAC;EAC/BC,WAAWA,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACzB,KAAK,CAAC,CAAC;IACP,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EACA,IAAIE,IAAIA,CAAA,EAAG;IACP,QAAQ,IAAI,CAACD,IAAI;MACb,KAAKP,MAAM,CAACS,QAAQ,CAACC,aAAa;QAAE;UAChC,MAAMC,UAAU,GAAGb,YAAY,CAACc,OAAO,CAACC,SAAS,CAACC,QAAQ,CAACb,GAAG,CAAC;UAC/D,OAAO,CAAC,CAAC,EAAEF,YAAY,CAACa,OAAO,EAAED,UAAU,GAAG,IAAI,CAACL,IAAI,GAAG,IAAI,CAACD,GAAG,CAAC;QACvE;MACA,KAAKL,MAAM,CAACS,QAAQ,CAACM,uBAAuB;QAAE;UAC1C,MAAMC,UAAU,GAAGlB,YAAY,CAACc,OAAO,CAACK,cAAc,CAACH,QAAQ,CAACb,GAAG,CAAC;UACpE,OAAO,CAAC,CAAC,EAAEF,YAAY,CAACa,OAAO,EAAEI,UAAU,GAAG,IAAI,CAACV,IAAI,CAAC;QAC5D;MACA,KAAKN,MAAM,CAACS,QAAQ,CAACS,oBAAoB;QAAE;UACvC,MAAMC,YAAY,GAAGrB,YAAY,CAACc,OAAO,CAACQ,gBAAgB,CAACN,QAAQ,CAACb,GAAG,CAAC;UACxE,OAAO,CAAC,CAAC,EAAEF,YAAY,CAACa,OAAO,EAAEO,YAAY,GAAG,IAAI,CAACb,IAAI,GAAG,IAAI,CAACD,GAAG,CAAC;QACzE;MACA;QACI,MAAM,IAAIT,QAAQ,CAACyB,SAAS,CAAC,8CAA8C,CAAC;IACpF;EACJ;EACAC,OAAOA,CAACjB,GAAG,EAAEkB,IAAI,EAAE;IACf,MAAM,IAAI3B,QAAQ,CAACyB,SAAS,CAAC,mCAAmC,CAAC;IACjE,IAAI,CAACC,OAAO,CAACjB,GAAG,EAAEkB,IAAI,CAAC;EAC3B;AACJ;AACA7B,OAAO,CAACkB,OAAO,GAAGV,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}