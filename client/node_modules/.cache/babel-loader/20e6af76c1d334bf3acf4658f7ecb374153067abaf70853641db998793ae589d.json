{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.xrpToDrops = exports.dropsToXrp = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst DROPS_PER_XRP = 1000000.0;\nconst MAX_FRACTION_LENGTH = 6;\nconst BASE_TEN = 10;\nconst SANITY_CHECK = /^-?[0-9.]+$/u;\nfunction dropsToXrp(dropsToConvert) {\n  const drops = new bignumber_js_1.default(dropsToConvert).toString(BASE_TEN);\n  if (typeof dropsToConvert === 'string' && drops === 'NaN') {\n    throw new errors_1.ValidationError(`dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`);\n  }\n  if (drops.includes('.')) {\n    throw new errors_1.ValidationError(`dropsToXrp: value '${drops}' has too many decimal places.`);\n  }\n  if (!SANITY_CHECK.exec(drops)) {\n    throw new errors_1.ValidationError(`dropsToXrp: failed sanity check -` + ` value '${drops}',` + ` does not match (^-?[0-9]+$).`);\n  }\n  return new bignumber_js_1.default(drops).dividedBy(DROPS_PER_XRP).toNumber();\n}\nexports.dropsToXrp = dropsToXrp;\nfunction xrpToDrops(xrpToConvert) {\n  const xrp = new bignumber_js_1.default(xrpToConvert).toString(BASE_TEN);\n  if (typeof xrpToConvert === 'string' && xrp === 'NaN') {\n    throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`);\n  }\n  if (!SANITY_CHECK.exec(xrp)) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`);\n  }\n  const components = xrp.split('.');\n  if (components.length > 2) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`);\n  }\n  const fraction = components[1] || '0';\n  if (fraction.length > MAX_FRACTION_LENGTH) {\n    throw new errors_1.ValidationError(`xrpToDrops: value '${xrp}' has too many decimal places.`);\n  }\n  return new bignumber_js_1.default(xrp).times(DROPS_PER_XRP).integerValue(bignumber_js_1.default.ROUND_FLOOR).toString(BASE_TEN);\n}\nexports.xrpToDrops = xrpToDrops;","map":{"version":3,"names":["bignumber_js_1","__importDefault","require","errors_1","DROPS_PER_XRP","MAX_FRACTION_LENGTH","BASE_TEN","SANITY_CHECK","dropsToXrp","dropsToConvert","drops","default","toString","ValidationError","includes","exec","dividedBy","toNumber","exports","xrpToDrops","xrpToConvert","xrp","components","split","length","fraction","times","integerValue","ROUND_FLOOR"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/xrpConversion.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\n\nimport { ValidationError } from '../errors'\n\nconst DROPS_PER_XRP = 1000000.0\nconst MAX_FRACTION_LENGTH = 6\nconst BASE_TEN = 10\nconst SANITY_CHECK = /^-?[0-9.]+$/u\n\n/**\n * Convert Drops to XRP.\n *\n * @param dropsToConvert - Drops to convert to XRP. This can be a string, number, or BigNumber.\n * @returns Amount in XRP.\n * @throws When drops amount is invalid.\n * @category Utilities\n */\nexport function dropsToXrp(dropsToConvert: BigNumber.Value): number {\n  /*\n   * Converting to BigNumber and then back to string should remove any\n   * decimal point followed by zeros, e.g. '1.00'.\n   * Important: specify base BASE_10 to avoid exponential notation, e.g. '1e-7'.\n   */\n  const drops = new BigNumber(dropsToConvert).toString(BASE_TEN)\n\n  // check that the value is valid and actually a number\n  if (typeof dropsToConvert === 'string' && drops === 'NaN') {\n    throw new ValidationError(\n      `dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`,\n    )\n  }\n\n  // drops are only whole units\n  if (drops.includes('.')) {\n    throw new ValidationError(\n      `dropsToXrp: value '${drops}' has too many decimal places.`,\n    )\n  }\n\n  /*\n   * This should never happen; the value has already been\n   * validated above. This just ensures BigNumber did not do\n   * something unexpected.\n   */\n  if (!SANITY_CHECK.exec(drops)) {\n    throw new ValidationError(\n      `dropsToXrp: failed sanity check -` +\n        ` value '${drops}',` +\n        ` does not match (^-?[0-9]+$).`,\n    )\n  }\n\n  return new BigNumber(drops).dividedBy(DROPS_PER_XRP).toNumber()\n}\n\n/**\n * Convert an amount in XRP to an amount in drops.\n *\n * @param xrpToConvert - Amount in XRP.\n * @returns Amount in drops.\n * @throws When amount in xrp is invalid.\n * @category Utilities\n */\nexport function xrpToDrops(xrpToConvert: BigNumber.Value): string {\n  // Important: specify base BASE_TEN to avoid exponential notation, e.g. '1e-7'.\n  const xrp = new BigNumber(xrpToConvert).toString(BASE_TEN)\n\n  // check that the value is valid and actually a number\n  if (typeof xrpToConvert === 'string' && xrp === 'NaN') {\n    throw new ValidationError(\n      `xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`,\n    )\n  }\n\n  /*\n   * This should never happen; the value has already been\n   * validated above. This just ensures BigNumber did not do\n   * something unexpected.\n   */\n  if (!SANITY_CHECK.exec(xrp)) {\n    throw new ValidationError(\n      `xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`,\n    )\n  }\n\n  const components = xrp.split('.')\n  if (components.length > 2) {\n    throw new ValidationError(\n      `xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`,\n    )\n  }\n\n  const fraction = components[1] || '0'\n  if (fraction.length > MAX_FRACTION_LENGTH) {\n    throw new ValidationError(\n      `xrpToDrops: value '${xrp}' has too many decimal places.`,\n    )\n  }\n\n  return new BigNumber(xrp)\n    .times(DROPS_PER_XRP)\n    .integerValue(BigNumber.ROUND_FLOOR)\n    .toString(BASE_TEN)\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,cAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAEA,MAAME,aAAa,GAAG,SAAS;AAC/B,MAAMC,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,QAAQ,GAAG,EAAE;AACnB,MAAMC,YAAY,GAAG,cAAc;AAUnC,SAAgBC,UAAUA,CAACC,cAA+B;EAMxD,MAAMC,KAAK,GAAG,IAAIV,cAAA,CAAAW,OAAS,CAACF,cAAc,CAAC,CAACG,QAAQ,CAACN,QAAQ,CAAC;EAG9D,IAAI,OAAOG,cAAc,KAAK,QAAQ,IAAIC,KAAK,KAAK,KAAK,EAAE;IACzD,MAAM,IAAIP,QAAA,CAAAU,eAAe,CACvB,8BAA8BJ,cAAc,oDAAoD,CACjG;;EAIH,IAAIC,KAAK,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvB,MAAM,IAAIX,QAAA,CAAAU,eAAe,CACvB,sBAAsBH,KAAK,gCAAgC,CAC5D;;EAQH,IAAI,CAACH,YAAY,CAACQ,IAAI,CAACL,KAAK,CAAC,EAAE;IAC7B,MAAM,IAAIP,QAAA,CAAAU,eAAe,CACvB,mCAAmC,GACjC,WAAWH,KAAK,IAAI,GACpB,+BAA+B,CAClC;;EAGH,OAAO,IAAIV,cAAA,CAAAW,OAAS,CAACD,KAAK,CAAC,CAACM,SAAS,CAACZ,aAAa,CAAC,CAACa,QAAQ,EAAE;AACjE;AApCAC,OAAA,CAAAV,UAAA,GAAAA,UAAA;AA8CA,SAAgBW,UAAUA,CAACC,YAA6B;EAEtD,MAAMC,GAAG,GAAG,IAAIrB,cAAA,CAAAW,OAAS,CAACS,YAAY,CAAC,CAACR,QAAQ,CAACN,QAAQ,CAAC;EAG1D,IAAI,OAAOc,YAAY,KAAK,QAAQ,IAAIC,GAAG,KAAK,KAAK,EAAE;IACrD,MAAM,IAAIlB,QAAA,CAAAU,eAAe,CACvB,8BAA8BO,YAAY,oDAAoD,CAC/F;;EAQH,IAAI,CAACb,YAAY,CAACQ,IAAI,CAACM,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAIlB,QAAA,CAAAU,eAAe,CACvB,4CAA4CQ,GAAG,kCAAkC,CAClF;;EAGH,MAAMC,UAAU,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EACjC,IAAID,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACzB,MAAM,IAAIrB,QAAA,CAAAU,eAAe,CACvB,4CAA4CQ,GAAG,gCAAgC,CAChF;;EAGH,MAAMI,QAAQ,GAAGH,UAAU,CAAC,CAAC,CAAC,IAAI,GAAG;EACrC,IAAIG,QAAQ,CAACD,MAAM,GAAGnB,mBAAmB,EAAE;IACzC,MAAM,IAAIF,QAAA,CAAAU,eAAe,CACvB,sBAAsBQ,GAAG,gCAAgC,CAC1D;;EAGH,OAAO,IAAIrB,cAAA,CAAAW,OAAS,CAACU,GAAG,CAAC,CACtBK,KAAK,CAACtB,aAAa,CAAC,CACpBuB,YAAY,CAAC3B,cAAA,CAAAW,OAAS,CAACiB,WAAW,CAAC,CACnChB,QAAQ,CAACN,QAAQ,CAAC;AACvB;AAxCAY,OAAA,CAAAC,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}