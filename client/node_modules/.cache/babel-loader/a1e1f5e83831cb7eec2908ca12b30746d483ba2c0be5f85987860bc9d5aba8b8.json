{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt = void 0;\nconst serialized_type_1 = require(\"./serialized-type\");\n/**\n * Compare numbers and bigInts n1 and n2\n *\n * @param n1 First object to compare\n * @param n2 Second object to compare\n * @returns -1, 0, or 1, depending on how the two objects compare\n */\nfunction compare(n1, n2) {\n  return n1 < n2 ? -1 : n1 == n2 ? 0 : 1;\n}\n/**\n * Base class for serializing and deserializing unsigned integers.\n */\nclass UInt extends serialized_type_1.Comparable {\n  constructor(bytes) {\n    super(bytes);\n  }\n  /**\n   * Overload of compareTo for Comparable\n   *\n   * @param other other UInt to compare this to\n   * @returns -1, 0, or 1 depending on how the objects relate to each other\n   */\n  compareTo(other) {\n    return compare(this.valueOf(), other.valueOf());\n  }\n  /**\n   * Convert a UInt object to JSON\n   *\n   * @returns number or string represented by this.bytes\n   */\n  toJSON() {\n    const val = this.valueOf();\n    return typeof val === 'number' ? val : val.toString();\n  }\n  static checkUintRange(val, min, max) {\n    if (val < min || val > max) {\n      throw new Error(`Invalid ${this.constructor.name}: ${val} must be >= ${min} and <= ${max}`);\n    }\n  }\n}\nexports.UInt = UInt;","map":{"version":3,"names":["serialized_type_1","require","compare","n1","n2","UInt","Comparable","constructor","bytes","compareTo","other","valueOf","toJSON","val","toString","checkUintRange","min","max","Error","name","exports"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-binary-codec/src/types/uint.ts"],"sourcesContent":["import { Comparable } from './serialized-type'\n\n/**\n * Compare numbers and bigInts n1 and n2\n *\n * @param n1 First object to compare\n * @param n2 Second object to compare\n * @returns -1, 0, or 1, depending on how the two objects compare\n */\nfunction compare(n1: number | bigint, n2: number | bigint): number {\n  return n1 < n2 ? -1 : n1 == n2 ? 0 : 1\n}\n\n/**\n * Base class for serializing and deserializing unsigned integers.\n */\nabstract class UInt extends Comparable<UInt | number> {\n  protected static width: number\n\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n  }\n\n  /**\n   * Overload of compareTo for Comparable\n   *\n   * @param other other UInt to compare this to\n   * @returns -1, 0, or 1 depending on how the objects relate to each other\n   */\n  compareTo(other: UInt | number): number {\n    return compare(this.valueOf(), other.valueOf())\n  }\n\n  /**\n   * Convert a UInt object to JSON\n   *\n   * @returns number or string represented by this.bytes\n   */\n  toJSON(): number | string {\n    const val = this.valueOf()\n    return typeof val === 'number' ? val : val.toString()\n  }\n\n  /**\n   * Get the value of the UInt represented by this.bytes\n   *\n   * @returns the value\n   */\n  abstract valueOf(): number | bigint\n\n  static checkUintRange(val: number, min: number, max: number): void {\n    if (val < min || val > max) {\n      throw new Error(\n        `Invalid ${this.constructor.name}: ${val} must be >= ${min} and <= ${max}`,\n      )\n    }\n  }\n}\n\nexport { UInt }\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,GAAAC,OAAA;AAEA;;;;;;;AAOA,SAASC,OAAOA,CAACC,EAAmB,EAAEC,EAAmB;EACvD,OAAOD,EAAE,GAAGC,EAAE,GAAG,CAAC,CAAC,GAAGD,EAAE,IAAIC,EAAE,GAAG,CAAC,GAAG,CAAC;AACxC;AAEA;;;AAGA,MAAeC,IAAK,SAAQL,iBAAA,CAAAM,UAAyB;EAGnDC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,CAAC;EACd;EAEA;;;;;;EAMAC,SAASA,CAACC,KAAoB;IAC5B,OAAOR,OAAO,CAAC,IAAI,CAACS,OAAO,EAAE,EAAED,KAAK,CAACC,OAAO,EAAE,CAAC;EACjD;EAEA;;;;;EAKAC,MAAMA,CAAA;IACJ,MAAMC,GAAG,GAAG,IAAI,CAACF,OAAO,EAAE;IAC1B,OAAO,OAAOE,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,CAACC,QAAQ,EAAE;EACvD;EASA,OAAOC,cAAcA,CAACF,GAAW,EAAEG,GAAW,EAAEC,GAAW;IACzD,IAAIJ,GAAG,GAAGG,GAAG,IAAIH,GAAG,GAAGI,GAAG,EAAE;MAC1B,MAAM,IAAIC,KAAK,CACb,WAAW,IAAI,CAACX,WAAW,CAACY,IAAI,KAAKN,GAAG,eAAeG,GAAG,WAAWC,GAAG,EAAE,CAC3E;;EAEL;;AAGOG,OAAA,CAAAf,IAAA,GAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}