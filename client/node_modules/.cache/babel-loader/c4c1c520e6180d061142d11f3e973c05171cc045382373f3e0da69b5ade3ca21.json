{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateXChainAddClaimAttestation = void 0;\nconst common_1 = require(\"./common\");\nfunction validateXChainAddClaimAttestation(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'Amount', common_1.isAmount);\n  (0, common_1.validateRequiredField)(tx, 'AttestationRewardAccount', common_1.isAccount);\n  (0, common_1.validateRequiredField)(tx, 'AttestationSignerAccount', common_1.isAccount);\n  (0, common_1.validateOptionalField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateRequiredField)(tx, 'OtherChainSource', common_1.isAccount);\n  (0, common_1.validateRequiredField)(tx, 'PublicKey', common_1.isString);\n  (0, common_1.validateRequiredField)(tx, 'Signature', common_1.isString);\n  (0, common_1.validateRequiredField)(tx, 'WasLockingChainSend', inp => inp === 0 || inp === 1);\n  (0, common_1.validateRequiredField)(tx, 'XChainBridge', common_1.isXChainBridge);\n  (0, common_1.validateRequiredField)(tx, 'XChainClaimID', inp => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));\n}\nexports.validateXChainAddClaimAttestation = validateXChainAddClaimAttestation;","map":{"version":3,"names":["common_1","require","validateXChainAddClaimAttestation","tx","validateBaseTransaction","validateRequiredField","isAmount","isAccount","validateOptionalField","isString","inp","isXChainBridge","isNumber","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/XChainAddClaimAttestation.ts"],"sourcesContent":["import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainAddClaimAttestation transaction provides proof from a witness server,\n * attesting to an {@link XChainCommit} transaction.\n *\n * @category Transaction Models\n */\nexport interface XChainAddClaimAttestation extends BaseTransaction {\n  TransactionType: 'XChainAddClaimAttestation'\n\n  /**\n   * The amount committed by the {@link XChainCommit} transaction on the source chain.\n   */\n  Amount: Amount\n\n  /**\n   * The account that should receive this signer's share of the SignatureReward.\n   */\n  AttestationRewardAccount: Account\n\n  /**\n   * The account on the door account's signer list that is signing the transaction.\n   */\n  AttestationSignerAccount: Account\n\n  /**\n   * The destination account for the funds on the destination chain (taken from\n   * the {@link XChainCommit} transaction).\n   */\n  Destination?: Account\n\n  /**\n   * The account on the source chain that submitted the {@link XChainCommit}\n   * transaction that triggered the event associated with the attestation.\n   */\n  OtherChainSource: Account\n\n  /**\n   * The public key used to verify the attestation signature.\n   */\n  PublicKey: string\n\n  /**\n   * The signature attesting to the event on the other chain.\n   */\n  Signature: string\n\n  /**\n   * A boolean representing the chain where the event occurred.\n   */\n  WasLockingChainSend: 0 | 1\n\n  /**\n   * The bridge to use to transfer funds.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The XChainClaimID associated with the transfer, which was included in the\n   * {@link XChainCommit} transaction.\n   */\n  XChainClaimID: number | string\n}\n\n/**\n * Verify the form and type of an XChainAddClaimAttestation at runtime.\n *\n * @param tx - An XChainAddClaimAttestation Transaction.\n * @throws When the XChainAddClaimAttestation is malformed.\n */\nexport function validateXChainAddClaimAttestation(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n\n  validateRequiredField(tx, 'AttestationRewardAccount', isAccount)\n\n  validateRequiredField(tx, 'AttestationSignerAccount', isAccount)\n\n  validateOptionalField(tx, 'Destination', isAccount)\n\n  validateRequiredField(tx, 'OtherChainSource', isAccount)\n\n  validateRequiredField(tx, 'PublicKey', isString)\n\n  validateRequiredField(tx, 'Signature', isString)\n\n  validateRequiredField(\n    tx,\n    'WasLockingChainSend',\n    (inp) => inp === 0 || inp === 1,\n  )\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AAkFA,SAAgBC,iCAAiCA,CAC/CC,EAA2B;EAE3B,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,QAAQ,EAAEH,QAAA,CAAAM,QAAQ,CAAC;EAE7C,IAAAN,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,0BAA0B,EAAEH,QAAA,CAAAO,SAAS,CAAC;EAEhE,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,0BAA0B,EAAEH,QAAA,CAAAO,SAAS,CAAC;EAEhE,IAAAP,QAAA,CAAAQ,qBAAqB,EAACL,EAAE,EAAE,aAAa,EAAEH,QAAA,CAAAO,SAAS,CAAC;EAEnD,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,kBAAkB,EAAEH,QAAA,CAAAO,SAAS,CAAC;EAExD,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,WAAW,EAAEH,QAAA,CAAAS,QAAQ,CAAC;EAEhD,IAAAT,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,WAAW,EAAEH,QAAA,CAAAS,QAAQ,CAAC;EAEhD,IAAAT,QAAA,CAAAK,qBAAqB,EACnBF,EAAE,EACF,qBAAqB,EACpBO,GAAG,IAAKA,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,CAChC;EAED,IAAAV,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,cAAc,EAAEH,QAAA,CAAAW,cAAc,CAAC;EAEzD,IAAAX,QAAA,CAAAK,qBAAqB,EACnBF,EAAE,EACF,eAAe,EACdO,GAAG,IAAK,IAAAV,QAAA,CAAAY,QAAQ,EAACF,GAAG,CAAC,IAAI,IAAAV,QAAA,CAAAS,QAAQ,EAACC,GAAG,CAAC,CACxC;AACH;AAhCAG,OAAA,CAAAX,iCAAA,GAAAA,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}