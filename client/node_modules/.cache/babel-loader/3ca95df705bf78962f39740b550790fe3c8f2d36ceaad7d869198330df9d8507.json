{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateXChainCommit = void 0;\nconst common_1 = require(\"./common\");\nfunction validateXChainCommit(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'XChainBridge', common_1.isXChainBridge);\n  (0, common_1.validateRequiredField)(tx, 'XChainClaimID', inp => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));\n  (0, common_1.validateOptionalField)(tx, 'OtherChainDestination', common_1.isAccount);\n  (0, common_1.validateRequiredField)(tx, 'Amount', common_1.isAmount);\n}\nexports.validateXChainCommit = validateXChainCommit;","map":{"version":3,"names":["common_1","require","validateXChainCommit","tx","validateBaseTransaction","validateRequiredField","isXChainBridge","inp","isNumber","isString","validateOptionalField","isAccount","isAmount","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/XChainCommit.ts"],"sourcesContent":["import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainCommit is the second step in a cross-chain transfer. It puts assets\n * into trust on the locking chain so that they can be wrapped on the issuing\n * chain, or burns wrapped assets on the issuing chain so that they can be returned\n * on the locking chain.\n *\n * @category Transaction Models\n */\nexport interface XChainCommit extends BaseTransaction {\n  TransactionType: 'XChainCommit'\n\n  /**\n   * The bridge to use to transfer funds.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The unique integer ID for a cross-chain transfer. This must be acquired on\n   * the destination chain (via a {@link XChainCreateClaimID} transaction) and\n   * checked from a validated ledger before submitting this transaction. If an\n   * incorrect sequence number is specified, the funds will be lost.\n   */\n  XChainClaimID: number | string\n\n  /**\n   * The destination account on the destination chain. If this is not specified,\n   * the account that submitted the {@link XChainCreateClaimID} transaction on the\n   * destination chain will need to submit a {@link XChainClaim} transaction to\n   * claim the funds.\n   */\n  OtherChainDestination?: Account\n\n  /**\n   * The asset to commit, and the quantity. This must match the door account's\n   * LockingChainIssue (if on the locking chain) or the door account's\n   * IssuingChainIssue (if on the issuing chain).\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainCommit at runtime.\n *\n * @param tx - An XChainCommit Transaction.\n * @throws When the XChainCommit is malformed.\n */\nexport function validateXChainCommit(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n\n  validateOptionalField(tx, 'OtherChainDestination', isAccount)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AA2DA,SAAgBC,oBAAoBA,CAACC,EAA2B;EAC9D,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,cAAc,EAAEH,QAAA,CAAAM,cAAc,CAAC;EAEzD,IAAAN,QAAA,CAAAK,qBAAqB,EACnBF,EAAE,EACF,eAAe,EACdI,GAAG,IAAK,IAAAP,QAAA,CAAAQ,QAAQ,EAACD,GAAG,CAAC,IAAI,IAAAP,QAAA,CAAAS,QAAQ,EAACF,GAAG,CAAC,CACxC;EAED,IAAAP,QAAA,CAAAU,qBAAqB,EAACP,EAAE,EAAE,uBAAuB,EAAEH,QAAA,CAAAW,SAAS,CAAC;EAE7D,IAAAX,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,QAAQ,EAAEH,QAAA,CAAAY,QAAQ,CAAC;AAC/C;AAdAC,OAAA,CAAAX,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}