{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashStateTree = exports.hashTxTree = exports.hashLedgerHeader = exports.hashSignedTx = void 0;\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst errors_1 = require(\"../../errors\");\nconst HashPrefix_1 = __importDefault(require(\"./HashPrefix\"));\nconst sha512Half_1 = __importDefault(require(\"./sha512Half\"));\nconst SHAMap_1 = __importStar(require(\"./SHAMap\"));\nconst HEX = 16;\nfunction intToHex(integer, byteLength) {\n  const foo = Number(integer).toString(HEX).padStart(byteLength * 2, '0');\n  return foo;\n}\nfunction bigintToHex(integerString, byteLength) {\n  const hex = new bignumber_js_1.default(integerString).toString(HEX);\n  return hex.padStart(byteLength * 2, '0');\n}\nfunction addLengthPrefix(hex) {\n  const length = hex.length / 2;\n  if (length <= 192) {\n    return (0, utils_1.bytesToHex)([length]) + hex;\n  }\n  if (length <= 12480) {\n    const prefix = length - 193;\n    return (0, utils_1.bytesToHex)([193 + (prefix >>> 8), prefix & 0xff]) + hex;\n  }\n  if (length <= 918744) {\n    const prefix = length - 12481;\n    return (0, utils_1.bytesToHex)([241 + (prefix >>> 16), prefix >>> 8 & 0xff, prefix & 0xff]) + hex;\n  }\n  throw new errors_1.XrplError('Variable integer overflow.');\n}\nfunction hashSignedTx(tx) {\n  let txBlob;\n  let txObject;\n  if (typeof tx === 'string') {\n    txBlob = tx;\n    txObject = (0, ripple_binary_codec_1.decode)(tx);\n  } else {\n    txBlob = (0, ripple_binary_codec_1.encode)(tx);\n    txObject = tx;\n  }\n  if (txObject.TxnSignature === undefined && txObject.Signers === undefined && txObject.SigningPubKey === undefined) {\n    throw new errors_1.ValidationError('The transaction must be signed to hash it.');\n  }\n  const prefix = HashPrefix_1.default.TRANSACTION_ID.toString(16).toUpperCase();\n  return (0, sha512Half_1.default)(prefix.concat(txBlob));\n}\nexports.hashSignedTx = hashSignedTx;\nfunction hashLedgerHeader(ledgerHeader) {\n  const prefix = HashPrefix_1.default.LEDGER.toString(HEX).toUpperCase();\n  const ledger = prefix + intToHex(Number(ledgerHeader.ledger_index), 4) + bigintToHex(ledgerHeader.total_coins, 8) + ledgerHeader.parent_hash + ledgerHeader.transaction_hash + ledgerHeader.account_hash + intToHex(ledgerHeader.parent_close_time, 4) + intToHex(ledgerHeader.close_time, 4) + intToHex(ledgerHeader.close_time_resolution, 1) + intToHex(ledgerHeader.close_flags, 1);\n  return (0, sha512Half_1.default)(ledger);\n}\nexports.hashLedgerHeader = hashLedgerHeader;\nfunction hashTxTree(transactions) {\n  var _a;\n  const shamap = new SHAMap_1.default();\n  for (const txJSON of transactions) {\n    const txBlobHex = (0, ripple_binary_codec_1.encode)(txJSON);\n    const metaHex = (0, ripple_binary_codec_1.encode)((_a = txJSON.metaData) !== null && _a !== void 0 ? _a : {});\n    const txHash = hashSignedTx(txBlobHex);\n    const data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex);\n    shamap.addItem(txHash, data, SHAMap_1.NodeType.TRANSACTION_METADATA);\n  }\n  return shamap.hash;\n}\nexports.hashTxTree = hashTxTree;\nfunction hashStateTree(entries) {\n  const shamap = new SHAMap_1.default();\n  entries.forEach(ledgerEntry => {\n    const data = (0, ripple_binary_codec_1.encode)(ledgerEntry);\n    shamap.addItem(ledgerEntry.index, data, SHAMap_1.NodeType.ACCOUNT_STATE);\n  });\n  return shamap.hash;\n}\nexports.hashStateTree = hashStateTree;\nfunction computeTransactionHash(ledger, options) {\n  const {\n    transaction_hash\n  } = ledger;\n  if (!options.computeTreeHashes) {\n    return transaction_hash;\n  }\n  if (ledger.transactions == null) {\n    throw new errors_1.ValidationError('transactions is missing from the ledger');\n  }\n  const transactionHash = hashTxTree(ledger.transactions);\n  if (transaction_hash !== transactionHash) {\n    throw new errors_1.ValidationError('transactionHash in header' + ' does not match computed hash of transactions', {\n      transactionHashInHeader: transaction_hash,\n      computedHashOfTransactions: transactionHash\n    });\n  }\n  return transactionHash;\n}\nfunction computeStateHash(ledger, options) {\n  const {\n    account_hash\n  } = ledger;\n  if (!options.computeTreeHashes) {\n    return account_hash;\n  }\n  if (ledger.accountState == null) {\n    throw new errors_1.ValidationError('accountState is missing from the ledger');\n  }\n  const stateHash = hashStateTree(ledger.accountState);\n  if (account_hash !== stateHash) {\n    throw new errors_1.ValidationError('stateHash in header does not match computed hash of state');\n  }\n  return stateHash;\n}\nfunction hashLedger(ledger, options = {}) {\n  const subhashes = {\n    transaction_hash: computeTransactionHash(ledger, options),\n    account_hash: computeStateHash(ledger, options)\n  };\n  return hashLedgerHeader(Object.assign(Object.assign({}, ledger), subhashes));\n}\nexports.default = hashLedger;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","hashStateTree","hashTxTree","hashLedgerHeader","hashSignedTx","utils_1","require","bignumber_js_1","ripple_binary_codec_1","errors_1","HashPrefix_1","sha512Half_1","SHAMap_1","HEX","intToHex","integer","byteLength","foo","Number","toString","padStart","bigintToHex","integerString","hex","default","addLengthPrefix","length","bytesToHex","prefix","XrplError","tx","txBlob","txObject","decode","encode","TxnSignature","Signers","SigningPubKey","ValidationError","TRANSACTION_ID","toUpperCase","concat","ledgerHeader","LEDGER","ledger","ledger_index","total_coins","parent_hash","transaction_hash","account_hash","parent_close_time","close_time","close_time_resolution","close_flags","transactions","_a","shamap","txJSON","txBlobHex","metaHex","metaData","txHash","data","addItem","NodeType","TRANSACTION_METADATA","hash","entries","forEach","ledgerEntry","index","ACCOUNT_STATE","computeTransactionHash","options","computeTreeHashes","transactionHash","transactionHashInHeader","computedHashOfTransactions","computeStateHash","accountState","stateHash","hashLedger","subhashes","assign"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/hashes/hashLedger.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashStateTree = exports.hashTxTree = exports.hashLedgerHeader = exports.hashSignedTx = void 0;\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst errors_1 = require(\"../../errors\");\nconst HashPrefix_1 = __importDefault(require(\"./HashPrefix\"));\nconst sha512Half_1 = __importDefault(require(\"./sha512Half\"));\nconst SHAMap_1 = __importStar(require(\"./SHAMap\"));\nconst HEX = 16;\nfunction intToHex(integer, byteLength) {\n    const foo = Number(integer)\n        .toString(HEX)\n        .padStart(byteLength * 2, '0');\n    return foo;\n}\nfunction bigintToHex(integerString, byteLength) {\n    const hex = new bignumber_js_1.default(integerString).toString(HEX);\n    return hex.padStart(byteLength * 2, '0');\n}\nfunction addLengthPrefix(hex) {\n    const length = hex.length / 2;\n    if (length <= 192) {\n        return (0, utils_1.bytesToHex)([length]) + hex;\n    }\n    if (length <= 12480) {\n        const prefix = length - 193;\n        return (0, utils_1.bytesToHex)([193 + (prefix >>> 8), prefix & 0xff]) + hex;\n    }\n    if (length <= 918744) {\n        const prefix = length - 12481;\n        return ((0, utils_1.bytesToHex)([\n            241 + (prefix >>> 16),\n            (prefix >>> 8) & 0xff,\n            prefix & 0xff,\n        ]) + hex);\n    }\n    throw new errors_1.XrplError('Variable integer overflow.');\n}\nfunction hashSignedTx(tx) {\n    let txBlob;\n    let txObject;\n    if (typeof tx === 'string') {\n        txBlob = tx;\n        txObject = (0, ripple_binary_codec_1.decode)(tx);\n    }\n    else {\n        txBlob = (0, ripple_binary_codec_1.encode)(tx);\n        txObject = tx;\n    }\n    if (txObject.TxnSignature === undefined &&\n        txObject.Signers === undefined &&\n        txObject.SigningPubKey === undefined) {\n        throw new errors_1.ValidationError('The transaction must be signed to hash it.');\n    }\n    const prefix = HashPrefix_1.default.TRANSACTION_ID.toString(16).toUpperCase();\n    return (0, sha512Half_1.default)(prefix.concat(txBlob));\n}\nexports.hashSignedTx = hashSignedTx;\nfunction hashLedgerHeader(ledgerHeader) {\n    const prefix = HashPrefix_1.default.LEDGER.toString(HEX).toUpperCase();\n    const ledger = prefix +\n        intToHex(Number(ledgerHeader.ledger_index), 4) +\n        bigintToHex(ledgerHeader.total_coins, 8) +\n        ledgerHeader.parent_hash +\n        ledgerHeader.transaction_hash +\n        ledgerHeader.account_hash +\n        intToHex(ledgerHeader.parent_close_time, 4) +\n        intToHex(ledgerHeader.close_time, 4) +\n        intToHex(ledgerHeader.close_time_resolution, 1) +\n        intToHex(ledgerHeader.close_flags, 1);\n    return (0, sha512Half_1.default)(ledger);\n}\nexports.hashLedgerHeader = hashLedgerHeader;\nfunction hashTxTree(transactions) {\n    var _a;\n    const shamap = new SHAMap_1.default();\n    for (const txJSON of transactions) {\n        const txBlobHex = (0, ripple_binary_codec_1.encode)(txJSON);\n        const metaHex = (0, ripple_binary_codec_1.encode)((_a = txJSON.metaData) !== null && _a !== void 0 ? _a : {});\n        const txHash = hashSignedTx(txBlobHex);\n        const data = addLengthPrefix(txBlobHex) + addLengthPrefix(metaHex);\n        shamap.addItem(txHash, data, SHAMap_1.NodeType.TRANSACTION_METADATA);\n    }\n    return shamap.hash;\n}\nexports.hashTxTree = hashTxTree;\nfunction hashStateTree(entries) {\n    const shamap = new SHAMap_1.default();\n    entries.forEach((ledgerEntry) => {\n        const data = (0, ripple_binary_codec_1.encode)(ledgerEntry);\n        shamap.addItem(ledgerEntry.index, data, SHAMap_1.NodeType.ACCOUNT_STATE);\n    });\n    return shamap.hash;\n}\nexports.hashStateTree = hashStateTree;\nfunction computeTransactionHash(ledger, options) {\n    const { transaction_hash } = ledger;\n    if (!options.computeTreeHashes) {\n        return transaction_hash;\n    }\n    if (ledger.transactions == null) {\n        throw new errors_1.ValidationError('transactions is missing from the ledger');\n    }\n    const transactionHash = hashTxTree(ledger.transactions);\n    if (transaction_hash !== transactionHash) {\n        throw new errors_1.ValidationError('transactionHash in header' +\n            ' does not match computed hash of transactions', {\n            transactionHashInHeader: transaction_hash,\n            computedHashOfTransactions: transactionHash,\n        });\n    }\n    return transactionHash;\n}\nfunction computeStateHash(ledger, options) {\n    const { account_hash } = ledger;\n    if (!options.computeTreeHashes) {\n        return account_hash;\n    }\n    if (ledger.accountState == null) {\n        throw new errors_1.ValidationError('accountState is missing from the ledger');\n    }\n    const stateHash = hashStateTree(ledger.accountState);\n    if (account_hash !== stateHash) {\n        throw new errors_1.ValidationError('stateHash in header does not match computed hash of state');\n    }\n    return stateHash;\n}\nfunction hashLedger(ledger, options = {}) {\n    const subhashes = {\n        transaction_hash: computeTransactionHash(ledger, options),\n        account_hash: computeStateHash(ledger, options),\n    };\n    return hashLedgerHeader(Object.assign(Object.assign({}, ledger), subhashes));\n}\nexports.default = hashLedger;\n//# sourceMappingURL=hashLedger.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}