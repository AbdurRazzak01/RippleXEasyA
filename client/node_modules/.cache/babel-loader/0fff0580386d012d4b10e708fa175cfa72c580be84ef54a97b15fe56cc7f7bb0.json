{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMWithdraw = exports.AMMWithdrawFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar AMMWithdrawFlags;\n(function (AMMWithdrawFlags) {\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfLPToken\"] = 65536] = \"tfLPToken\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfWithdrawAll\"] = 131072] = \"tfWithdrawAll\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfOneAssetWithdrawAll\"] = 262144] = \"tfOneAssetWithdrawAll\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfSingleAsset\"] = 524288] = \"tfSingleAsset\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfTwoAsset\"] = 1048576] = \"tfTwoAsset\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfOneAssetLPToken\"] = 2097152] = \"tfOneAssetLPToken\";\n  AMMWithdrawFlags[AMMWithdrawFlags[\"tfLimitLPToken\"] = 4194304] = \"tfLimitLPToken\";\n})(AMMWithdrawFlags || (exports.AMMWithdrawFlags = AMMWithdrawFlags = {}));\nfunction validateAMMWithdraw(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Asset == null) {\n    throw new errors_1.ValidationError('AMMWithdraw: missing field Asset');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset)) {\n    throw new errors_1.ValidationError('AMMWithdraw: Asset must be a Currency');\n  }\n  if (tx.Asset2 == null) {\n    throw new errors_1.ValidationError('AMMWithdraw: missing field Asset2');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset2)) {\n    throw new errors_1.ValidationError('AMMWithdraw: Asset2 must be a Currency');\n  }\n  if (tx.Amount2 != null && tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMWithdraw: must set Amount with Amount2');\n  } else if (tx.EPrice != null && tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMWithdraw: must set Amount with EPrice');\n  }\n  if (tx.LPTokenIn != null && !(0, common_1.isIssuedCurrency)(tx.LPTokenIn)) {\n    throw new errors_1.ValidationError('AMMWithdraw: LPTokenIn must be an IssuedCurrencyAmount');\n  }\n  if (tx.Amount != null && !(0, common_1.isAmount)(tx.Amount)) {\n    throw new errors_1.ValidationError('AMMWithdraw: Amount must be an Amount');\n  }\n  if (tx.Amount2 != null && !(0, common_1.isAmount)(tx.Amount2)) {\n    throw new errors_1.ValidationError('AMMWithdraw: Amount2 must be an Amount');\n  }\n  if (tx.EPrice != null && !(0, common_1.isAmount)(tx.EPrice)) {\n    throw new errors_1.ValidationError('AMMWithdraw: EPrice must be an Amount');\n  }\n}\nexports.validateAMMWithdraw = validateAMMWithdraw;","map":{"version":3,"names":["errors_1","require","common_1","AMMWithdrawFlags","exports","validateAMMWithdraw","tx","validateBaseTransaction","Asset","ValidationError","isCurrency","Asset2","Amount2","Amount","EPrice","LPTokenIn","isIssuedCurrency","isAmount"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/AMMWithdraw.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Amount, Currency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  isCurrency,\n  isIssuedCurrency,\n  validateBaseTransaction,\n} from './common'\n\n/**\n * Enum representing values for AMMWithdrawFlags Transaction Flags.\n *\n * @category Transaction Flags\n */\nexport enum AMMWithdrawFlags {\n  tfLPToken = 0x00010000,\n  tfWithdrawAll = 0x00020000,\n  tfOneAssetWithdrawAll = 0x00040000,\n  tfSingleAsset = 0x00080000,\n  tfTwoAsset = 0x00100000,\n  tfOneAssetLPToken = 0x00200000,\n  tfLimitLPToken = 0x00400000,\n}\n\nexport interface AMMWithdrawFlagsInterface extends GlobalFlags {\n  tfLPToken?: boolean\n  tfWithdrawAll?: boolean\n  tfOneAssetWithdrawAll?: boolean\n  tfSingleAsset?: boolean\n  tfTwoAsset?: boolean\n  tfOneAssetLPToken?: boolean\n  tfLimitLPToken?: boolean\n}\n\n/**\n * Withdraw assets from an Automated Market Maker (AMM) instance by returning the AMM's liquidity provider tokens (LP Tokens).\n */\nexport interface AMMWithdraw extends BaseTransaction {\n  TransactionType: 'AMMWithdraw'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * The amount of one asset to withdraw from the AMM.\n   * This must match the type of one of the assets (tokens or XRP) in the AMM's pool.\n   */\n  Amount?: Amount\n\n  /**\n   * The amount of another asset to withdraw from the AMM.\n   * If present, this must match the type of the other asset in the AMM's pool and cannot be the same type as Amount.\n   */\n  Amount2?: Amount\n\n  /**\n   * The minimum effective price, in LP Token returned, to pay per unit of the asset to withdraw.\n   */\n  EPrice?: Amount\n\n  /**\n   * How many of the AMM's LP Tokens to redeem.\n   */\n  LPTokenIn?: IssuedCurrencyAmount\n}\n\n/**\n * Verify the form and type of an AMMWithdraw at runtime.\n *\n * @param tx - An AMMWithdraw Transaction.\n * @throws When the AMMWithdraw is Malformed.\n */\nexport function validateAMMWithdraw(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMWithdraw: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMWithdraw: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMWithdraw: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMWithdraw: Asset2 must be a Currency')\n  }\n\n  if (tx.Amount2 != null && tx.Amount == null) {\n    throw new ValidationError('AMMWithdraw: must set Amount with Amount2')\n  } else if (tx.EPrice != null && tx.Amount == null) {\n    throw new ValidationError('AMMWithdraw: must set Amount with EPrice')\n  }\n\n  if (tx.LPTokenIn != null && !isIssuedCurrency(tx.LPTokenIn)) {\n    throw new ValidationError(\n      'AMMWithdraw: LPTokenIn must be an IssuedCurrencyAmount',\n    )\n  }\n\n  if (tx.Amount != null && !isAmount(tx.Amount)) {\n    throw new ValidationError('AMMWithdraw: Amount must be an Amount')\n  }\n\n  if (tx.Amount2 != null && !isAmount(tx.Amount2)) {\n    throw new ValidationError('AMMWithdraw: Amount2 must be an Amount')\n  }\n\n  if (tx.EPrice != null && !isAmount(tx.EPrice)) {\n    throw new ValidationError('AMMWithdraw: EPrice must be an Amount')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAcA,IAAYE,gBAQX;AARD,WAAYA,gBAAgB;EAC1BA,gBAAA,CAAAA,gBAAA,oCAAsB;EACtBA,gBAAA,CAAAA,gBAAA,6CAA0B;EAC1BA,gBAAA,CAAAA,gBAAA,6DAAkC;EAClCA,gBAAA,CAAAA,gBAAA,6CAA0B;EAC1BA,gBAAA,CAAAA,gBAAA,wCAAuB;EACvBA,gBAAA,CAAAA,gBAAA,sDAA8B;EAC9BA,gBAAA,CAAAA,gBAAA,gDAA2B;AAC7B,CAAC,EARWA,gBAAgB,KAAAC,OAAA,CAAAD,gBAAA,GAAhBA,gBAAgB;AAiE5B,SAAgBE,mBAAmBA,CAACC,EAA2B;EAC7D,IAAAJ,QAAA,CAAAK,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,KAAK,IAAI,IAAI,EAAE;IACpB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,kCAAkC,CAAC;;EAG/D,IAAI,CAAC,IAAAP,QAAA,CAAAQ,UAAU,EAACJ,EAAE,CAACE,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,uCAAuC,CAAC;;EAGpE,IAAIH,EAAE,CAACK,MAAM,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIX,QAAA,CAAAS,eAAe,CAAC,mCAAmC,CAAC;;EAGhE,IAAI,CAAC,IAAAP,QAAA,CAAAQ,UAAU,EAACJ,EAAE,CAACK,MAAM,CAAC,EAAE;IAC1B,MAAM,IAAIX,QAAA,CAAAS,eAAe,CAAC,wCAAwC,CAAC;;EAGrE,IAAIH,EAAE,CAACM,OAAO,IAAI,IAAI,IAAIN,EAAE,CAACO,MAAM,IAAI,IAAI,EAAE;IAC3C,MAAM,IAAIb,QAAA,CAAAS,eAAe,CAAC,2CAA2C,CAAC;GACvE,MAAM,IAAIH,EAAE,CAACQ,MAAM,IAAI,IAAI,IAAIR,EAAE,CAACO,MAAM,IAAI,IAAI,EAAE;IACjD,MAAM,IAAIb,QAAA,CAAAS,eAAe,CAAC,0CAA0C,CAAC;;EAGvE,IAAIH,EAAE,CAACS,SAAS,IAAI,IAAI,IAAI,CAAC,IAAAb,QAAA,CAAAc,gBAAgB,EAACV,EAAE,CAACS,SAAS,CAAC,EAAE;IAC3D,MAAM,IAAIf,QAAA,CAAAS,eAAe,CACvB,wDAAwD,CACzD;;EAGH,IAAIH,EAAE,CAACO,MAAM,IAAI,IAAI,IAAI,CAAC,IAAAX,QAAA,CAAAe,QAAQ,EAACX,EAAE,CAACO,MAAM,CAAC,EAAE;IAC7C,MAAM,IAAIb,QAAA,CAAAS,eAAe,CAAC,uCAAuC,CAAC;;EAGpE,IAAIH,EAAE,CAACM,OAAO,IAAI,IAAI,IAAI,CAAC,IAAAV,QAAA,CAAAe,QAAQ,EAACX,EAAE,CAACM,OAAO,CAAC,EAAE;IAC/C,MAAM,IAAIZ,QAAA,CAAAS,eAAe,CAAC,wCAAwC,CAAC;;EAGrE,IAAIH,EAAE,CAACQ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAAZ,QAAA,CAAAe,QAAQ,EAACX,EAAE,CAACQ,MAAM,CAAC,EAAE;IAC7C,MAAM,IAAId,QAAA,CAAAS,eAAe,CAAC,uCAAuC,CAAC;;AAEtE;AA1CAL,OAAA,CAAAC,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}