{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/Connectsm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from 'ethers/providers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContractInteraction = () => {\n  _s();\n  const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n  const [currentData, setCurrentData] = useState(null);\n  const [newData, setNewData] = useState('');\n  const [transactionHash, setTransactionHash] = useState('');\n  const [error, setError] = useState('');\n  const contractAddress = '0x06da7afA5e86C3c75413293daA168Ab963CA4a23';\n  const contractABI = [{\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"initialData\",\n      \"type\": \"uint256\"\n    }],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  }, {\n    \"inputs\": [],\n    \"name\": \"data\",\n    \"outputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"\",\n      \"type\": \"uint256\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"newData\",\n      \"type\": \"uint256\"\n    }],\n    \"name\": \"setData\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }];\n  useEffect(() => {\n    const initializeProvider = async () => {\n      if (window.ethereum) {\n        try {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const contract = new ethers.Contract(contractAddress, contractABI, provider);\n          fetchData(contract);\n        } catch (error) {\n          setError(error.message);\n        }\n      } else {\n        setError(\"Please install MetaMask to interact with this contract.\");\n      }\n    };\n    initializeProvider();\n  }, []);\n  const fetchData = async contract => {\n    try {\n      const result = await contract.data();\n      setCurrentData(result);\n      setError('');\n    } catch (error) {\n      setCurrentData(null);\n      setError(error.message);\n    }\n  };\n  const updateData = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, contractABI, provider);\n      const signer = provider.getSigner();\n      const tx = await contract.setData(parseInt(newData), {\n        gasLimit: 800000\n      });\n      await tx.wait(); // Wait for the transaction to be mined\n      setTransactionHash(tx.hash);\n      setError('');\n    } catch (error) {\n      setTransactionHash('');\n      setError(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), currentData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Data: \", currentData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newData,\n      onChange: e => setNewData(e.target.value),\n      placeholder: \"New Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateData,\n      children: \"Update Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), transactionHash && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transaction Hash: \", transactionHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(ContractInteraction, \"WVe+ndTeuf/qiqz/VgcMqW0fLeM=\");\n_c = ContractInteraction;\nexport default ContractInteraction;\nvar _c;\n$RefreshReg$(_c, \"ContractInteraction\");","map":{"version":3,"names":["React","useState","useEffect","ethers","JsonRpcProvider","jsxDEV","_jsxDEV","ContractInteraction","_s","provider","providers","currentData","setCurrentData","newData","setNewData","transactionHash","setTransactionHash","error","setError","contractAddress","contractABI","initializeProvider","window","ethereum","request","method","Web3Provider","contract","Contract","fetchData","message","result","data","updateData","signer","getSigner","tx","setData","parseInt","gasLimit","wait","hash","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/Connectsm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from 'ethers/providers';\n\n\nconst ContractInteraction = () => {\n    const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545');\n\n    const [currentData, setCurrentData] = useState(null);\n    const [newData, setNewData] = useState('');\n    const [transactionHash, setTransactionHash] = useState('');\n    const [error, setError] = useState('');\n\n    const contractAddress = '0x06da7afA5e86C3c75413293daA168Ab963CA4a23';\n    const contractABI = [\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"initialData\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"constructor\"\n        },\n        {\n            \"inputs\": [],\n            \"name\": \"data\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"inputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"newData\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"name\": \"setData\",\n            \"outputs\": [],\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        }\n    ];\n\n    useEffect(() => {\n        const initializeProvider = async () => {\n            if (window.ethereum) {\n                try {\n                    await window.ethereum.request({ method: 'eth_requestAccounts' });\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\n                    const contract = new ethers.Contract(contractAddress, contractABI, provider);\n                    fetchData(contract);\n                } catch (error) {\n                    setError(error.message);\n                }\n            } else {\n                setError(\"Please install MetaMask to interact with this contract.\");\n            }\n        };\n        initializeProvider();\n    }, []);\n\n    const fetchData = async (contract) => {\n        try {\n            const result = await contract.data();\n            setCurrentData(result);\n            setError('');\n        } catch (error) {\n            setCurrentData(null);\n            setError(error.message);\n        }\n    };\n    \n    const updateData = async () => {\n        try {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const contract = new ethers.Contract(contractAddress, contractABI, provider);\n            const signer = provider.getSigner();\n            const tx = await contract.setData(parseInt(newData), { gasLimit: 800000 });\n            await tx.wait(); // Wait for the transaction to be mined\n            setTransactionHash(tx.hash);\n            setError('');\n        } catch (error) {\n            setTransactionHash('');\n            setError(error.message);\n        }\n    };\n\n    return (\n        <div>\n            <button onClick={fetchData}>Fetch Data</button>\n            {currentData && <p>Current Data: {currentData}</p>}\n            <input\n                type=\"text\"\n                value={newData}\n                onChange={(e) => setNewData(e.target.value)}\n                placeholder=\"New Data\"\n            />\n            <button onClick={updateData}>Update Data</button>\n            {transactionHash && <p>Transaction Hash: {transactionHash}</p>}\n            {error && <p>Error: {error}</p>}\n        </div>\n    );\n};\n\nexport default ContractInteraction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}