{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst metadata_1 = require(\"../models/transactions/metadata\");\nfunction ensureDecodedMeta(meta) {\n  if (typeof meta === 'string') {\n    return (0, ripple_binary_codec_1.decode)(meta);\n  }\n  return meta;\n}\nfunction getXChainClaimID(meta) {\n  if (typeof meta !== 'string' && (meta === null || meta === void 0 ? void 0 : meta.AffectedNodes) === undefined) {\n    throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.\n      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(meta)} instead.`);\n  }\n  const decodedMeta = ensureDecodedMeta(meta);\n  if (!decodedMeta.TransactionResult) {\n    throw new TypeError('Cannot get XChainClaimID from un-validated transaction');\n  }\n  if (decodedMeta.TransactionResult !== 'tesSUCCESS') {\n    return undefined;\n  }\n  const createdNode = decodedMeta.AffectedNodes.find(node => (0, metadata_1.isCreatedNode)(node) && node.CreatedNode.LedgerEntryType === 'XChainOwnedClaimID');\n  return createdNode.CreatedNode.NewFields.XChainClaimID;\n}\nexports.default = getXChainClaimID;","map":{"version":3,"names":["Object","defineProperty","exports","value","ripple_binary_codec_1","require","metadata_1","ensureDecodedMeta","meta","decode","getXChainClaimID","AffectedNodes","undefined","TypeError","JSON","stringify","decodedMeta","TransactionResult","createdNode","find","node","isCreatedNode","CreatedNode","LedgerEntryType","NewFields","XChainClaimID","default"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/getXChainClaimID.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst metadata_1 = require(\"../models/transactions/metadata\");\nfunction ensureDecodedMeta(meta) {\n    if (typeof meta === 'string') {\n        return (0, ripple_binary_codec_1.decode)(meta);\n    }\n    return meta;\n}\nfunction getXChainClaimID(meta) {\n    if (typeof meta !== 'string' && (meta === null || meta === void 0 ? void 0 : meta.AffectedNodes) === undefined) {\n        throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.\n      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(meta)} instead.`);\n    }\n    const decodedMeta = ensureDecodedMeta(meta);\n    if (!decodedMeta.TransactionResult) {\n        throw new TypeError('Cannot get XChainClaimID from un-validated transaction');\n    }\n    if (decodedMeta.TransactionResult !== 'tesSUCCESS') {\n        return undefined;\n    }\n    const createdNode = decodedMeta.AffectedNodes.find((node) => (0, metadata_1.isCreatedNode)(node) &&\n        node.CreatedNode.LedgerEntryType === 'XChainOwnedClaimID');\n    return createdNode.CreatedNode.NewFields\n        .XChainClaimID;\n}\nexports.default = getXChainClaimID;\n//# sourceMappingURL=getXChainClaimID.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC5D,MAAMC,UAAU,GAAGD,OAAO,CAAC,iCAAiC,CAAC;AAC7D,SAASE,iBAAiBA,CAACC,IAAI,EAAE;EAC7B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAO,CAAC,CAAC,EAAEJ,qBAAqB,CAACK,MAAM,EAAED,IAAI,CAAC;EAClD;EACA,OAAOA,IAAI;AACf;AACA,SAASE,gBAAgBA,CAACF,IAAI,EAAE;EAC5B,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACG,aAAa,MAAMC,SAAS,EAAE;IAC5G,MAAM,IAAIC,SAAS,CAAE;AAC7B,sFAAsFC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAE,WAAU,CAAC;EAClH;EACA,MAAMQ,WAAW,GAAGT,iBAAiB,CAACC,IAAI,CAAC;EAC3C,IAAI,CAACQ,WAAW,CAACC,iBAAiB,EAAE;IAChC,MAAM,IAAIJ,SAAS,CAAC,wDAAwD,CAAC;EACjF;EACA,IAAIG,WAAW,CAACC,iBAAiB,KAAK,YAAY,EAAE;IAChD,OAAOL,SAAS;EACpB;EACA,MAAMM,WAAW,GAAGF,WAAW,CAACL,aAAa,CAACQ,IAAI,CAAEC,IAAI,IAAK,CAAC,CAAC,EAAEd,UAAU,CAACe,aAAa,EAAED,IAAI,CAAC,IAC5FA,IAAI,CAACE,WAAW,CAACC,eAAe,KAAK,oBAAoB,CAAC;EAC9D,OAAOL,WAAW,CAACI,WAAW,CAACE,SAAS,CACnCC,aAAa;AACtB;AACAvB,OAAO,CAACwB,OAAO,GAAGhB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}