{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XrplDefinitions = void 0;\nconst xrpl_definitions_base_1 = require(\"./xrpl-definitions-base\");\nconst types_1 = require(\"../types\");\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * Should be used instead of XrplDefinitionsBase since this defines default `types` for serializing/deserializing\n * ledger data.\n */\nclass XrplDefinitions extends xrpl_definitions_base_1.XrplDefinitionsBase {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.\n   *              These types will be included in addition to the coreTypes used on mainnet.\n   */\n  constructor(enums, additionalTypes) {\n    const types = Object.assign({}, types_1.coreTypes, additionalTypes);\n    super(enums, types);\n  }\n}\nexports.XrplDefinitions = XrplDefinitions;","map":{"version":3,"names":["xrpl_definitions_base_1","require","types_1","XrplDefinitions","XrplDefinitionsBase","constructor","enums","additionalTypes","types","Object","assign","coreTypes","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/enums/xrpl-definitions.ts"],"sourcesContent":["import {\n  type DefinitionsData,\n  XrplDefinitionsBase,\n} from './xrpl-definitions-base'\nimport { coreTypes } from '../types'\nimport { SerializedType } from '../types/serialized-type'\n\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * Should be used instead of XrplDefinitionsBase since this defines default `types` for serializing/deserializing\n * ledger data.\n */\nexport class XrplDefinitions extends XrplDefinitionsBase {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param additionalTypes - A list of SerializedType objects with the same name as the fields defined.\n   *              These types will be included in addition to the coreTypes used on mainnet.\n   */\n  constructor(\n    enums: DefinitionsData,\n    additionalTypes?: Record<string, typeof SerializedType>,\n  ) {\n    const types = Object.assign({}, coreTypes, additionalTypes)\n    super(enums, types)\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,uBAAA,GAAAC,OAAA;AAIA,MAAAC,OAAA,GAAAD,OAAA;AAGA;;;;;AAKA,MAAaE,eAAgB,SAAQH,uBAAA,CAAAI,mBAAmB;EACtD;;;;;;;;;;;EAWAC,YACEC,KAAsB,EACtBC,eAAuD;IAEvD,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAER,OAAA,CAAAS,SAAS,EAAEJ,eAAe,CAAC;IAC3D,KAAK,CAACD,KAAK,EAAEE,KAAK,CAAC;EACrB;;AAlBFI,OAAA,CAAAT,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}