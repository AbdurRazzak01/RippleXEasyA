{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaInfo = () => {\n  _s();\n  const [balanceInEther, setBalanceInEther] = useState(null);\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          // Get the balance of the user's account\n          const balance = await web3.eth.getBalance(accounts[0]);\n\n          // Convert the balance from Wei to Ether\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n          setBalanceInEther(balanceInEther);\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error reading data:', error);\n      }\n    };\n    fetchBalance();\n  }, []); // Empty dependency array ensures that this effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), balanceInEther !== null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Balance: \", balanceInEther, \" Ether\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaInfo, \"mBa+q8BAI1R1Vsva0esknI6wp3Y=\");\n_c = MetaInfo;\nexport default MetaInfo;\nvar _c;\n$RefreshReg$(_c, \"MetaInfo\");","map":{"version":3,"names":["React","useEffect","useState","Web3","jsxDEV","_jsxDEV","MetaInfo","_s","balanceInEther","setBalanceInEther","fetchBalance","window","ethereum","web3","accounts","request","method","balance","eth","getBalance","utils","fromWei","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\n\nconst MetaInfo = () => {\n  const [balanceInEther, setBalanceInEther] = useState(null);\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n\n          // Request access to the user's MetaMask accounts\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n          // Get the balance of the user's account\n          const balance = await web3.eth.getBalance(accounts[0]);\n\n          // Convert the balance from Wei to Ether\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n          setBalanceInEther(balanceInEther);\n\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error reading data:', error);\n      }\n    };\n\n    fetchBalance();\n  }, []); // Empty dependency array ensures that this effect runs only once on component mount\n\n  return (\n    <div>\n      <h2>Account Balance</h2>\n      {balanceInEther !== null ? (\n        <p>Balance: {balanceInEther} Ether</p>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MetaInfo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE1DD,SAAS,CAAC,MAAM;IACd,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF;QACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;UACnB,MAAMC,IAAI,GAAG,IAAIV,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;;UAEtC;UACA,MAAME,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAQ,CAACG,OAAO,CAAC;YAAEC,MAAM,EAAE;UAAsB,CAAC,CAAC;;UAEjF;UACA,MAAMC,OAAO,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAACC,UAAU,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;;UAEtD;UACA,MAAMN,cAAc,GAAGK,IAAI,CAACO,KAAK,CAACC,OAAO,CAACJ,OAAO,EAAE,OAAO,CAAC;UAC3DR,iBAAiB,CAACD,cAAc,CAAC;QAEnC,CAAC,MAAM;UACLc,OAAO,CAACC,KAAK,CAAC,kEAAkE,CAAC;QACnF;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC;IAEDb,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBpB,cAAc,KAAK,IAAI,gBACtBH,OAAA;MAAAmB,QAAA,GAAG,WAAS,EAAChB,cAAc,EAAC,QAAM;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEtCvB,OAAA;MAAAmB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACjB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrB,EAAA,CAzCID,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}