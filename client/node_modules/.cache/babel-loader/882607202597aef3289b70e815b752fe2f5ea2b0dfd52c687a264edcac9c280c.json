{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js\";\nimport React from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaInfo = async () => {\n  try {\n    // Check if MetaMask is installed\n    if (window.ethereum) {\n      // Request access to the user's MetaMask accounts\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      // Get the balance of the user's account\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [accounts[0]] // Pass the account address\n      });\n\n      // Convert the balance from Wei to Ether\n      const balanceInEther = ethers.utils.formatEther(balance);\n      console.log('Account balance in Ether:', balanceInEther);\n    } else {\n      console.error('MetaMask not found. Please install MetaMask to use this feature.');\n    }\n  } catch (error) {\n    console.error('Error reading data:', error);\n  }\n\n  // Render logic can be added here if needed\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = MetaInfo;\nexport default MetaInfo;\nvar _c;\n$RefreshReg$(_c, \"MetaInfo\");","map":{"version":3,"names":["React","ethers","jsxDEV","_jsxDEV","MetaInfo","window","ethereum","accounts","request","method","balance","params","balanceInEther","utils","formatEther","console","log","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js"],"sourcesContent":["import React from 'react';\nimport { ethers } from 'ethers';\n\nconst MetaInfo = async () => {\n  try {\n    // Check if MetaMask is installed\n    if (window.ethereum) {\n      // Request access to the user's MetaMask accounts\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n      // Get the balance of the user's account\n      const balance = await window.ethereum.request({\n        method: 'eth_getBalance',\n        params: [accounts[0]], // Pass the account address\n      });\n\n      // Convert the balance from Wei to Ether\n      const balanceInEther = ethers.utils.formatEther(balance);\n      console.log('Account balance in Ether:', balanceInEther);\n\n    } else {\n      console.error('MetaMask not found. Please install MetaMask to use this feature.');\n    }\n  } catch (error) {\n    console.error('Error reading data:', error);\n  }\n\n  // Render logic can be added here if needed\n  return (\n    <div>\n      {/* Add any JSX content here if needed */}\n    </div>\n  );\n};\n\nexport default MetaInfo;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,IAAI;IACF;IACA,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB;MACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;;MAEjF;MACA,MAAMC,OAAO,GAAG,MAAML,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC5CC,MAAM,EAAE,gBAAgB;QACxBE,MAAM,EAAE,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;MACzB,CAAC,CAAC;;MAEF;MACA,MAAMK,cAAc,GAAGX,MAAM,CAACY,KAAK,CAACC,WAAW,CAACJ,OAAO,CAAC;MACxDK,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,cAAc,CAAC;IAE1D,CAAC,MAAM;MACLG,OAAO,CAACE,KAAK,CAAC,kEAAkE,CAAC;IACnF;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C;;EAEA;EACA,oBACEd,OAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV,CAAC;AAACC,EAAA,GA9BIlB,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}