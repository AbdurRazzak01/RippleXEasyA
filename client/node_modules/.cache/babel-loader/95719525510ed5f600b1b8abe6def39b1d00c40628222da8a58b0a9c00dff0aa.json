{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { ethers } from 'ethers';\nimport SignMessage from './SignMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MetaInfo = () => {\n  _s();\n  const [accountInfo, setAccountInfo] = useState(null);\n  const [transactionStatus, setTransactionStatus] = useState('');\n  const [signature, setSignature] = useState('');\n  useEffect(() => {\n    const fetchAccountInfo = async () => {\n      try {\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const accountNumber = accounts[0];\n          const balance = await web3.eth.getBalance(accountNumber);\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n          const blockNumber = await web3.eth.getBlockNumber();\n          const latestBlock = await web3.eth.getBlock(blockNumber);\n          const latestBlockStringified = {\n            number: latestBlock.number.toString(),\n            timestamp: latestBlock.timestamp.toString()\n          };\n          const accountInfo = {\n            accountNumber,\n            balanceInEther: balanceInEther.toString(),\n            latestBlock: latestBlockStringified\n          };\n          setAccountInfo(accountInfo);\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error fetching account information:', error);\n      }\n    };\n    fetchAccountInfo();\n  }, []);\n  const handleTransaction = async () => {\n    try {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const senderAddress = accounts[0];\n        const receiverAddress = '0x1234567890123456789012345678901234567890';\n        const amountToSend = web3.utils.toWei('1', 'ether');\n        const tx = await web3.eth.sendTransaction({\n          from: senderAddress,\n          to: receiverAddress,\n          value: amountToSend\n        });\n        setTransactionStatus(`Transaction successful. Transaction hash: ${tx.transactionHash}`);\n        const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n        const message = 'Hello, world!';\n        const signature = await signer.signMessage(message);\n        setSignature(signature);\n      } else {\n        console.error('MetaMask not found. Please install MetaMask to use this feature.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setTransactionStatus(`Error sending transaction: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SignMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), accountInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Number: \", accountInfo.accountNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Balance: \", accountInfo.balanceInEther, \" Ether\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latest Block: \", JSON.stringify(accountInfo.latestBlock)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTransaction,\n        children: \"Send Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), transactionStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transactionStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }, this), signature && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Message Signature: \", signature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(MetaInfo, \"IsO9QZ8L8vgyzXwWCEkxJ5C/FSo=\");\n_c = MetaInfo;\nexport default MetaInfo;\nvar _c;\n$RefreshReg$(_c, \"MetaInfo\");","map":{"version":3,"names":["React","useEffect","useState","Web3","ethers","SignMessage","jsxDEV","_jsxDEV","MetaInfo","_s","accountInfo","setAccountInfo","transactionStatus","setTransactionStatus","signature","setSignature","fetchAccountInfo","window","ethereum","web3","accounts","request","method","accountNumber","balance","eth","getBalance","balanceInEther","utils","fromWei","blockNumber","getBlockNumber","latestBlock","getBlock","latestBlockStringified","number","toString","timestamp","console","error","handleTransaction","senderAddress","receiverAddress","amountToSend","toWei","tx","sendTransaction","from","to","value","transactionHash","signer","providers","Web3Provider","getSigner","message","signMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","onClick","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/MetamaskDataRead.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport { ethers } from 'ethers';\nimport SignMessage from './SignMessage';\n\nconst MetaInfo = () => {\n  const [accountInfo, setAccountInfo] = useState(null);\n  const [transactionStatus, setTransactionStatus] = useState('');\n  const [signature, setSignature] = useState('');\n\n  useEffect(() => {\n    const fetchAccountInfo = async () => {\n      try {\n        if (window.ethereum) {\n          const web3 = new Web3(window.ethereum);\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n          const accountNumber = accounts[0];\n          const balance = await web3.eth.getBalance(accountNumber);\n          const balanceInEther = web3.utils.fromWei(balance, 'ether');\n          const blockNumber = await web3.eth.getBlockNumber();\n          const latestBlock = await web3.eth.getBlock(blockNumber);\n          const latestBlockStringified = {\n            number: latestBlock.number.toString(),\n            timestamp: latestBlock.timestamp.toString(),\n          };\n          const accountInfo = {\n            accountNumber,\n            balanceInEther: balanceInEther.toString(),\n            latestBlock: latestBlockStringified,\n          };\n          setAccountInfo(accountInfo);\n        } else {\n          console.error('MetaMask not found. Please install MetaMask to use this feature.');\n        }\n      } catch (error) {\n        console.error('Error fetching account information:', error);\n      }\n    };\n\n    fetchAccountInfo();\n  }, []);\n\n  const handleTransaction = async () => {\n    try {\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const senderAddress = accounts[0];\n        const receiverAddress = '0x1234567890123456789012345678901234567890';\n        const amountToSend = web3.utils.toWei('1', 'ether');\n\n        const tx = await web3.eth.sendTransaction({\n          from: senderAddress,\n          to: receiverAddress,\n          value: amountToSend,\n        });\n\n        setTransactionStatus(`Transaction successful. Transaction hash: ${tx.transactionHash}`);\n\n        const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n        const message = 'Hello, world!';\n        const signature = await signer.signMessage(message);\n        setSignature(signature);\n      } else {\n        console.error('MetaMask not found. Please install MetaMask to use this feature.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setTransactionStatus(`Error sending transaction: ${error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <div><SignMessage/></div>\n\n      <h2>Account Information</h2>\n      {accountInfo ? (\n        <div>\n          <p>Account Number: {accountInfo.accountNumber}</p>\n          <p>Balance: {accountInfo.balanceInEther} Ether</p>\n          <p>Latest Block: {JSON.stringify(accountInfo.latestBlock)}</p>\n          <button onClick={handleTransaction}>Send Transaction</button>\n          {transactionStatus && <p>{transactionStatus}</p>}\n          {signature && <p>Message Signature: {signature}</p>}\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default MetaInfo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}