{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst InnerNode_1 = __importDefault(require(\"./InnerNode\"));\nconst LeafNode_1 = __importDefault(require(\"./LeafNode\"));\nclass SHAMap {\n  constructor() {\n    this.root = new InnerNode_1.default(0);\n  }\n  get hash() {\n    return this.root.hash;\n  }\n  addItem(tag, data, type) {\n    this.root.addItem(tag, new LeafNode_1.default(tag, data, type));\n  }\n}\n__exportStar(require(\"./node\"), exports);\nexports.default = SHAMap;","map":{"version":3,"names":["InnerNode_1","__importDefault","require","LeafNode_1","SHAMap","constructor","root","default","hash","addItem","tag","data","type","__exportStar","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/hashes/SHAMap/index.ts"],"sourcesContent":["import InnerNode from './InnerNode'\nimport LeafNode from './LeafNode'\nimport { NodeType } from './node'\n\n/**\n * SHAMap is the hash structure used to model ledgers.\n * If the root hash is equivalent, that means all nodes should be equivalent as well.\n */\nclass SHAMap {\n  public root: InnerNode\n\n  /**\n   * SHAMap tree constructor.\n   */\n  public constructor() {\n    this.root = new InnerNode(0)\n  }\n\n  /**\n   * Get the hash of the SHAMap.\n   *\n   * @returns The hash of the root of the SHAMap.\n   */\n  public get hash(): string {\n    return this.root.hash\n  }\n\n  /**\n   * Add an item to the SHAMap.\n   *\n   * @param tag - Index of the Node to add.\n   * @param data - Data to insert into the tree.\n   * @param type - Type of the node to add.\n   */\n  public addItem(tag: string, data: string, type: NodeType): void {\n    this.root.addItem(tag, new LeafNode(tag, data, type))\n  }\n}\n\nexport * from './node'\nexport default SHAMap\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,WAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,UAAA,GAAAF,eAAA,CAAAC,OAAA;AAOA,MAAME,MAAM;EAMVC,YAAA;IACE,IAAI,CAACC,IAAI,GAAG,IAAIN,WAAA,CAAAO,OAAS,CAAC,CAAC,CAAC;EAC9B;EAOA,IAAWC,IAAIA,CAAA;IACb,OAAO,IAAI,CAACF,IAAI,CAACE,IAAI;EACvB;EASOC,OAAOA,CAACC,GAAW,EAAEC,IAAY,EAAEC,IAAc;IACtD,IAAI,CAACN,IAAI,CAACG,OAAO,CAACC,GAAG,EAAE,IAAIP,UAAA,CAAAI,OAAQ,CAACG,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC,CAAC;EACvD;;AAGFC,YAAA,CAAAX,OAAA,YAAAY,OAAA;AACAA,OAAA,CAAAP,OAAA,GAAeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}