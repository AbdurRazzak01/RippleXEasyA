{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst errors_1 = require(\"../errors\");\nfunction unscrambleTaxon(taxon, tokenSeq) {\n  const seed = 384160001;\n  const increment = 2459;\n  const max = 4294967296;\n  const scramble = new bignumber_js_1.default(seed).multipliedBy(tokenSeq).modulo(max).plus(increment).modulo(max).toNumber();\n  return (taxon ^ scramble) >>> 0;\n}\nfunction parseNFTokenID(nftokenID) {\n  const expectedLength = 64;\n  if (nftokenID.length !== expectedLength) {\n    throw new errors_1.XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}\n    , but expected a token with length ${expectedLength}`);\n  }\n  const scrambledTaxon = new bignumber_js_1.default(nftokenID.substring(48, 56), 16).toNumber();\n  const sequence = new bignumber_js_1.default(nftokenID.substring(56, 64), 16).toNumber();\n  const NFTokenIDData = {\n    NFTokenID: nftokenID,\n    Flags: new bignumber_js_1.default(nftokenID.substring(0, 4), 16).toNumber(),\n    TransferFee: new bignumber_js_1.default(nftokenID.substring(4, 8), 16).toNumber(),\n    Issuer: (0, ripple_address_codec_1.encodeAccountID)((0, utils_1.hexToBytes)(nftokenID.substring(8, 48))),\n    Taxon: unscrambleTaxon(scrambledTaxon, sequence),\n    Sequence: sequence\n  };\n  return NFTokenIDData;\n}\nexports.default = parseNFTokenID;","map":{"version":3,"names":["utils_1","require","bignumber_js_1","__importDefault","ripple_address_codec_1","errors_1","unscrambleTaxon","taxon","tokenSeq","seed","increment","max","scramble","default","multipliedBy","modulo","plus","toNumber","parseNFTokenID","nftokenID","expectedLength","length","XrplError","scrambledTaxon","substring","sequence","NFTokenIDData","NFTokenID","Flags","TransferFee","Issuer","encodeAccountID","hexToBytes","Taxon","Sequence","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/parseNFTokenID.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-magic-numbers -- Doing hex string parsing. */\nimport { hexToBytes } from '@xrplf/isomorphic/utils'\nimport BigNumber from 'bignumber.js'\nimport { encodeAccountID } from 'ripple-address-codec'\n\nimport { XrplError } from '../errors'\n\n/**\n * An issuer may issue several NFTs with the same taxon; to ensure that NFTs are\n * spread across multiple pages we lightly mix the taxon up by using the sequence\n * (which is not under the issuer's direct control) as the seed for a simple linear\n * congruential generator.\n *\n * From the Hull-Dobell theorem we know that f(x)=(m*x+c) mod n will yield a\n * permutation of [0, n) when n is a power of 2 if m is congruent to 1 mod 4 and\n * c is odd. By doing a bitwise XOR with this permutation we can scramble/unscramble\n * the taxon.\n *\n * The XLS-20d proposal fixes m = 384160001 and c = 2459.\n * We then take the modulus of 2^32 which is 4294967296.\n *\n * @param taxon - The scrambled or unscrambled taxon (The XOR is both the encoding and decoding)\n * @param tokenSeq - The account sequence when the token was minted. Used as a psuedorandom seed.\n * @returns the opposite taxon. If the taxon was scrambled it becomes unscrambled, and vice versa.\n */\nfunction unscrambleTaxon(taxon: number, tokenSeq: number): number {\n  /* eslint-disable no-bitwise -- XOR is part of the encode/decode scheme. */\n  const seed = 384160001\n  const increment = 2459\n  const max = 4294967296\n\n  const scramble = new BigNumber(seed)\n    .multipliedBy(tokenSeq)\n    .modulo(max)\n    .plus(increment)\n    .modulo(max)\n    .toNumber()\n  return (taxon ^ scramble) >>> 0\n  /* eslint-enable no-bitwise */\n}\n\n/**\n * Parses an NFTokenID into the information it is encoding.\n *\n * Example decoding:\n *\n * 000B 0539 C35B55AA096BA6D87A6E6C965A6534150DC56E5E 12C5D09E 0000000C\n * +--- +--- +--------------------------------------- +------- +-------\n * |    |    |                                        |        |\n * |    |    |                                        |        `---> Sequence: 12\n * |    |    |                                        |\n * |    |    |                                        `---> Scrambled Taxon: 314,953,886\n * |    |    |                                              Unscrambled Taxon: 1337\n * |    |    |\n * |    |    `---> Issuer: rJoxBSzpXhPtAuqFmqxQtGKjA13jUJWthE\n * |    |\n * |    `---> TransferFee: 1337.0 bps or 13.37%\n * |\n * `---> Flags: 11 -> lsfBurnable, lsfOnlyXRP and lsfTransferable\n *\n * @param nftokenID - A hex string which identifies an NFToken on the ledger.\n * @throws XrplError when given an invalid nftokenID.\n * @returns a decoded nftokenID with all fields encoded within.\n */\nexport default function parseNFTokenID(nftokenID: string): {\n  NFTokenID: string\n  Flags: number\n  TransferFee: number\n  Issuer: string\n  Taxon: number\n  Sequence: number\n} {\n  const expectedLength = 64\n  if (nftokenID.length !== expectedLength) {\n    throw new XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}\n    , but expected a token with length ${expectedLength}`)\n  }\n\n  const scrambledTaxon = new BigNumber(\n    nftokenID.substring(48, 56),\n    16,\n  ).toNumber()\n  const sequence = new BigNumber(nftokenID.substring(56, 64), 16).toNumber()\n\n  const NFTokenIDData = {\n    NFTokenID: nftokenID,\n    Flags: new BigNumber(nftokenID.substring(0, 4), 16).toNumber(),\n    TransferFee: new BigNumber(nftokenID.substring(4, 8), 16).toNumber(),\n    Issuer: encodeAccountID(hexToBytes(nftokenID.substring(8, 48))),\n    Taxon: unscrambleTaxon(scrambledTaxon, sequence),\n    Sequence: sequence,\n  }\n\n  return NFTokenIDData\n}\n"],"mappings":";;;;;;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,MAAAG,sBAAA,GAAAH,OAAA;AAEA,MAAAI,QAAA,GAAAJ,OAAA;AAoBA,SAASK,eAAeA,CAACC,KAAa,EAAEC,QAAgB;EAEtD,MAAMC,IAAI,GAAG,SAAS;EACtB,MAAMC,SAAS,GAAG,IAAI;EACtB,MAAMC,GAAG,GAAG,UAAU;EAEtB,MAAMC,QAAQ,GAAG,IAAIV,cAAA,CAAAW,OAAS,CAACJ,IAAI,CAAC,CACjCK,YAAY,CAACN,QAAQ,CAAC,CACtBO,MAAM,CAACJ,GAAG,CAAC,CACXK,IAAI,CAACN,SAAS,CAAC,CACfK,MAAM,CAACJ,GAAG,CAAC,CACXM,QAAQ,EAAE;EACb,OAAO,CAACV,KAAK,GAAGK,QAAQ,MAAM,CAAC;AAEjC;AAyBA,SAAwBM,cAAcA,CAACC,SAAiB;EAQtD,MAAMC,cAAc,GAAG,EAAE;EACzB,IAAID,SAAS,CAACE,MAAM,KAAKD,cAAc,EAAE;IACvC,MAAM,IAAIf,QAAA,CAAAiB,SAAS,CAAC,+CAA+CH,SAAS,CAACE,MAAM;yCAC9CD,cAAc,EAAE,CAAC;;EAGxD,MAAMG,cAAc,GAAG,IAAIrB,cAAA,CAAAW,OAAS,CAClCM,SAAS,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAC3B,EAAE,CACH,CAACP,QAAQ,EAAE;EACZ,MAAMQ,QAAQ,GAAG,IAAIvB,cAAA,CAAAW,OAAS,CAACM,SAAS,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,EAAE;EAE1E,MAAMS,aAAa,GAAG;IACpBC,SAAS,EAAER,SAAS;IACpBS,KAAK,EAAE,IAAI1B,cAAA,CAAAW,OAAS,CAACM,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,EAAE;IAC9DY,WAAW,EAAE,IAAI3B,cAAA,CAAAW,OAAS,CAACM,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,EAAE;IACpEa,MAAM,EAAE,IAAA1B,sBAAA,CAAA2B,eAAe,EAAC,IAAA/B,OAAA,CAAAgC,UAAU,EAACb,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/DS,KAAK,EAAE3B,eAAe,CAACiB,cAAc,EAAEE,QAAQ,CAAC;IAChDS,QAAQ,EAAET;GACX;EAED,OAAOC,aAAa;AACtB;AA9BAS,OAAA,CAAAtB,OAAA,GAAAK,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}