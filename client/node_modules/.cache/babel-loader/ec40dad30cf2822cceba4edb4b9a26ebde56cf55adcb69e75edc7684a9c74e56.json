{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateXChainClaim = void 0;\nconst common_1 = require(\"./common\");\nfunction validateXChainClaim(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'XChainBridge', common_1.isXChainBridge);\n  (0, common_1.validateRequiredField)(tx, 'XChainClaimID', inp => (0, common_1.isNumber)(inp) || (0, common_1.isString)(inp));\n  (0, common_1.validateRequiredField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateOptionalField)(tx, 'DestinationTag', common_1.isNumber);\n  (0, common_1.validateRequiredField)(tx, 'Amount', common_1.isAmount);\n}\nexports.validateXChainClaim = validateXChainClaim;","map":{"version":3,"names":["common_1","require","validateXChainClaim","tx","validateBaseTransaction","validateRequiredField","isXChainBridge","inp","isNumber","isString","isAccount","validateOptionalField","isAmount","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/XChainClaim.ts"],"sourcesContent":["import { Amount, XChainBridge } from '../common'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isAmount,\n  isNumber,\n  isString,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The XChainClaim transaction completes a cross-chain transfer of value. It\n * allows a user to claim the value on the destination chain - the equivalent\n * of the value locked on the source chain.\n *\n * @category Transaction Models\n */\nexport interface XChainClaim extends BaseTransaction {\n  TransactionType: 'XChainClaim'\n\n  /**\n   * The bridge to use for the transfer.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The unique integer ID for the cross-chain transfer that was referenced in the\n   * corresponding {@link XChainCommit} transaction.\n   */\n  XChainClaimID: number | string\n\n  /**\n   * The destination account on the destination chain. It must exist or the\n   * transaction will fail. However, if the transaction fails in this case, the\n   * sequence number and collected signatures won't be destroyed, and the\n   * transaction can be rerun with a different destination.\n   */\n  Destination: Account\n\n  /**\n   * An integer destination tag.\n   */\n  DestinationTag?: number\n\n  /**\n   * The amount to claim on the destination chain. This must match the amount\n   * attested to on the attestations associated with this XChainClaimID.\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainClaim at runtime.\n *\n * @param tx - An XChainClaim Transaction.\n * @throws When the XChainClaim is malformed.\n */\nexport function validateXChainClaim(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(\n    tx,\n    'XChainClaimID',\n    (inp) => isNumber(inp) || isString(inp),\n  )\n\n  validateRequiredField(tx, 'Destination', isAccount)\n\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AA4DA,SAAgBC,mBAAmBA,CAACC,EAA2B;EAC7D,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,cAAc,EAAEH,QAAA,CAAAM,cAAc,CAAC;EAEzD,IAAAN,QAAA,CAAAK,qBAAqB,EACnBF,EAAE,EACF,eAAe,EACdI,GAAG,IAAK,IAAAP,QAAA,CAAAQ,QAAQ,EAACD,GAAG,CAAC,IAAI,IAAAP,QAAA,CAAAS,QAAQ,EAACF,GAAG,CAAC,CACxC;EAED,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,aAAa,EAAEH,QAAA,CAAAU,SAAS,CAAC;EAEnD,IAAAV,QAAA,CAAAW,qBAAqB,EAACR,EAAE,EAAE,gBAAgB,EAAEH,QAAA,CAAAQ,QAAQ,CAAC;EAErD,IAAAR,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,QAAQ,EAAEH,QAAA,CAAAY,QAAQ,CAAC;AAC/C;AAhBAC,OAAA,CAAAX,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}