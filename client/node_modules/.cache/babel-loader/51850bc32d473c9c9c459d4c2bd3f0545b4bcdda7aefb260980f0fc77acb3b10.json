{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyToRFC1751Mnemonic = exports.rfc1751MnemonicToKey = void 0;\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst rfc1751Words_json_1 = __importDefault(require(\"./rfc1751Words.json\"));\nconst rfc1751WordList = rfc1751Words_json_1.default;\nconst BINARY = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111', '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'];\nfunction keyToBinary(key) {\n  let res = '';\n  for (const num of key) {\n    res += BINARY[num >> 4] + BINARY[num & 0x0f];\n  }\n  return res;\n}\nfunction extract(key, start, length) {\n  const subKey = key.substring(start, start + length);\n  let acc = 0;\n  for (let index = 0; index < subKey.length; index++) {\n    acc = acc * 2 + subKey.charCodeAt(index) - 48;\n  }\n  return acc;\n}\nfunction keyToRFC1751Mnemonic(hex_key) {\n  const buf = (0, utils_1.hexToBytes)(hex_key.replace(/\\s+/gu, ''));\n  let key = bufferToArray(swap128(buf));\n  const padding = [];\n  for (let index = 0; index < (8 - key.length % 8) % 8; index++) {\n    padding.push(0);\n  }\n  key = padding.concat(key);\n  const english = [];\n  for (let index = 0; index < key.length; index += 8) {\n    const subKey = key.slice(index, index + 8);\n    let skbin = keyToBinary(subKey);\n    let parity = 0;\n    for (let j = 0; j < 64; j += 2) {\n      parity += extract(skbin, j, 2);\n    }\n    subKey.push(parity << 6 & 0xff);\n    skbin = keyToBinary(subKey);\n    for (let j = 0; j < 64; j += 11) {\n      english.push(rfc1751WordList[extract(skbin, j, 11)]);\n    }\n  }\n  return english.join(' ');\n}\nexports.keyToRFC1751Mnemonic = keyToRFC1751Mnemonic;\nfunction rfc1751MnemonicToKey(english) {\n  const words = english.split(' ');\n  let key = [];\n  for (let index = 0; index < words.length; index += 6) {\n    const {\n      subKey,\n      word\n    } = getSubKey(words, index);\n    const skbin = keyToBinary(subKey);\n    let parity = 0;\n    for (let j = 0; j < 64; j += 2) {\n      parity += extract(skbin, j, 2);\n    }\n    const cs0 = extract(skbin, 64, 2);\n    const cs1 = parity & 3;\n    if (cs0 !== cs1) {\n      throw new Error(`Parity error at ${word}`);\n    }\n    key = key.concat(subKey.slice(0, 8));\n  }\n  const bufferKey = swap128(Uint8Array.from(key));\n  return bufferKey;\n}\nexports.rfc1751MnemonicToKey = rfc1751MnemonicToKey;\nfunction getSubKey(words, index) {\n  const sublist = words.slice(index, index + 6);\n  let bits = 0;\n  const ch = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  let word = '';\n  for (word of sublist) {\n    const idx = rfc1751WordList.indexOf(word.toUpperCase());\n    if (idx === -1) {\n      throw new TypeError(`Expected an RFC1751 word, but received '${word}'. ` + `For the full list of words in the RFC1751 encoding see https://datatracker.ietf.org/doc/html/rfc1751`);\n    }\n    const shift = (8 - (bits + 11) % 8) % 8;\n    const y = idx << shift;\n    const cl = y >> 16;\n    const cc = y >> 8 & 0xff;\n    const cr = y & 0xff;\n    const t = Math.floor(bits / 8);\n    if (shift > 5) {\n      ch[t] |= cl;\n      ch[t + 1] |= cc;\n      ch[t + 2] |= cr;\n    } else if (shift > -3) {\n      ch[t] |= cc;\n      ch[t + 1] |= cr;\n    } else {\n      ch[t] |= cr;\n    }\n    bits += 11;\n  }\n  const subKey = ch.slice();\n  return {\n    subKey,\n    word\n  };\n}\nfunction bufferToArray(buf) {\n  return Array.prototype.slice.call(buf);\n}\nfunction swap(arr, n, m) {\n  const i = arr[n];\n  arr[n] = arr[m];\n  arr[m] = i;\n}\nfunction swap64(arr) {\n  const len = arr.length;\n  for (let i = 0; i < len; i += 8) {\n    swap(arr, i, i + 7);\n    swap(arr, i + 1, i + 6);\n    swap(arr, i + 2, i + 5);\n    swap(arr, i + 3, i + 4);\n  }\n  return arr;\n}\nfunction swap128(arr) {\n  const reversedBytes = swap64(arr);\n  return (0, utils_1.concat)([reversedBytes.slice(8, 16), reversedBytes.slice(0, 8)]);\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","keyToRFC1751Mnemonic","rfc1751MnemonicToKey","utils_1","require","rfc1751Words_json_1","rfc1751WordList","default","BINARY","keyToBinary","key","res","num","extract","start","length","subKey","substring","acc","index","charCodeAt","hex_key","buf","hexToBytes","replace","bufferToArray","swap128","padding","push","concat","english","slice","skbin","parity","j","join","words","split","word","getSubKey","cs0","cs1","Error","bufferKey","Uint8Array","from","sublist","bits","ch","idx","indexOf","toUpperCase","TypeError","shift","y","cl","cc","cr","t","Math","floor","Array","prototype","call","swap","arr","n","m","i","swap64","len","reversedBytes"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/Wallet/rfc1751.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keyToRFC1751Mnemonic = exports.rfc1751MnemonicToKey = void 0;\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst rfc1751Words_json_1 = __importDefault(require(\"./rfc1751Words.json\"));\nconst rfc1751WordList = rfc1751Words_json_1.default;\nconst BINARY = ['0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',\n    '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'];\nfunction keyToBinary(key) {\n    let res = '';\n    for (const num of key) {\n        res += BINARY[num >> 4] + BINARY[num & 0x0f];\n    }\n    return res;\n}\nfunction extract(key, start, length) {\n    const subKey = key.substring(start, start + length);\n    let acc = 0;\n    for (let index = 0; index < subKey.length; index++) {\n        acc = acc * 2 + subKey.charCodeAt(index) - 48;\n    }\n    return acc;\n}\nfunction keyToRFC1751Mnemonic(hex_key) {\n    const buf = (0, utils_1.hexToBytes)(hex_key.replace(/\\s+/gu, ''));\n    let key = bufferToArray(swap128(buf));\n    const padding = [];\n    for (let index = 0; index < (8 - (key.length % 8)) % 8; index++) {\n        padding.push(0);\n    }\n    key = padding.concat(key);\n    const english = [];\n    for (let index = 0; index < key.length; index += 8) {\n        const subKey = key.slice(index, index + 8);\n        let skbin = keyToBinary(subKey);\n        let parity = 0;\n        for (let j = 0; j < 64; j += 2) {\n            parity += extract(skbin, j, 2);\n        }\n        subKey.push((parity << 6) & 0xff);\n        skbin = keyToBinary(subKey);\n        for (let j = 0; j < 64; j += 11) {\n            english.push(rfc1751WordList[extract(skbin, j, 11)]);\n        }\n    }\n    return english.join(' ');\n}\nexports.keyToRFC1751Mnemonic = keyToRFC1751Mnemonic;\nfunction rfc1751MnemonicToKey(english) {\n    const words = english.split(' ');\n    let key = [];\n    for (let index = 0; index < words.length; index += 6) {\n        const { subKey, word } = getSubKey(words, index);\n        const skbin = keyToBinary(subKey);\n        let parity = 0;\n        for (let j = 0; j < 64; j += 2) {\n            parity += extract(skbin, j, 2);\n        }\n        const cs0 = extract(skbin, 64, 2);\n        const cs1 = parity & 3;\n        if (cs0 !== cs1) {\n            throw new Error(`Parity error at ${word}`);\n        }\n        key = key.concat(subKey.slice(0, 8));\n    }\n    const bufferKey = swap128(Uint8Array.from(key));\n    return bufferKey;\n}\nexports.rfc1751MnemonicToKey = rfc1751MnemonicToKey;\nfunction getSubKey(words, index) {\n    const sublist = words.slice(index, index + 6);\n    let bits = 0;\n    const ch = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let word = '';\n    for (word of sublist) {\n        const idx = rfc1751WordList.indexOf(word.toUpperCase());\n        if (idx === -1) {\n            throw new TypeError(`Expected an RFC1751 word, but received '${word}'. ` +\n                `For the full list of words in the RFC1751 encoding see https://datatracker.ietf.org/doc/html/rfc1751`);\n        }\n        const shift = (8 - ((bits + 11) % 8)) % 8;\n        const y = idx << shift;\n        const cl = y >> 16;\n        const cc = (y >> 8) & 0xff;\n        const cr = y & 0xff;\n        const t = Math.floor(bits / 8);\n        if (shift > 5) {\n            ch[t] |= cl;\n            ch[t + 1] |= cc;\n            ch[t + 2] |= cr;\n        }\n        else if (shift > -3) {\n            ch[t] |= cc;\n            ch[t + 1] |= cr;\n        }\n        else {\n            ch[t] |= cr;\n        }\n        bits += 11;\n    }\n    const subKey = ch.slice();\n    return { subKey, word };\n}\nfunction bufferToArray(buf) {\n    return Array.prototype.slice.call(buf);\n}\nfunction swap(arr, n, m) {\n    const i = arr[n];\n    arr[n] = arr[m];\n    arr[m] = i;\n}\nfunction swap64(arr) {\n    const len = arr.length;\n    for (let i = 0; i < len; i += 8) {\n        swap(arr, i, i + 7);\n        swap(arr, i + 1, i + 6);\n        swap(arr, i + 2, i + 5);\n        swap(arr, i + 3, i + 4);\n    }\n    return arr;\n}\nfunction swap128(arr) {\n    const reversedBytes = swap64(arr);\n    return (0, utils_1.concat)([reversedBytes.slice(8, 16), reversedBytes.slice(0, 8)]);\n}\n//# sourceMappingURL=rfc1751.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}