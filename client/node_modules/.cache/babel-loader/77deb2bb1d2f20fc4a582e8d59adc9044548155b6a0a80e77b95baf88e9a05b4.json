{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePaymentChannelFund = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validatePaymentChannelFund(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Channel === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelFund: missing Channel');\n  }\n  if (typeof tx.Channel !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelFund: Channel must be a string');\n  }\n  if (tx.Amount === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelFund: missing Amount');\n  }\n  if (typeof tx.Amount !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelFund: Amount must be a string');\n  }\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new errors_1.ValidationError('PaymentChannelFund: Expiration must be a number');\n  }\n}\nexports.validatePaymentChannelFund = validatePaymentChannelFund;","map":{"version":3,"names":["errors_1","require","common_1","validatePaymentChannelFund","tx","validateBaseTransaction","Channel","undefined","ValidationError","Amount","Expiration","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/paymentChannelFund.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * Add additional XRP to an open payment channel, and optionally update the\n * expiration time of the channel. Only the source address of the channel can\n * use this transaction.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelFund extends BaseTransaction {\n  TransactionType: 'PaymentChannelFund'\n  /**\n   * The unique ID of the channel to fund as a 64-character hexadecimal\n   * string.\n   */\n  Channel: string\n  /**\n   * Amount of XRP in drops to add to the channel. Must be a positive amount\n   * of XRP.\n   */\n  Amount: string\n  /**\n   * New Expiration time to set for the channel in seconds since the Ripple\n   * Epoch. This must be later than either the current time plus the SettleDelay\n   * of the channel, or the existing Expiration of the channel. After the\n   * Expiration time, any transaction that would access the channel closes the\n   * channel without taking its normal action. Any unspent XRP is returned to\n   * the source address when the channel closes. (Expiration is separate from\n   * the channel's immutable CancelAfter time.) For more information, see the\n   * PayChannel ledger object type.\n   */\n  Expiration?: number\n}\n\n/**\n * Verify the form and type of an PaymentChannelFund at runtime.\n *\n * @param tx - An PaymentChannelFund Transaction.\n * @throws When the PaymentChannelFund is Malformed.\n */\nexport function validatePaymentChannelFund(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Channel === undefined) {\n    throw new ValidationError('PaymentChannelFund: missing Channel')\n  }\n\n  if (typeof tx.Channel !== 'string') {\n    throw new ValidationError('PaymentChannelFund: Channel must be a string')\n  }\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('PaymentChannelFund: missing Amount')\n  }\n\n  if (typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelFund: Amount must be a string')\n  }\n\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new ValidationError('PaymentChannelFund: Expiration must be a number')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAwCA,SAAgBE,0BAA0BA,CAACC,EAA2B;EACpE,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,OAAO,KAAKC,SAAS,EAAE;IAC5B,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IAAI,OAAOJ,EAAE,CAACE,OAAO,KAAK,QAAQ,EAAE;IAClC,MAAM,IAAIN,QAAA,CAAAQ,eAAe,CAAC,8CAA8C,CAAC;;EAG3E,IAAIJ,EAAE,CAACK,MAAM,KAAKF,SAAS,EAAE;IAC3B,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,oCAAoC,CAAC;;EAGjE,IAAI,OAAOJ,EAAE,CAACK,MAAM,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIT,QAAA,CAAAQ,eAAe,CAAC,6CAA6C,CAAC;;EAG1E,IAAIJ,EAAE,CAACM,UAAU,KAAKH,SAAS,IAAI,OAAOH,EAAE,CAACM,UAAU,KAAK,QAAQ,EAAE;IACpE,MAAM,IAAIV,QAAA,CAAAQ,eAAe,CAAC,iDAAiD,CAAC;;AAEhF;AAtBAG,OAAA,CAAAR,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}