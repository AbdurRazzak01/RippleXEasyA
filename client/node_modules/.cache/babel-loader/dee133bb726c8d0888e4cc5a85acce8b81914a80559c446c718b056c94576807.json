{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePaymentChannelClaim = exports.PaymentChannelClaimFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar PaymentChannelClaimFlags;\n(function (PaymentChannelClaimFlags) {\n  PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfRenew\"] = 65536] = \"tfRenew\";\n  PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfClose\"] = 131072] = \"tfClose\";\n})(PaymentChannelClaimFlags || (exports.PaymentChannelClaimFlags = PaymentChannelClaimFlags = {}));\nfunction validatePaymentChannelClaim(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Channel === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelClaim: missing Channel');\n  }\n  if (typeof tx.Channel !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Channel must be a string');\n  }\n  if (tx.Balance !== undefined && typeof tx.Balance !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Balance must be a string');\n  }\n  if (tx.Amount !== undefined && typeof tx.Amount !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Amount must be a string');\n  }\n  if (tx.Signature !== undefined && typeof tx.Signature !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Signature must be a string');\n  }\n  if (tx.PublicKey !== undefined && typeof tx.PublicKey !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: PublicKey must be a string');\n  }\n}\nexports.validatePaymentChannelClaim = validatePaymentChannelClaim;","map":{"version":3,"names":["Object","defineProperty","exports","value","validatePaymentChannelClaim","PaymentChannelClaimFlags","errors_1","require","common_1","tx","validateBaseTransaction","Channel","undefined","ValidationError","Balance","Amount","Signature","PublicKey"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/paymentChannelClaim.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validatePaymentChannelClaim = exports.PaymentChannelClaimFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar PaymentChannelClaimFlags;\n(function (PaymentChannelClaimFlags) {\n    PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfRenew\"] = 65536] = \"tfRenew\";\n    PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfClose\"] = 131072] = \"tfClose\";\n})(PaymentChannelClaimFlags || (exports.PaymentChannelClaimFlags = PaymentChannelClaimFlags = {}));\nfunction validatePaymentChannelClaim(tx) {\n    (0, common_1.validateBaseTransaction)(tx);\n    if (tx.Channel === undefined) {\n        throw new errors_1.ValidationError('PaymentChannelClaim: missing Channel');\n    }\n    if (typeof tx.Channel !== 'string') {\n        throw new errors_1.ValidationError('PaymentChannelClaim: Channel must be a string');\n    }\n    if (tx.Balance !== undefined && typeof tx.Balance !== 'string') {\n        throw new errors_1.ValidationError('PaymentChannelClaim: Balance must be a string');\n    }\n    if (tx.Amount !== undefined && typeof tx.Amount !== 'string') {\n        throw new errors_1.ValidationError('PaymentChannelClaim: Amount must be a string');\n    }\n    if (tx.Signature !== undefined && typeof tx.Signature !== 'string') {\n        throw new errors_1.ValidationError('PaymentChannelClaim: Signature must be a string');\n    }\n    if (tx.PublicKey !== undefined && typeof tx.PublicKey !== 'string') {\n        throw new errors_1.ValidationError('PaymentChannelClaim: PublicKey must be a string');\n    }\n}\nexports.validatePaymentChannelClaim = validatePaymentChannelClaim;\n//# sourceMappingURL=paymentChannelClaim.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,2BAA2B,GAAGF,OAAO,CAACG,wBAAwB,GAAG,KAAK,CAAC;AAC/E,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,IAAIF,wBAAwB;AAC5B,CAAC,UAAUA,wBAAwB,EAAE;EACjCA,wBAAwB,CAACA,wBAAwB,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS;EACjFA,wBAAwB,CAACA,wBAAwB,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,GAAG,SAAS;AACtF,CAAC,EAAEA,wBAAwB,KAAKH,OAAO,CAACG,wBAAwB,GAAGA,wBAAwB,GAAG,CAAC,CAAC,CAAC,CAAC;AAClG,SAASD,2BAA2BA,CAACK,EAAE,EAAE;EACrC,CAAC,CAAC,EAAED,QAAQ,CAACE,uBAAuB,EAAED,EAAE,CAAC;EACzC,IAAIA,EAAE,CAACE,OAAO,KAAKC,SAAS,EAAE;IAC1B,MAAM,IAAIN,QAAQ,CAACO,eAAe,CAAC,sCAAsC,CAAC;EAC9E;EACA,IAAI,OAAOJ,EAAE,CAACE,OAAO,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIL,QAAQ,CAACO,eAAe,CAAC,+CAA+C,CAAC;EACvF;EACA,IAAIJ,EAAE,CAACK,OAAO,KAAKF,SAAS,IAAI,OAAOH,EAAE,CAACK,OAAO,KAAK,QAAQ,EAAE;IAC5D,MAAM,IAAIR,QAAQ,CAACO,eAAe,CAAC,+CAA+C,CAAC;EACvF;EACA,IAAIJ,EAAE,CAACM,MAAM,KAAKH,SAAS,IAAI,OAAOH,EAAE,CAACM,MAAM,KAAK,QAAQ,EAAE;IAC1D,MAAM,IAAIT,QAAQ,CAACO,eAAe,CAAC,8CAA8C,CAAC;EACtF;EACA,IAAIJ,EAAE,CAACO,SAAS,KAAKJ,SAAS,IAAI,OAAOH,EAAE,CAACO,SAAS,KAAK,QAAQ,EAAE;IAChE,MAAM,IAAIV,QAAQ,CAACO,eAAe,CAAC,iDAAiD,CAAC;EACzF;EACA,IAAIJ,EAAE,CAACQ,SAAS,KAAKL,SAAS,IAAI,OAAOH,EAAE,CAACQ,SAAS,KAAK,QAAQ,EAAE;IAChE,MAAM,IAAIX,QAAQ,CAACO,eAAe,CAAC,iDAAiD,CAAC;EACzF;AACJ;AACAX,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}