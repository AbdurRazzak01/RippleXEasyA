{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSignerListSet = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nconst MAX_SIGNERS = 32;\nconst HEX_WALLET_LOCATOR_REGEX = /^[0-9A-Fa-f]{64}$/u;\nfunction validateSignerListSet(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.SignerQuorum === undefined) {\n    throw new errors_1.ValidationError('SignerListSet: missing field SignerQuorum');\n  }\n  if (typeof tx.SignerQuorum !== 'number') {\n    throw new errors_1.ValidationError('SignerListSet: invalid SignerQuorum');\n  }\n  if (tx.SignerQuorum === 0) {\n    return;\n  }\n  if (tx.SignerEntries === undefined) {\n    throw new errors_1.ValidationError('SignerListSet: missing field SignerEntries');\n  }\n  if (!Array.isArray(tx.SignerEntries)) {\n    throw new errors_1.ValidationError('SignerListSet: invalid SignerEntries');\n  }\n  if (tx.SignerEntries.length === 0) {\n    throw new errors_1.ValidationError('SignerListSet: need at least 1 member in SignerEntries');\n  }\n  if (tx.SignerEntries.length > MAX_SIGNERS) {\n    throw new errors_1.ValidationError(`SignerListSet: maximum of ${MAX_SIGNERS} members allowed in SignerEntries`);\n  }\n  for (const entry of tx.SignerEntries) {\n    const signerEntry = entry;\n    const {\n      WalletLocator\n    } = signerEntry.SignerEntry;\n    if (WalletLocator !== undefined && !HEX_WALLET_LOCATOR_REGEX.test(WalletLocator)) {\n      throw new errors_1.ValidationError(`SignerListSet: WalletLocator in SignerEntry must be a 256-bit (32-byte) hexadecimal value`);\n    }\n  }\n}\nexports.validateSignerListSet = validateSignerListSet;","map":{"version":3,"names":["errors_1","require","common_1","MAX_SIGNERS","HEX_WALLET_LOCATOR_REGEX","validateSignerListSet","tx","validateBaseTransaction","SignerQuorum","undefined","ValidationError","SignerEntries","Array","isArray","length","entry","signerEntry","WalletLocator","SignerEntry","test","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/signerListSet.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { SignerEntry } from '../common'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * The SignerListSet transaction creates, replaces, or removes a list of\n * signers that can be used to multi-sign a transaction.\n *\n * @category Transaction Models\n */\nexport interface SignerListSet extends BaseTransaction {\n  TransactionType: 'SignerListSet'\n  /**\n   * A target number for the signer weights. A multi-signature from this list\n   * is valid only if the sum weights of the signatures provided is greater than\n   * or equal to this value. To delete a signer list, use the value 0.\n   */\n  SignerQuorum: number\n  /**\n   * Array of SignerEntry objects, indicating the addresses and weights of\n   * signers in this list. This signer list must have at least 1 member and no\n   * more than 32 members. No address may appear more than once in the list, nor\n   * may the Account submitting the transaction appear in the list.\n   */\n  SignerEntries?: SignerEntry[]\n}\n\nconst MAX_SIGNERS = 32\n\nconst HEX_WALLET_LOCATOR_REGEX = /^[0-9A-Fa-f]{64}$/u\n\n/**\n * Verify the form and type of an SignerListSet at runtime.\n *\n * @param tx - An SignerListSet Transaction.\n * @throws When the SignerListSet is Malformed.\n */\nexport function validateSignerListSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.SignerQuorum === undefined) {\n    throw new ValidationError('SignerListSet: missing field SignerQuorum')\n  }\n\n  if (typeof tx.SignerQuorum !== 'number') {\n    throw new ValidationError('SignerListSet: invalid SignerQuorum')\n  }\n\n  // All other checks are for if SignerQuorum is greater than 0\n  if (tx.SignerQuorum === 0) {\n    return\n  }\n\n  if (tx.SignerEntries === undefined) {\n    throw new ValidationError('SignerListSet: missing field SignerEntries')\n  }\n\n  if (!Array.isArray(tx.SignerEntries)) {\n    throw new ValidationError('SignerListSet: invalid SignerEntries')\n  }\n\n  if (tx.SignerEntries.length === 0) {\n    throw new ValidationError(\n      'SignerListSet: need at least 1 member in SignerEntries',\n    )\n  }\n\n  if (tx.SignerEntries.length > MAX_SIGNERS) {\n    throw new ValidationError(\n      `SignerListSet: maximum of ${MAX_SIGNERS} members allowed in SignerEntries`,\n    )\n  }\n\n  for (const entry of tx.SignerEntries) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Should be a SignerEntry\n    const signerEntry = entry as SignerEntry\n    const { WalletLocator } = signerEntry.SignerEntry\n    if (\n      WalletLocator !== undefined &&\n      !HEX_WALLET_LOCATOR_REGEX.test(WalletLocator)\n    ) {\n      throw new ValidationError(\n        `SignerListSet: WalletLocator in SignerEntry must be a 256-bit (32-byte) hexadecimal value`,\n      )\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAyBA,MAAME,WAAW,GAAG,EAAE;AAEtB,MAAMC,wBAAwB,GAAG,oBAAoB;AAQrD,SAAgBC,qBAAqBA,CAACC,EAA2B;EAC/D,IAAAJ,QAAA,CAAAK,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,YAAY,KAAKC,SAAS,EAAE;IACjC,MAAM,IAAIT,QAAA,CAAAU,eAAe,CAAC,2CAA2C,CAAC;;EAGxE,IAAI,OAAOJ,EAAE,CAACE,YAAY,KAAK,QAAQ,EAAE;IACvC,MAAM,IAAIR,QAAA,CAAAU,eAAe,CAAC,qCAAqC,CAAC;;EAIlE,IAAIJ,EAAE,CAACE,YAAY,KAAK,CAAC,EAAE;IACzB;;EAGF,IAAIF,EAAE,CAACK,aAAa,KAAKF,SAAS,EAAE;IAClC,MAAM,IAAIT,QAAA,CAAAU,eAAe,CAAC,4CAA4C,CAAC;;EAGzE,IAAI,CAACE,KAAK,CAACC,OAAO,CAACP,EAAE,CAACK,aAAa,CAAC,EAAE;IACpC,MAAM,IAAIX,QAAA,CAAAU,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAIJ,EAAE,CAACK,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;IACjC,MAAM,IAAId,QAAA,CAAAU,eAAe,CACvB,wDAAwD,CACzD;;EAGH,IAAIJ,EAAE,CAACK,aAAa,CAACG,MAAM,GAAGX,WAAW,EAAE;IACzC,MAAM,IAAIH,QAAA,CAAAU,eAAe,CACvB,6BAA6BP,WAAW,mCAAmC,CAC5E;;EAGH,KAAK,MAAMY,KAAK,IAAIT,EAAE,CAACK,aAAa,EAAE;IAEpC,MAAMK,WAAW,GAAGD,KAAoB;IACxC,MAAM;MAAEE;IAAa,CAAE,GAAGD,WAAW,CAACE,WAAW;IACjD,IACED,aAAa,KAAKR,SAAS,IAC3B,CAACL,wBAAwB,CAACe,IAAI,CAACF,aAAa,CAAC,EAC7C;MACA,MAAM,IAAIjB,QAAA,CAAAU,eAAe,CACvB,2FAA2F,CAC5F;;;AAGP;AAjDAU,OAAA,CAAAf,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}