{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHex = exports.isFlagEnabled = exports.onlyHasFields = void 0;\nconst HEX_REGEX = /^[0-9A-Fa-f]+$/u;\nfunction onlyHasFields(obj, fields) {\n  return Object.keys(obj).every(key => fields.includes(key));\n}\nexports.onlyHasFields = onlyHasFields;\nfunction isFlagEnabled(Flags, checkFlag) {\n  return (BigInt(checkFlag) & BigInt(Flags)) === BigInt(checkFlag);\n}\nexports.isFlagEnabled = isFlagEnabled;\nfunction isHex(str) {\n  return HEX_REGEX.test(str);\n}\nexports.isHex = isHex;","map":{"version":3,"names":["HEX_REGEX","onlyHasFields","obj","fields","Object","keys","every","key","includes","exports","isFlagEnabled","Flags","checkFlag","BigInt","isHex","str","test"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/utils/index.ts"],"sourcesContent":["const HEX_REGEX = /^[0-9A-Fa-f]+$/u\n\n/**\n * Verify that all fields of an object are in fields.\n *\n * @param obj - Object to verify fields.\n * @param fields - Fields to verify.\n * @returns True if keys in object are all in fields.\n */\nexport function onlyHasFields(\n  obj: Record<string, unknown>,\n  fields: string[],\n): boolean {\n  return Object.keys(obj).every((key: string) => fields.includes(key))\n}\n\n/**\n * Perform bitwise AND (&) to check if a flag is enabled within Flags (as a number).\n *\n * @param Flags - A number that represents flags enabled.\n * @param checkFlag - A specific flag to check if it's enabled within Flags.\n * @returns True if checkFlag is enabled within Flags.\n */\nexport function isFlagEnabled(Flags: number, checkFlag: number): boolean {\n  // eslint-disable-next-line no-bitwise -- flags need bitwise\n  return (BigInt(checkFlag) & BigInt(Flags)) === BigInt(checkFlag)\n}\n\n/**\n * Check if string is in hex format.\n *\n * @param str - The string to check if it's in hex format.\n * @returns True if string is in hex format\n */\nexport function isHex(str: string): boolean {\n  return HEX_REGEX.test(str)\n}\n"],"mappings":";;;;;;AAAA,MAAMA,SAAS,GAAG,iBAAiB;AASnC,SAAgBC,aAAaA,CAC3BC,GAA4B,EAC5BC,MAAgB;EAEhB,OAAOC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,KAAK,CAAEC,GAAW,IAAKJ,MAAM,CAACK,QAAQ,CAACD,GAAG,CAAC,CAAC;AACtE;AALAE,OAAA,CAAAR,aAAA,GAAAA,aAAA;AAcA,SAAgBS,aAAaA,CAACC,KAAa,EAAEC,SAAiB;EAE5D,OAAO,CAACC,MAAM,CAACD,SAAS,CAAC,GAAGC,MAAM,CAACF,KAAK,CAAC,MAAME,MAAM,CAACD,SAAS,CAAC;AAClE;AAHAH,OAAA,CAAAC,aAAA,GAAAA,aAAA;AAWA,SAAgBI,KAAKA,CAACC,GAAW;EAC/B,OAAOf,SAAS,CAACgB,IAAI,CAACD,GAAG,CAAC;AAC5B;AAFAN,OAAA,CAAAK,KAAA,GAAAA,KAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}