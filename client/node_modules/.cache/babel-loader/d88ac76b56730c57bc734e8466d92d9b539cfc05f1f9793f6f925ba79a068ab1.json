{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenCreateOffer = exports.NFTokenCreateOfferFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nvar NFTokenCreateOfferFlags;\n(function (NFTokenCreateOfferFlags) {\n  NFTokenCreateOfferFlags[NFTokenCreateOfferFlags[\"tfSellNFToken\"] = 1] = \"tfSellNFToken\";\n})(NFTokenCreateOfferFlags || (exports.NFTokenCreateOfferFlags = NFTokenCreateOfferFlags = {}));\nfunction validateNFTokenSellOfferCases(tx) {\n  if (tx.Owner != null) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: Owner must not be present for sell offers');\n  }\n}\nfunction validateNFTokenBuyOfferCases(tx) {\n  if (tx.Owner == null) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: Owner must be present for buy offers');\n  }\n  if ((0, common_1.parseAmountValue)(tx.Amount) <= 0) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: Amount must be greater than 0 for buy offers');\n  }\n}\nfunction validateNFTokenCreateOffer(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Account === tx.Owner) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: Owner and Account must not be equal');\n  }\n  if (tx.Account === tx.Destination) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: Destination and Account must not be equal');\n  }\n  (0, common_1.validateOptionalField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateOptionalField)(tx, 'Owner', common_1.isAccount);\n  if (tx.NFTokenID == null) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: missing field NFTokenID');\n  }\n  if (!(0, common_1.isAmount)(tx.Amount)) {\n    throw new errors_1.ValidationError('NFTokenCreateOffer: invalid Amount');\n  }\n  if (typeof tx.Flags === 'number' && (0, utils_1.isFlagEnabled)(tx.Flags, NFTokenCreateOfferFlags.tfSellNFToken)) {\n    validateNFTokenSellOfferCases(tx);\n  } else {\n    validateNFTokenBuyOfferCases(tx);\n  }\n}\nexports.validateNFTokenCreateOffer = validateNFTokenCreateOffer;","map":{"version":3,"names":["errors_1","require","utils_1","common_1","NFTokenCreateOfferFlags","exports","validateNFTokenSellOfferCases","tx","Owner","ValidationError","validateNFTokenBuyOfferCases","parseAmountValue","Amount","validateNFTokenCreateOffer","validateBaseTransaction","Account","Destination","validateOptionalField","isAccount","NFTokenID","isAmount","Flags","isFlagEnabled","tfSellNFToken"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/NFTokenCreateOffer.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\nimport { isFlagEnabled } from '../utils'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  validateBaseTransaction,\n  isAmount,\n  parseAmountValue,\n  isAccount,\n  validateOptionalField,\n  Account,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * Transaction Flags for an NFTokenCreateOffer Transaction.\n *\n * @category Transaction Flags\n */\nexport enum NFTokenCreateOfferFlags {\n  /**\n   * If set, indicates that the offer is a sell offer.\n   * Otherwise, it is a buy offer.\n   */\n  tfSellNFToken = 0x00000001,\n}\n\n/**\n * Map of flags to boolean values representing {@link NFTokenCreateOffer} transaction\n * flags.\n *\n * @category Transaction Flags\n */\nexport interface NFTokenCreateOfferFlagsInterface extends GlobalFlags {\n  tfSellNFToken?: boolean\n}\n\n/**\n * The NFTokenCreateOffer transaction creates either an offer to buy an\n * NFT the submitting account does not own, or an offer to sell an NFT\n * the submitting account does own.\n */\nexport interface NFTokenCreateOffer extends BaseTransaction {\n  TransactionType: 'NFTokenCreateOffer'\n  /**\n   * Identifies the NFTokenID of the NFToken object that the\n   * offer references.\n   */\n  NFTokenID: string\n  /**\n   * Indicates the amount expected or offered for the Token.\n   *\n   * The amount must be non-zero, except when this is a sell\n   * offer and the asset is XRP. This would indicate that the current\n   * owner of the token is giving it away free, either to anyone at all,\n   * or to the account identified by the Destination field.\n   */\n  Amount: Amount\n  /**\n   * Indicates the AccountID of the account that owns the\n   * corresponding NFToken.\n   *\n   * If the offer is to buy a token, this field must be present\n   * and it must be different than Account (since an offer to\n   * buy a token one already holds is meaningless).\n   *\n   * If the offer is to sell a token, this field must not be\n   * present, as the owner is, implicitly, the same as Account\n   * (since an offer to sell a token one doesn't already hold\n   * is meaningless).\n   */\n  Owner?: Account\n  /**\n   * Indicates the time after which the offer will no longer\n   * be valid. The value is the number of seconds since the\n   * Ripple Epoch.\n   */\n  Expiration?: number\n  /**\n   * If present, indicates that this offer may only be\n   * accepted by the specified account. Attempts by other\n   * accounts to accept this offer MUST fail.\n   */\n  Destination?: Account\n  Flags?: number | NFTokenCreateOfferFlagsInterface\n}\n\nexport interface NFTokenCreateOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0 or later\n  offer_id?: string\n}\n\nfunction validateNFTokenSellOfferCases(tx: Record<string, unknown>): void {\n  if (tx.Owner != null) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner must not be present for sell offers',\n    )\n  }\n}\n\nfunction validateNFTokenBuyOfferCases(tx: Record<string, unknown>): void {\n  if (tx.Owner == null) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner must be present for buy offers',\n    )\n  }\n\n  if (parseAmountValue(tx.Amount) <= 0) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Amount must be greater than 0 for buy offers',\n    )\n  }\n}\n\n/**\n * Verify the form and type of an NFTokenCreateOffer at runtime.\n *\n * @param tx - An NFTokenCreateOffer Transaction.\n * @throws When the NFTokenCreateOffer is Malformed.\n */\nexport function validateNFTokenCreateOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Account === tx.Owner) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Owner and Account must not be equal',\n    )\n  }\n\n  if (tx.Account === tx.Destination) {\n    throw new ValidationError(\n      'NFTokenCreateOffer: Destination and Account must not be equal',\n    )\n  }\n\n  validateOptionalField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'Owner', isAccount)\n\n  if (tx.NFTokenID == null) {\n    throw new ValidationError('NFTokenCreateOffer: missing field NFTokenID')\n  }\n\n  if (!isAmount(tx.Amount)) {\n    throw new ValidationError('NFTokenCreateOffer: invalid Amount')\n  }\n\n  if (\n    typeof tx.Flags === 'number' &&\n    isFlagEnabled(tx.Flags, NFTokenCreateOfferFlags.tfSellNFToken)\n  ) {\n    validateNFTokenSellOfferCases(tx)\n  } else {\n    validateNFTokenBuyOfferCases(tx)\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,QAAA,GAAAF,OAAA;AAiBA,IAAYG,uBAMX;AAND,WAAYA,uBAAuB;EAKjCA,uBAAA,CAAAA,uBAAA,wCAA0B;AAC5B,CAAC,EANWA,uBAAuB,KAAAC,OAAA,CAAAD,uBAAA,GAAvBA,uBAAuB;AAyEnC,SAASE,6BAA6BA,CAACC,EAA2B;EAChE,IAAIA,EAAE,CAACC,KAAK,IAAI,IAAI,EAAE;IACpB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CACvB,+DAA+D,CAChE;;AAEL;AAEA,SAASC,4BAA4BA,CAACH,EAA2B;EAC/D,IAAIA,EAAE,CAACC,KAAK,IAAI,IAAI,EAAE;IACpB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CACvB,0DAA0D,CAC3D;;EAGH,IAAI,IAAAN,QAAA,CAAAQ,gBAAgB,EAACJ,EAAE,CAACK,MAAM,CAAC,IAAI,CAAC,EAAE;IACpC,MAAM,IAAIZ,QAAA,CAAAS,eAAe,CACvB,kEAAkE,CACnE;;AAEL;AAQA,SAAgBI,0BAA0BA,CAACN,EAA2B;EACpE,IAAAJ,QAAA,CAAAW,uBAAuB,EAACP,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACQ,OAAO,KAAKR,EAAE,CAACC,KAAK,EAAE;IAC3B,MAAM,IAAIR,QAAA,CAAAS,eAAe,CACvB,yDAAyD,CAC1D;;EAGH,IAAIF,EAAE,CAACQ,OAAO,KAAKR,EAAE,CAACS,WAAW,EAAE;IACjC,MAAM,IAAIhB,QAAA,CAAAS,eAAe,CACvB,+DAA+D,CAChE;;EAGH,IAAAN,QAAA,CAAAc,qBAAqB,EAACV,EAAE,EAAE,aAAa,EAAEJ,QAAA,CAAAe,SAAS,CAAC;EACnD,IAAAf,QAAA,CAAAc,qBAAqB,EAACV,EAAE,EAAE,OAAO,EAAEJ,QAAA,CAAAe,SAAS,CAAC;EAE7C,IAAIX,EAAE,CAACY,SAAS,IAAI,IAAI,EAAE;IACxB,MAAM,IAAInB,QAAA,CAAAS,eAAe,CAAC,6CAA6C,CAAC;;EAG1E,IAAI,CAAC,IAAAN,QAAA,CAAAiB,QAAQ,EAACb,EAAE,CAACK,MAAM,CAAC,EAAE;IACxB,MAAM,IAAIZ,QAAA,CAAAS,eAAe,CAAC,oCAAoC,CAAC;;EAGjE,IACE,OAAOF,EAAE,CAACc,KAAK,KAAK,QAAQ,IAC5B,IAAAnB,OAAA,CAAAoB,aAAa,EAACf,EAAE,CAACc,KAAK,EAAEjB,uBAAuB,CAACmB,aAAa,CAAC,EAC9D;IACAjB,6BAA6B,CAACC,EAAE,CAAC;GAClC,MAAM;IACLG,4BAA4B,CAACH,EAAE,CAAC;;AAEpC;AAlCAF,OAAA,CAAAQ,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}