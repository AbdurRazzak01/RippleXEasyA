{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deriveXAddress = exports.deriveAddress = exports.deriveKeypair = void 0;\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst ripple_keypairs_1 = require(\"ripple-keypairs\");\nObject.defineProperty(exports, \"deriveKeypair\", {\n  enumerable: true,\n  get: function () {\n    return ripple_keypairs_1.deriveKeypair;\n  }\n});\nObject.defineProperty(exports, \"deriveAddress\", {\n  enumerable: true,\n  get: function () {\n    return ripple_keypairs_1.deriveAddress;\n  }\n});\nfunction deriveXAddress(options) {\n  const classicAddress = (0, ripple_keypairs_1.deriveAddress)(options.publicKey);\n  return (0, ripple_address_codec_1.classicAddressToXAddress)(classicAddress, options.tag, options.test);\n}\nexports.deriveXAddress = deriveXAddress;","map":{"version":3,"names":["ripple_address_codec_1","require","ripple_keypairs_1","Object","defineProperty","exports","enumerable","get","deriveKeypair","deriveAddress","deriveXAddress","options","classicAddress","publicKey","classicAddressToXAddress","tag","test"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/derive.ts"],"sourcesContent":["import { classicAddressToXAddress } from 'ripple-address-codec'\nimport { deriveKeypair, deriveAddress } from 'ripple-keypairs'\n\n/**\n * Derive an X-Address from a public key and a destination tag.\n *\n * @param options - Public key and destination tag to encode as an X-Address.\n * @param options.publicKey - The public key corresponding to an address.\n * @param options.tag - A destination tag to encode into an X-address. False indicates no destination tag.\n * @param options.test - Whether this address is for use in Testnet.\n * @returns X-Address.\n * @category Utilities\n */\nfunction deriveXAddress(options: {\n  publicKey: string\n  tag: number | false\n  test: boolean\n}): string {\n  const classicAddress = deriveAddress(options.publicKey)\n  return classicAddressToXAddress(classicAddress, options.tag, options.test)\n}\n\nexport { deriveKeypair, deriveAddress, deriveXAddress }\n"],"mappings":";;;;;;AAAA,MAAAA,sBAAA,GAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AAqBSE,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OArBAL,iBAAA,CAAAM,aAAa;EAAA;AAAA;AAqBEL,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OArBAL,iBAAA,CAAAO,aAAa;EAAA;AAAA;AAYrC,SAASC,cAAcA,CAACC,OAIvB;EACC,MAAMC,cAAc,GAAG,IAAAV,iBAAA,CAAAO,aAAa,EAACE,OAAO,CAACE,SAAS,CAAC;EACvD,OAAO,IAAAb,sBAAA,CAAAc,wBAAwB,EAACF,cAAc,EAAED,OAAO,CAACI,GAAG,EAAEJ,OAAO,CAACK,IAAI,CAAC;AAC5E;AAEuCX,OAAA,CAAAK,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}