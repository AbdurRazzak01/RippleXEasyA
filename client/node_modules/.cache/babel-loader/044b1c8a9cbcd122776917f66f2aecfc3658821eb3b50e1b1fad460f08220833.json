{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst errors_1 = require(\"../errors\");\nfunction unscrambleTaxon(taxon, tokenSeq) {\n  const seed = 384160001;\n  const increment = 2459;\n  const max = 4294967296;\n  const scramble = new bignumber_js_1.default(seed).multipliedBy(tokenSeq).modulo(max).plus(increment).modulo(max).toNumber();\n  return (taxon ^ scramble) >>> 0;\n}\nfunction parseNFTokenID(nftokenID) {\n  const expectedLength = 64;\n  if (nftokenID.length !== expectedLength) {\n    throw new errors_1.XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}\n    , but expected a token with length ${expectedLength}`);\n  }\n  const scrambledTaxon = new bignumber_js_1.default(nftokenID.substring(48, 56), 16).toNumber();\n  const sequence = new bignumber_js_1.default(nftokenID.substring(56, 64), 16).toNumber();\n  const NFTokenIDData = {\n    NFTokenID: nftokenID,\n    Flags: new bignumber_js_1.default(nftokenID.substring(0, 4), 16).toNumber(),\n    TransferFee: new bignumber_js_1.default(nftokenID.substring(4, 8), 16).toNumber(),\n    Issuer: (0, ripple_address_codec_1.encodeAccountID)((0, utils_1.hexToBytes)(nftokenID.substring(8, 48))),\n    Taxon: unscrambleTaxon(scrambledTaxon, sequence),\n    Sequence: sequence\n  };\n  return NFTokenIDData;\n}\nexports.default = parseNFTokenID;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","utils_1","require","bignumber_js_1","ripple_address_codec_1","errors_1","unscrambleTaxon","taxon","tokenSeq","seed","increment","max","scramble","default","multipliedBy","modulo","plus","toNumber","parseNFTokenID","nftokenID","expectedLength","length","XrplError","scrambledTaxon","substring","sequence","NFTokenIDData","NFTokenID","Flags","TransferFee","Issuer","encodeAccountID","hexToBytes","Taxon","Sequence"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/parseNFTokenID.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst ripple_address_codec_1 = require(\"ripple-address-codec\");\nconst errors_1 = require(\"../errors\");\nfunction unscrambleTaxon(taxon, tokenSeq) {\n    const seed = 384160001;\n    const increment = 2459;\n    const max = 4294967296;\n    const scramble = new bignumber_js_1.default(seed)\n        .multipliedBy(tokenSeq)\n        .modulo(max)\n        .plus(increment)\n        .modulo(max)\n        .toNumber();\n    return (taxon ^ scramble) >>> 0;\n}\nfunction parseNFTokenID(nftokenID) {\n    const expectedLength = 64;\n    if (nftokenID.length !== expectedLength) {\n        throw new errors_1.XrplError(`Attempting to parse a nftokenID with length ${nftokenID.length}\n    , but expected a token with length ${expectedLength}`);\n    }\n    const scrambledTaxon = new bignumber_js_1.default(nftokenID.substring(48, 56), 16).toNumber();\n    const sequence = new bignumber_js_1.default(nftokenID.substring(56, 64), 16).toNumber();\n    const NFTokenIDData = {\n        NFTokenID: nftokenID,\n        Flags: new bignumber_js_1.default(nftokenID.substring(0, 4), 16).toNumber(),\n        TransferFee: new bignumber_js_1.default(nftokenID.substring(4, 8), 16).toNumber(),\n        Issuer: (0, ripple_address_codec_1.encodeAccountID)((0, utils_1.hexToBytes)(nftokenID.substring(8, 48))),\n        Taxon: unscrambleTaxon(scrambledTaxon, sequence),\n        Sequence: sequence,\n    };\n    return NFTokenIDData;\n}\nexports.default = parseNFTokenID;\n//# sourceMappingURL=parseNFTokenID.js.map"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,OAAO,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAClD,MAAMC,cAAc,GAAGT,eAAe,CAACQ,OAAO,CAAC,cAAc,CAAC,CAAC;AAC/D,MAAME,sBAAsB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AAC9D,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,SAASI,eAAeA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACtC,MAAMC,IAAI,GAAG,SAAS;EACtB,MAAMC,SAAS,GAAG,IAAI;EACtB,MAAMC,GAAG,GAAG,UAAU;EACtB,MAAMC,QAAQ,GAAG,IAAIT,cAAc,CAACU,OAAO,CAACJ,IAAI,CAAC,CAC5CK,YAAY,CAACN,QAAQ,CAAC,CACtBO,MAAM,CAACJ,GAAG,CAAC,CACXK,IAAI,CAACN,SAAS,CAAC,CACfK,MAAM,CAACJ,GAAG,CAAC,CACXM,QAAQ,CAAC,CAAC;EACf,OAAO,CAACV,KAAK,GAAGK,QAAQ,MAAM,CAAC;AACnC;AACA,SAASM,cAAcA,CAACC,SAAS,EAAE;EAC/B,MAAMC,cAAc,GAAG,EAAE;EACzB,IAAID,SAAS,CAACE,MAAM,KAAKD,cAAc,EAAE;IACrC,MAAM,IAAIf,QAAQ,CAACiB,SAAS,CAAE,+CAA8CH,SAAS,CAACE,MAAO;AACrG,yCAAyCD,cAAe,EAAC,CAAC;EACtD;EACA,MAAMG,cAAc,GAAG,IAAIpB,cAAc,CAACU,OAAO,CAACM,SAAS,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,CAAC,CAAC;EAC7F,MAAMQ,QAAQ,GAAG,IAAItB,cAAc,CAACU,OAAO,CAACM,SAAS,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,CAAC,CAAC;EACvF,MAAMS,aAAa,GAAG;IAClBC,SAAS,EAAER,SAAS;IACpBS,KAAK,EAAE,IAAIzB,cAAc,CAACU,OAAO,CAACM,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,CAAC,CAAC;IAC3EY,WAAW,EAAE,IAAI1B,cAAc,CAACU,OAAO,CAACM,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAACP,QAAQ,CAAC,CAAC;IACjFa,MAAM,EAAE,CAAC,CAAC,EAAE1B,sBAAsB,CAAC2B,eAAe,EAAE,CAAC,CAAC,EAAE9B,OAAO,CAAC+B,UAAU,EAAEb,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACxGS,KAAK,EAAE3B,eAAe,CAACiB,cAAc,EAAEE,QAAQ,CAAC;IAChDS,QAAQ,EAAET;EACd,CAAC;EACD,OAAOC,aAAa;AACxB;AACA3B,OAAO,CAACc,OAAO,GAAGK,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}