{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isoTimeToRippleTime = exports.rippleTimeToISOTime = exports.unixTimeToRippleTime = exports.rippleTimeToUnixTime = void 0;\nconst RIPPLE_EPOCH_DIFF = 0x386d4380;\nfunction rippleTimeToUnixTime(rpepoch) {\n  return (rpepoch + RIPPLE_EPOCH_DIFF) * 1000;\n}\nexports.rippleTimeToUnixTime = rippleTimeToUnixTime;\nfunction unixTimeToRippleTime(timestamp) {\n  return Math.round(timestamp / 1000) - RIPPLE_EPOCH_DIFF;\n}\nexports.unixTimeToRippleTime = unixTimeToRippleTime;\nfunction rippleTimeToISOTime(rippleTime) {\n  return new Date(rippleTimeToUnixTime(rippleTime)).toISOString();\n}\nexports.rippleTimeToISOTime = rippleTimeToISOTime;\nfunction isoTimeToRippleTime(iso8601) {\n  const isoDate = typeof iso8601 === 'string' ? new Date(iso8601) : iso8601;\n  return unixTimeToRippleTime(isoDate.getTime());\n}\nexports.isoTimeToRippleTime = isoTimeToRippleTime;","map":{"version":3,"names":["RIPPLE_EPOCH_DIFF","rippleTimeToUnixTime","rpepoch","exports","unixTimeToRippleTime","timestamp","Math","round","rippleTimeToISOTime","rippleTime","Date","toISOString","isoTimeToRippleTime","iso8601","isoDate","getTime"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/timeConversion.ts"],"sourcesContent":["const RIPPLE_EPOCH_DIFF = 0x386d4380\n\n/**\n * Convert a ripple timestamp to a unix timestamp.\n *\n * @param rpepoch - (seconds since 1/1/2000 GMT).\n * @returns Milliseconds since unix epoch.\n * @category Utilities\n */\nfunction rippleTimeToUnixTime(rpepoch: number): number {\n  return (rpepoch + RIPPLE_EPOCH_DIFF) * 1000\n}\n\n/**\n * Convert a unix timestamp to a ripple timestamp.\n *\n * @param timestamp - (ms since unix epoch).\n * @returns Seconds since Ripple Epoch (1/1/2000 GMT).\n * @category Utilities\n */\nfunction unixTimeToRippleTime(timestamp: number): number {\n  return Math.round(timestamp / 1000) - RIPPLE_EPOCH_DIFF\n}\n\n/**\n * Convert a ripple timestamp to an Iso8601 timestamp.\n *\n * @param rippleTime - Is the number of seconds since Ripple Epoch (1/1/2000 GMT).\n * @returns Iso8601 international standard date format.\n * @category Utilities\n */\nfunction rippleTimeToISOTime(rippleTime: number): string {\n  return new Date(rippleTimeToUnixTime(rippleTime)).toISOString()\n}\n\n/**\n * Convert an ISO8601 timestmap to a ripple timestamp.\n *\n * @param iso8601 - International standard date format.\n * @returns Seconds since ripple epoch (1/1/2000 GMT).\n * @category Utilities\n */\nfunction isoTimeToRippleTime(iso8601: string | Date): number {\n  const isoDate = typeof iso8601 === 'string' ? new Date(iso8601) : iso8601\n  return unixTimeToRippleTime(isoDate.getTime())\n}\n\nexport {\n  rippleTimeToUnixTime,\n  unixTimeToRippleTime,\n  rippleTimeToISOTime,\n  isoTimeToRippleTime,\n}\n"],"mappings":";;;;;;AAAA,MAAMA,iBAAiB,GAAG,UAAU;AASpC,SAASC,oBAAoBA,CAACC,OAAe;EAC3C,OAAO,CAACA,OAAO,GAAGF,iBAAiB,IAAI,IAAI;AAC7C;AAqCEG,OAAA,CAAAF,oBAAA,GAAAA,oBAAA;AA5BF,SAASG,oBAAoBA,CAACC,SAAiB;EAC7C,OAAOC,IAAI,CAACC,KAAK,CAACF,SAAS,GAAG,IAAI,CAAC,GAAGL,iBAAiB;AACzD;AA2BEG,OAAA,CAAAC,oBAAA,GAAAA,oBAAA;AAlBF,SAASI,mBAAmBA,CAACC,UAAkB;EAC7C,OAAO,IAAIC,IAAI,CAACT,oBAAoB,CAACQ,UAAU,CAAC,CAAC,CAACE,WAAW,EAAE;AACjE;AAiBER,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AARF,SAASI,mBAAmBA,CAACC,OAAsB;EACjD,MAAMC,OAAO,GAAG,OAAOD,OAAO,KAAK,QAAQ,GAAG,IAAIH,IAAI,CAACG,OAAO,CAAC,GAAGA,OAAO;EACzE,OAAOT,oBAAoB,CAACU,OAAO,CAACC,OAAO,EAAE,CAAC;AAChD;AAMEZ,OAAA,CAAAS,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}