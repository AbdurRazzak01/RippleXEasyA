{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XRPLFaucetError = exports.NotFoundError = exports.ValidationError = exports.ResponseFormatError = exports.TimeoutError = exports.RippledNotInitializedError = exports.DisconnectedError = exports.NotConnectedError = exports.RippledError = exports.ConnectionError = exports.UnexpectedError = exports.XrplError = void 0;\nclass XrplError extends Error {\n  constructor(message = '', data) {\n    super(message);\n    this.name = this.constructor.name;\n    this.message = message;\n    this.data = data;\n    if (Error.captureStackTrace != null) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n  toString() {\n    let result = `[${this.name}(${this.message}`;\n    if (this.data) {\n      result += `, ${JSON.stringify(this.data)}`;\n    }\n    result += ')]';\n    return result;\n  }\n  inspect() {\n    return this.toString();\n  }\n}\nexports.XrplError = XrplError;\nclass RippledError extends XrplError {}\nexports.RippledError = RippledError;\nclass UnexpectedError extends XrplError {}\nexports.UnexpectedError = UnexpectedError;\nclass ConnectionError extends XrplError {}\nexports.ConnectionError = ConnectionError;\nclass NotConnectedError extends ConnectionError {}\nexports.NotConnectedError = NotConnectedError;\nclass DisconnectedError extends ConnectionError {}\nexports.DisconnectedError = DisconnectedError;\nclass RippledNotInitializedError extends ConnectionError {}\nexports.RippledNotInitializedError = RippledNotInitializedError;\nclass TimeoutError extends ConnectionError {}\nexports.TimeoutError = TimeoutError;\nclass ResponseFormatError extends ConnectionError {}\nexports.ResponseFormatError = ResponseFormatError;\nclass ValidationError extends XrplError {}\nexports.ValidationError = ValidationError;\nclass XRPLFaucetError extends XrplError {}\nexports.XRPLFaucetError = XRPLFaucetError;\nclass NotFoundError extends XrplError {\n  constructor(message = 'Not found') {\n    super(message);\n  }\n}\nexports.NotFoundError = NotFoundError;","map":{"version":3,"names":["XrplError","Error","constructor","message","data","name","captureStackTrace","toString","result","JSON","stringify","inspect","exports","RippledError","UnexpectedError","ConnectionError","NotConnectedError","DisconnectedError","RippledNotInitializedError","TimeoutError","ResponseFormatError","ValidationError","XRPLFaucetError","NotFoundError"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/errors.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file -- Errors can be defined in the same file */\n/**\n * Base Error class for xrpl.js. All Errors thrown by xrpl.js should throw\n * XrplErrors.\n *\n * @category Errors\n */\nclass XrplError extends Error {\n  public readonly name: string\n  public readonly message: string\n  public readonly data?: unknown\n\n  /**\n   * Construct an XrplError.\n   *\n   * @param message - The error message.\n   * @param data - The data that caused the error.\n   */\n  public constructor(message = '', data?: unknown) {\n    super(message)\n\n    this.name = this.constructor.name\n    this.message = message\n    this.data = data\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- `captureStackTrace` can be null in browsers\n    if (Error.captureStackTrace != null) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n\n  /**\n   * Converts the Error to a human-readable String form.\n   *\n   * @returns The String output of the Error.\n   */\n  public toString(): string {\n    let result = `[${this.name}(${this.message}`\n    if (this.data) {\n      result += `, ${JSON.stringify(this.data)}`\n    }\n    result += ')]'\n    return result\n  }\n\n  /**\n   * Console.log in node uses util.inspect on object, and util.inspect allows\n   * us to customize its output:\n   * https://nodejs.org/api/util.html#util_custom_inspect_function_on_objects.\n   *\n   * @returns The String output of the Error.\n   */\n  public inspect(): string {\n    return this.toString()\n  }\n}\n\n/**\n * Error thrown when rippled responds with an error.\n *\n * @category Errors\n */\nclass RippledError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js cannot specify error type.\n *\n * @category Errors\n */\nclass UnexpectedError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js has an error with connection to rippled.\n *\n * @category Errors\n */\nclass ConnectionError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js is not connected to rippled server.\n *\n * @category Errors\n */\nclass NotConnectedError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js has disconnected from rippled server.\n *\n * @category Errors\n */\nclass DisconnectedError extends ConnectionError {}\n\n/**\n * Error thrown when rippled is not initialized.\n *\n * @category Errors\n */\nclass RippledNotInitializedError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js times out.\n *\n * @category Errors\n */\nclass TimeoutError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js sees a response in the wrong format.\n *\n * @category Errors\n */\nclass ResponseFormatError extends ConnectionError {}\n\n/**\n * Error thrown when xrpl.js sees a malformed transaction.\n *\n * @category Errors\n */\nclass ValidationError extends XrplError {}\n\n/**\n * Error thrown when a client cannot generate a wallet from the testnet/devnet\n * faucets, or when the client cannot infer the faucet URL (i.e. when the Client\n * is connected to mainnet).\n *\n * @category Errors\n */\nclass XRPLFaucetError extends XrplError {}\n\n/**\n * Error thrown when xrpl.js cannot retrieve a transaction, ledger, account, etc.\n * From rippled.\n *\n * @category Errors\n */\nclass NotFoundError extends XrplError {\n  /**\n   * Construct an XrplError.\n   *\n   * @param message - The error message. Defaults to \"Not found\".\n   */\n  public constructor(message = 'Not found') {\n    super(message)\n  }\n}\n\nexport {\n  XrplError,\n  UnexpectedError,\n  ConnectionError,\n  RippledError,\n  NotConnectedError,\n  DisconnectedError,\n  RippledNotInitializedError,\n  TimeoutError,\n  ResponseFormatError,\n  ValidationError,\n  NotFoundError,\n  XRPLFaucetError,\n}\n"],"mappings":";;;;;;AAOA,MAAMA,SAAU,SAAQC,KAAK;EAW3BC,YAAmBC,OAAO,GAAG,EAAE,EAAEC,IAAc;IAC7C,KAAK,CAACD,OAAO,CAAC;IAEd,IAAI,CAACE,IAAI,GAAG,IAAI,CAACH,WAAW,CAACG,IAAI;IACjC,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAEhB,IAAIH,KAAK,CAACK,iBAAiB,IAAI,IAAI,EAAE;MACnCL,KAAK,CAACK,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACJ,WAAW,CAAC;;EAEnD;EAOOK,QAAQA,CAAA;IACb,IAAIC,MAAM,GAAG,IAAI,IAAI,CAACH,IAAI,IAAI,IAAI,CAACF,OAAO,EAAE;IAC5C,IAAI,IAAI,CAACC,IAAI,EAAE;MACbI,MAAM,IAAI,KAAKC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,IAAI,CAAC,EAAE;;IAE5CI,MAAM,IAAI,IAAI;IACd,OAAOA,MAAM;EACf;EASOG,OAAOA,CAAA;IACZ,OAAO,IAAI,CAACJ,QAAQ,EAAE;EACxB;;AA6FAK,OAAA,CAAAZ,SAAA,GAAAA,SAAA;AArFF,MAAMa,YAAa,SAAQb,SAAS;AAwFlCY,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAjFF,MAAMC,eAAgB,SAAQd,SAAS;AA+ErCY,OAAA,CAAAE,eAAA,GAAAA,eAAA;AAxEF,MAAMC,eAAgB,SAAQf,SAAS;AAyErCY,OAAA,CAAAG,eAAA,GAAAA,eAAA;AAlEF,MAAMC,iBAAkB,SAAQD,eAAe;AAoE7CH,OAAA,CAAAI,iBAAA,GAAAA,iBAAA;AA7DF,MAAMC,iBAAkB,SAAQF,eAAe;AA8D7CH,OAAA,CAAAK,iBAAA,GAAAA,iBAAA;AAvDF,MAAMC,0BAA2B,SAAQH,eAAe;AAwDtDH,OAAA,CAAAM,0BAAA,GAAAA,0BAAA;AAjDF,MAAMC,YAAa,SAAQJ,eAAe;AAkDxCH,OAAA,CAAAO,YAAA,GAAAA,YAAA;AA3CF,MAAMC,mBAAoB,SAAQL,eAAe;AA4C/CH,OAAA,CAAAQ,mBAAA,GAAAA,mBAAA;AArCF,MAAMC,eAAgB,SAAQrB,SAAS;AAsCrCY,OAAA,CAAAS,eAAA,GAAAA,eAAA;AA7BF,MAAMC,eAAgB,SAAQtB,SAAS;AA+BrCY,OAAA,CAAAU,eAAA,GAAAA,eAAA;AAvBF,MAAMC,aAAc,SAAQvB,SAAS;EAMnCE,YAAmBC,OAAO,GAAG,WAAW;IACtC,KAAK,CAACA,OAAO,CAAC;EAChB;;AAcAS,OAAA,CAAAW,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}