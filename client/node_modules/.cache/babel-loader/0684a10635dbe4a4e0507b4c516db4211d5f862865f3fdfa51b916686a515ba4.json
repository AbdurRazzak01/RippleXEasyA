{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateClawback = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateClawback(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Amount == null) {\n    throw new errors_1.ValidationError('Clawback: missing field Amount');\n  }\n  if (!(0, common_1.isIssuedCurrency)(tx.Amount)) {\n    throw new errors_1.ValidationError('Clawback: invalid Amount');\n  }\n  if ((0, common_1.isIssuedCurrency)(tx.Amount) && tx.Account === tx.Amount.issuer) {\n    throw new errors_1.ValidationError('Clawback: invalid holder Account');\n  }\n}\nexports.validateClawback = validateClawback;","map":{"version":3,"names":["errors_1","require","common_1","validateClawback","tx","validateBaseTransaction","Amount","ValidationError","isIssuedCurrency","Account","issuer","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/clawback.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  isIssuedCurrency,\n} from './common'\n\n/**\n * The Clawback transaction is used by the token issuer to claw back\n * issued tokens from a holder.\n */\nexport interface Clawback extends BaseTransaction {\n  TransactionType: 'Clawback'\n  /**\n   * Indicates the AccountID that submitted this transaction. The account MUST\n   * be the issuer of the currency.\n   */\n  Account: string\n  /**\n   * The amount of currency to deliver, and it must be non-XRP. The nested field\n   * names MUST be lower-case. The `issuer` field MUST be the holder's address,\n   * whom to be clawed back.\n   */\n  Amount: IssuedCurrencyAmount\n}\n\n/**\n * Verify the form and type of an Clawback at runtime.\n *\n * @param tx - An Clawback Transaction.\n * @throws When the Clawback is Malformed.\n */\nexport function validateClawback(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount == null) {\n    throw new ValidationError('Clawback: missing field Amount')\n  }\n\n  if (!isIssuedCurrency(tx.Amount)) {\n    throw new ValidationError('Clawback: invalid Amount')\n  }\n\n  if (isIssuedCurrency(tx.Amount) && tx.Account === tx.Amount.issuer) {\n    throw new ValidationError('Clawback: invalid holder Account')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AA+BA,SAAgBE,gBAAgBA,CAACC,EAA2B;EAC1D,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,MAAM,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIN,QAAA,CAAAO,eAAe,CAAC,gCAAgC,CAAC;;EAG7D,IAAI,CAAC,IAAAL,QAAA,CAAAM,gBAAgB,EAACJ,EAAE,CAACE,MAAM,CAAC,EAAE;IAChC,MAAM,IAAIN,QAAA,CAAAO,eAAe,CAAC,0BAA0B,CAAC;;EAGvD,IAAI,IAAAL,QAAA,CAAAM,gBAAgB,EAACJ,EAAE,CAACE,MAAM,CAAC,IAAIF,EAAE,CAACK,OAAO,KAAKL,EAAE,CAACE,MAAM,CAACI,MAAM,EAAE;IAClE,MAAM,IAAIV,QAAA,CAAAO,eAAe,CAAC,kCAAkC,CAAC;;AAEjE;AAdAI,OAAA,CAAAR,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}