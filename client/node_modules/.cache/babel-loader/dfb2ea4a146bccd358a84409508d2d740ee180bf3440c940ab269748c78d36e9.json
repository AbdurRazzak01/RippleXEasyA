{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMBid = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nconst MAX_AUTH_ACCOUNTS = 4;\nfunction validateAMMBid(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Asset == null) {\n    throw new errors_1.ValidationError('AMMBid: missing field Asset');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset)) {\n    throw new errors_1.ValidationError('AMMBid: Asset must be a Currency');\n  }\n  if (tx.Asset2 == null) {\n    throw new errors_1.ValidationError('AMMBid: missing field Asset2');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset2)) {\n    throw new errors_1.ValidationError('AMMBid: Asset2 must be a Currency');\n  }\n  if (tx.BidMin != null && !(0, common_1.isAmount)(tx.BidMin)) {\n    throw new errors_1.ValidationError('AMMBid: BidMin must be an Amount');\n  }\n  if (tx.BidMax != null && !(0, common_1.isAmount)(tx.BidMax)) {\n    throw new errors_1.ValidationError('AMMBid: BidMax must be an Amount');\n  }\n  if (tx.AuthAccounts != null) {\n    if (!Array.isArray(tx.AuthAccounts)) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts must be an AuthAccount array`);\n    }\n    if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`);\n    }\n    validateAuthAccounts(tx.Account, tx.AuthAccounts);\n  }\n}\nexports.validateAMMBid = validateAMMBid;\nfunction validateAuthAccounts(senderAddress, authAccounts) {\n  for (const authAccount of authAccounts) {\n    if (authAccount.AuthAccount == null || typeof authAccount.AuthAccount !== 'object') {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (authAccount.AuthAccount.Account == null) {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (typeof authAccount.AuthAccount.Account !== 'string') {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (authAccount.AuthAccount.Account === senderAddress) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts must not include sender's address`);\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","validateAMMBid","errors_1","require","common_1","MAX_AUTH_ACCOUNTS","tx","validateBaseTransaction","Asset","ValidationError","isCurrency","Asset2","BidMin","isAmount","BidMax","AuthAccounts","Array","isArray","length","validateAuthAccounts","Account","senderAddress","authAccounts","authAccount","AuthAccount"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/AMMBid.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateAMMBid = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nconst MAX_AUTH_ACCOUNTS = 4;\nfunction validateAMMBid(tx) {\n    (0, common_1.validateBaseTransaction)(tx);\n    if (tx.Asset == null) {\n        throw new errors_1.ValidationError('AMMBid: missing field Asset');\n    }\n    if (!(0, common_1.isCurrency)(tx.Asset)) {\n        throw new errors_1.ValidationError('AMMBid: Asset must be a Currency');\n    }\n    if (tx.Asset2 == null) {\n        throw new errors_1.ValidationError('AMMBid: missing field Asset2');\n    }\n    if (!(0, common_1.isCurrency)(tx.Asset2)) {\n        throw new errors_1.ValidationError('AMMBid: Asset2 must be a Currency');\n    }\n    if (tx.BidMin != null && !(0, common_1.isAmount)(tx.BidMin)) {\n        throw new errors_1.ValidationError('AMMBid: BidMin must be an Amount');\n    }\n    if (tx.BidMax != null && !(0, common_1.isAmount)(tx.BidMax)) {\n        throw new errors_1.ValidationError('AMMBid: BidMax must be an Amount');\n    }\n    if (tx.AuthAccounts != null) {\n        if (!Array.isArray(tx.AuthAccounts)) {\n            throw new errors_1.ValidationError(`AMMBid: AuthAccounts must be an AuthAccount array`);\n        }\n        if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {\n            throw new errors_1.ValidationError(`AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`);\n        }\n        validateAuthAccounts(tx.Account, tx.AuthAccounts);\n    }\n}\nexports.validateAMMBid = validateAMMBid;\nfunction validateAuthAccounts(senderAddress, authAccounts) {\n    for (const authAccount of authAccounts) {\n        if (authAccount.AuthAccount == null ||\n            typeof authAccount.AuthAccount !== 'object') {\n            throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n        }\n        if (authAccount.AuthAccount.Account == null) {\n            throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n        }\n        if (typeof authAccount.AuthAccount.Account !== 'string') {\n            throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n        }\n        if (authAccount.AuthAccount.Account === senderAddress) {\n            throw new errors_1.ValidationError(`AMMBid: AuthAccounts must not include sender's address`);\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=AMMBid.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}