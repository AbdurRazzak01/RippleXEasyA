{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateCheckCreate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateCheckCreate(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.SendMax === undefined) {\n    throw new errors_1.ValidationError('CheckCreate: missing field SendMax');\n  }\n  (0, common_1.validateRequiredField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateOptionalField)(tx, 'DestinationTag', common_1.isNumber);\n  if (typeof tx.SendMax !== 'string' && !(0, common_1.isIssuedCurrency)(tx.SendMax)) {\n    throw new errors_1.ValidationError('CheckCreate: invalid SendMax');\n  }\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new errors_1.ValidationError('CheckCreate: invalid Expiration');\n  }\n  if (tx.InvoiceID !== undefined && typeof tx.InvoiceID !== 'string') {\n    throw new errors_1.ValidationError('CheckCreate: invalid InvoiceID');\n  }\n}\nexports.validateCheckCreate = validateCheckCreate;","map":{"version":3,"names":["errors_1","require","common_1","validateCheckCreate","tx","validateBaseTransaction","SendMax","undefined","ValidationError","validateRequiredField","isAccount","validateOptionalField","isNumber","isIssuedCurrency","Expiration","InvoiceID","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/checkCreate.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport {\n  BaseTransaction,\n  validateBaseTransaction,\n  isIssuedCurrency,\n  isAccount,\n  validateRequiredField,\n  validateOptionalField,\n  isNumber,\n  Account,\n} from './common'\n\n/**\n * Create a Check object in the ledger, which is a deferred payment that can be\n * cashed by its intended destination. The sender of this transaction is the\n * sender of the Check.\n *\n * @category Transaction Models\n */\nexport interface CheckCreate extends BaseTransaction {\n  TransactionType: 'CheckCreate'\n  /** The unique address of the account that can cash the Check. */\n  Destination: Account\n  /**\n   * Maximum amount of source currency the Check is allowed to debit the\n   * sender, including transfer fees on non-XRP currencies. The Check can only\n   * credit the destination with the same currency (from the same issuer, for\n   * non-XRP currencies). For non-XRP amounts, the nested field names MUST be.\n   * lower-case.\n   */\n  SendMax: Amount\n  /**\n   * Arbitrary tag that identifies the reason for the Check, or a hosted.\n   * recipient to pay.\n   */\n  DestinationTag?: number\n  /**\n   * Time after which the Check is no longer valid, in seconds since the Ripple.\n   * Epoch.\n   */\n  Expiration?: number\n  /**\n   * Arbitrary 256-bit hash representing a specific reason or identifier for.\n   * this Check.\n   */\n  InvoiceID?: string\n}\n\n/**\n * Verify the form and type of an CheckCreate at runtime.\n *\n * @param tx - An CheckCreate Transaction.\n * @throws When the CheckCreate is Malformed.\n */\nexport function validateCheckCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.SendMax === undefined) {\n    throw new ValidationError('CheckCreate: missing field SendMax')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  if (\n    typeof tx.SendMax !== 'string' &&\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n    !isIssuedCurrency(tx.SendMax as Record<string, unknown>)\n  ) {\n    throw new ValidationError('CheckCreate: invalid SendMax')\n  }\n\n  if (tx.Expiration !== undefined && typeof tx.Expiration !== 'number') {\n    throw new ValidationError('CheckCreate: invalid Expiration')\n  }\n\n  if (tx.InvoiceID !== undefined && typeof tx.InvoiceID !== 'string') {\n    throw new ValidationError('CheckCreate: invalid InvoiceID')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAqDA,SAAgBE,mBAAmBA,CAACC,EAA2B;EAC7D,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,OAAO,KAAKC,SAAS,EAAE;IAC5B,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,oCAAoC,CAAC;;EAGjE,IAAAN,QAAA,CAAAO,qBAAqB,EAACL,EAAE,EAAE,aAAa,EAAEF,QAAA,CAAAQ,SAAS,CAAC;EACnD,IAAAR,QAAA,CAAAS,qBAAqB,EAACP,EAAE,EAAE,gBAAgB,EAAEF,QAAA,CAAAU,QAAQ,CAAC;EAErD,IACE,OAAOR,EAAE,CAACE,OAAO,KAAK,QAAQ,IAE9B,CAAC,IAAAJ,QAAA,CAAAW,gBAAgB,EAACT,EAAE,CAACE,OAAkC,CAAC,EACxD;IACA,MAAM,IAAIN,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;EAG3D,IAAIJ,EAAE,CAACU,UAAU,KAAKP,SAAS,IAAI,OAAOH,EAAE,CAACU,UAAU,KAAK,QAAQ,EAAE;IACpE,MAAM,IAAId,QAAA,CAAAQ,eAAe,CAAC,iCAAiC,CAAC;;EAG9D,IAAIJ,EAAE,CAACW,SAAS,KAAKR,SAAS,IAAI,OAAOH,EAAE,CAACW,SAAS,KAAK,QAAQ,EAAE;IAClE,MAAM,IAAIf,QAAA,CAAAQ,eAAe,CAAC,gCAAgC,CAAC;;AAE/D;AAzBAQ,OAAA,CAAAb,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}