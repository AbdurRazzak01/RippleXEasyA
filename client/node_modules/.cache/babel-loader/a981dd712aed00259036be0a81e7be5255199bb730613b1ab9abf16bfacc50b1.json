{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePaymentChannelCreate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validatePaymentChannelCreate(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Amount === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelCreate: missing Amount');\n  }\n  if (typeof tx.Amount !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelCreate: Amount must be a string');\n  }\n  (0, common_1.validateRequiredField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateOptionalField)(tx, 'DestinationTag', common_1.isNumber);\n  if (tx.SettleDelay === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelCreate: missing SettleDelay');\n  }\n  if (typeof tx.SettleDelay !== 'number') {\n    throw new errors_1.ValidationError('PaymentChannelCreate: SettleDelay must be a number');\n  }\n  if (tx.PublicKey === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelCreate: missing PublicKey');\n  }\n  if (typeof tx.PublicKey !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelCreate: PublicKey must be a string');\n  }\n  if (tx.CancelAfter !== undefined && typeof tx.CancelAfter !== 'number') {\n    throw new errors_1.ValidationError('PaymentChannelCreate: CancelAfter must be a number');\n  }\n}\nexports.validatePaymentChannelCreate = validatePaymentChannelCreate;","map":{"version":3,"names":["errors_1","require","common_1","validatePaymentChannelCreate","tx","validateBaseTransaction","Amount","undefined","ValidationError","validateRequiredField","isAccount","validateOptionalField","isNumber","SettleDelay","PublicKey","CancelAfter","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/paymentChannelCreate.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isNumber,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * Create a unidirectional channel and fund it with XRP. The address sending\n * this transaction becomes the \"source address\" of the payment channel.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelCreate extends BaseTransaction {\n  TransactionType: 'PaymentChannelCreate'\n  /**\n   * Amount of XRP, in drops, to deduct from the sender's balance and set aside\n   * in this channel. While the channel is open, the XRP can only go to the\n   * Destination address. When the channel closes, any unclaimed XRP is returned\n   * to the source address's balance.\n   */\n  Amount: string\n  /**\n   * Address to receive XRP claims against this channel. This is also known as\n   * the \"destination address\" for the channel.\n   */\n  Destination: Account\n  /**\n   * Amount of time the source address must wait before closing the channel if\n   * it has unclaimed XRP.\n   */\n  SettleDelay: number\n  /**\n   * The public key of the key pair the source will use to sign claims against\n   * this channel in hexadecimal. This can be any secp256k1 or ed25519 public\n   * key.\n   */\n  PublicKey: string\n  /**\n   * The time, in seconds since the Ripple Epoch, when this channel expires.\n   * Any transaction that would modify the channel after this time closes the\n   * channel without otherwise affecting it. This value is immutable; the\n   * channel can be closed earlier than this time but cannot remain open after\n   * this time.\n   */\n  CancelAfter?: number\n  /**\n   * Arbitrary tag to further specify the destination for this payment channel,\n   * such as a hosted recipient at the destination address.\n   */\n  DestinationTag?: number\n}\n\n/**\n * Verify the form and type of an PaymentChannelCreate at runtime.\n *\n * @param tx - An PaymentChannelCreate Transaction.\n * @throws When the PaymentChannelCreate is Malformed.\n */\nexport function validatePaymentChannelCreate(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing Amount')\n  }\n\n  if (typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelCreate: Amount must be a string')\n  }\n\n  validateRequiredField(tx, 'Destination', isAccount)\n  validateOptionalField(tx, 'DestinationTag', isNumber)\n\n  if (tx.SettleDelay === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing SettleDelay')\n  }\n\n  if (typeof tx.SettleDelay !== 'number') {\n    throw new ValidationError(\n      'PaymentChannelCreate: SettleDelay must be a number',\n    )\n  }\n\n  if (tx.PublicKey === undefined) {\n    throw new ValidationError('PaymentChannelCreate: missing PublicKey')\n  }\n\n  if (typeof tx.PublicKey !== 'string') {\n    throw new ValidationError(\n      'PaymentChannelCreate: PublicKey must be a string',\n    )\n  }\n\n  if (tx.CancelAfter !== undefined && typeof tx.CancelAfter !== 'number') {\n    throw new ValidationError(\n      'PaymentChannelCreate: CancelAfter must be a number',\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AA8DA,SAAgBE,4BAA4BA,CAC1CC,EAA2B;EAE3B,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,MAAM,KAAKC,SAAS,EAAE;IAC3B,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAI,OAAOJ,EAAE,CAACE,MAAM,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIN,QAAA,CAAAQ,eAAe,CAAC,+CAA+C,CAAC;;EAG5E,IAAAN,QAAA,CAAAO,qBAAqB,EAACL,EAAE,EAAE,aAAa,EAAEF,QAAA,CAAAQ,SAAS,CAAC;EACnD,IAAAR,QAAA,CAAAS,qBAAqB,EAACP,EAAE,EAAE,gBAAgB,EAAEF,QAAA,CAAAU,QAAQ,CAAC;EAErD,IAAIR,EAAE,CAACS,WAAW,KAAKN,SAAS,EAAE;IAChC,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,2CAA2C,CAAC;;EAGxE,IAAI,OAAOJ,EAAE,CAACS,WAAW,KAAK,QAAQ,EAAE;IACtC,MAAM,IAAIb,QAAA,CAAAQ,eAAe,CACvB,oDAAoD,CACrD;;EAGH,IAAIJ,EAAE,CAACU,SAAS,KAAKP,SAAS,EAAE;IAC9B,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,yCAAyC,CAAC;;EAGtE,IAAI,OAAOJ,EAAE,CAACU,SAAS,KAAK,QAAQ,EAAE;IACpC,MAAM,IAAId,QAAA,CAAAQ,eAAe,CACvB,kDAAkD,CACnD;;EAGH,IAAIJ,EAAE,CAACW,WAAW,KAAKR,SAAS,IAAI,OAAOH,EAAE,CAACW,WAAW,KAAK,QAAQ,EAAE;IACtE,MAAM,IAAIf,QAAA,CAAAQ,eAAe,CACvB,oDAAoD,CACrD;;AAEL;AAzCAQ,OAAA,CAAAb,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}