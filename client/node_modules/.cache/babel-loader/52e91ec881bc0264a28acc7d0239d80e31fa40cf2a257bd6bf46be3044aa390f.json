{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTicketCreate = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nconst MAX_TICKETS = 250;\nfunction validateTicketCreate(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  const {\n    TicketCount\n  } = tx;\n  if (TicketCount === undefined) {\n    throw new errors_1.ValidationError('TicketCreate: missing field TicketCount');\n  }\n  if (typeof TicketCount !== 'number') {\n    throw new errors_1.ValidationError('TicketCreate: TicketCount must be a number');\n  }\n  if (!Number.isInteger(TicketCount) || TicketCount < 1 || TicketCount > MAX_TICKETS) {\n    throw new errors_1.ValidationError('TicketCreate: TicketCount must be an integer from 1 to 250');\n  }\n}\nexports.validateTicketCreate = validateTicketCreate;","map":{"version":3,"names":["errors_1","require","common_1","MAX_TICKETS","validateTicketCreate","tx","validateBaseTransaction","TicketCount","undefined","ValidationError","Number","isInteger","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/ticketCreate.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\n\n/**\n * A TicketCreate transaction sets aside one or more sequence numbers as\n * Tickets.\n *\n * @category Transaction Models\n */\nexport interface TicketCreate extends BaseTransaction {\n  TransactionType: 'TicketCreate'\n  /**\n   * How many Tickets to create. This must be a positive number and cannot\n   * cause the account to own more than 250 Tickets after executing this\n   * transaction.\n   */\n  TicketCount: number\n}\n\nconst MAX_TICKETS = 250\n\n/**\n * Verify the form and type of a TicketCreate at runtime.\n *\n * @param tx - A TicketCreate Transaction.\n * @throws When the TicketCreate is malformed.\n */\nexport function validateTicketCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  const { TicketCount } = tx\n\n  if (TicketCount === undefined) {\n    throw new ValidationError('TicketCreate: missing field TicketCount')\n  }\n\n  if (typeof TicketCount !== 'number') {\n    throw new ValidationError('TicketCreate: TicketCount must be a number')\n  }\n\n  if (\n    !Number.isInteger(TicketCount) ||\n    TicketCount < 1 ||\n    TicketCount > MAX_TICKETS\n  ) {\n    throw new ValidationError(\n      'TicketCreate: TicketCount must be an integer from 1 to 250',\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAkBA,MAAME,WAAW,GAAG,GAAG;AAQvB,SAAgBC,oBAAoBA,CAACC,EAA2B;EAC9D,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAC3B,MAAM;IAAEE;EAAW,CAAE,GAAGF,EAAE;EAE1B,IAAIE,WAAW,KAAKC,SAAS,EAAE;IAC7B,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,yCAAyC,CAAC;;EAGtE,IAAI,OAAOF,WAAW,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAIP,QAAA,CAAAS,eAAe,CAAC,4CAA4C,CAAC;;EAGzE,IACE,CAACC,MAAM,CAACC,SAAS,CAACJ,WAAW,CAAC,IAC9BA,WAAW,GAAG,CAAC,IACfA,WAAW,GAAGJ,WAAW,EACzB;IACA,MAAM,IAAIH,QAAA,CAAAS,eAAe,CACvB,4DAA4D,CAC7D;;AAEL;AArBAG,OAAA,CAAAR,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}