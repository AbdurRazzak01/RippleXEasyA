{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenCancelOffer = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateNFTokenCancelOffer(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (!Array.isArray(tx.NFTokenOffers)) {\n    throw new errors_1.ValidationError('NFTokenCancelOffer: missing field NFTokenOffers');\n  }\n  if (tx.NFTokenOffers.length < 1) {\n    throw new errors_1.ValidationError('NFTokenCancelOffer: empty field NFTokenOffers');\n  }\n}\nexports.validateNFTokenCancelOffer = validateNFTokenCancelOffer;","map":{"version":3,"names":["errors_1","require","common_1","validateNFTokenCancelOffer","tx","validateBaseTransaction","Array","isArray","NFTokenOffers","ValidationError","length","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/NFTokenCancelOffer.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, validateBaseTransaction } from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n * The NFTokenCancelOffer transaction deletes existing NFTokenOffer objects.\n * It is useful if you want to free up space on your account to lower your\n * reserve requirement.\n *\n * The transaction can be executed by the account that originally created\n * the NFTokenOffer, the account in the `Recipient` field of the NFTokenOffer\n * (if present), or any account if the NFTokenOffer has an `Expiration` and\n * the NFTokenOffer has already expired.\n */\nexport interface NFTokenCancelOffer extends BaseTransaction {\n  TransactionType: 'NFTokenCancelOffer'\n  /**\n   * An array of identifiers of NFTokenOffer objects that should be cancelled\n   * by this transaction.\n   *\n   * It is an error if an entry in this list points to an\n   * object that is not an NFTokenOffer object. It is not an\n   * error if an entry in this list points to an object that\n   * does not exist. This field is required.\n   */\n  NFTokenOffers: string[]\n}\n\nexport interface NFTokenCancelOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0  or  later\n  nftoken_ids?: string[]\n}\n\n/**\n * Verify the form and type of an NFTokenCancelOffer at runtime.\n *\n * @param tx - An NFTokenCancelOffer Transaction.\n * @throws When the NFTokenCancelOffer is Malformed.\n */\nexport function validateNFTokenCancelOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (!Array.isArray(tx.NFTokenOffers)) {\n    throw new ValidationError('NFTokenCancelOffer: missing field NFTokenOffers')\n  }\n\n  if (tx.NFTokenOffers.length < 1) {\n    throw new ValidationError('NFTokenCancelOffer: empty field NFTokenOffers')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAsCA,SAAgBE,0BAA0BA,CAACC,EAA2B;EACpE,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,EAAE,CAACI,aAAa,CAAC,EAAE;IACpC,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,iDAAiD,CAAC;;EAG9E,IAAIL,EAAE,CAACI,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;IAC/B,MAAM,IAAIV,QAAA,CAAAS,eAAe,CAAC,+CAA+C,CAAC;;AAE9E;AAVAE,OAAA,CAAAR,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}