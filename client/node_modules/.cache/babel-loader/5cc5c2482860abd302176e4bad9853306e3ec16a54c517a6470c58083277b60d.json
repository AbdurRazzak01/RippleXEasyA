{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenBurn = void 0;\nconst common_1 = require(\"./common\");\nfunction validateNFTokenBurn(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'NFTokenID', common_1.isString);\n  (0, common_1.validateOptionalField)(tx, 'Owner', common_1.isAccount);\n}\nexports.validateNFTokenBurn = validateNFTokenBurn;","map":{"version":3,"names":["common_1","require","validateNFTokenBurn","tx","validateBaseTransaction","validateRequiredField","isString","validateOptionalField","isAccount","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/NFTokenBurn.ts"],"sourcesContent":["import {\n  Account,\n  BaseTransaction,\n  isAccount,\n  isString,\n  validateBaseTransaction,\n  validateOptionalField,\n  validateRequiredField,\n} from './common'\n\n/**\n * The NFTokenBurn transaction is used to remove an NFToken object from the\n * NFTokenPage in which it is being held, effectively removing the token from\n * the ledger (\"burning\" it).\n *\n * If this operation succeeds, the corresponding NFToken is removed. If this\n * operation empties the NFTokenPage holding the NFToken or results in the\n * consolidation, thus removing an NFTokenPage, the ownerâ€™s reserve requirement\n * is reduced by one.\n */\nexport interface NFTokenBurn extends BaseTransaction {\n  TransactionType: 'NFTokenBurn'\n  /**\n   * Indicates the AccountID that submitted this transaction. The account MUST\n   * be either the present owner of the token or, if the lsfBurnable flag is set\n   * in the NFToken, either the issuer account or an account authorized by the\n   * issuer, i.e. MintAccount.\n   */\n  Account: Account\n  /**\n   * Identifies the NFToken object to be removed by the transaction.\n   */\n  NFTokenID: string\n  /**\n   * Indicates which account currently owns the token if it is different than\n   * Account. Only used to burn tokens which have the lsfBurnable flag enabled\n   * and are not owned by the signing account.\n   */\n  Owner?: Account\n}\n\n/**\n * Verify the form and type of an NFTokenBurn at runtime.\n *\n * @param tx - An NFTokenBurn Transaction.\n * @throws When the NFTokenBurn is Malformed.\n */\nexport function validateNFTokenBurn(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  validateRequiredField(tx, 'NFTokenID', isString)\n  validateOptionalField(tx, 'Owner', isAccount)\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AA+CA,SAAgBC,mBAAmBA,CAACC,EAA2B;EAC7D,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAC3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,WAAW,EAAEH,QAAA,CAAAM,QAAQ,CAAC;EAChD,IAAAN,QAAA,CAAAO,qBAAqB,EAACJ,EAAE,EAAE,OAAO,EAAEH,QAAA,CAAAQ,SAAS,CAAC;AAC/C;AAJAC,OAAA,CAAAP,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}