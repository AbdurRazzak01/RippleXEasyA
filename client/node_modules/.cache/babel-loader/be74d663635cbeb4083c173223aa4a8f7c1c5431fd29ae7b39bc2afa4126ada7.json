{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenAcceptOffer = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateNFTokenBrokerFee(tx) {\n  const value = (0, common_1.parseAmountValue)(tx.NFTokenBrokerFee);\n  if (Number.isNaN(value)) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: invalid NFTokenBrokerFee');\n  }\n  if (value <= 0) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee');\n  }\n  if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode');\n  }\n}\nfunction validateNFTokenAcceptOffer(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.NFTokenBrokerFee != null) {\n    validateNFTokenBrokerFee(tx);\n  }\n  if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer');\n  }\n}\nexports.validateNFTokenAcceptOffer = validateNFTokenAcceptOffer;","map":{"version":3,"names":["errors_1","require","common_1","validateNFTokenBrokerFee","tx","value","parseAmountValue","NFTokenBrokerFee","Number","isNaN","ValidationError","NFTokenSellOffer","NFTokenBuyOffer","validateNFTokenAcceptOffer","validateBaseTransaction","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/NFTokenAcceptOffer.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport {\n  BaseTransaction,\n  parseAmountValue,\n  validateBaseTransaction,\n} from './common'\nimport type { TransactionMetadataBase } from './metadata'\n\n/**\n *  The NFTokenOfferAccept transaction is used to accept offers\n *  to buy or sell an NFToken. It can either:\n *\n *  1. Allow one offer to be accepted. This is called direct\n *     mode.\n *  2. Allow two distinct offers, one offering to buy a\n *     given NFToken and the other offering to sell the same\n *     NFToken, to be accepted in an atomic fashion. This is\n *     called brokered mode.\n *\n *  To indicate direct mode, use either the `sell_offer` or\n *  `buy_offer` fields, but not both. To indicate brokered mode,\n *  use both the `sell_offer` and `buy_offer` fields. If you use\n *  neither `sell_offer` nor `buy_offer`, the transaction is invalid.\n */\nexport interface NFTokenAcceptOffer extends BaseTransaction {\n  TransactionType: 'NFTokenAcceptOffer'\n  /**\n   *  Identifies the NFTokenOffer that offers to sell the NFToken.\n   *\n   *  In direct mode this field is optional, but either NFTokenSellOffer or\n   *  NFTokenBuyOffer must be specified. In brokered mode, both NFTokenSellOffer\n   *  and NFTokenBuyOffer must be specified.\n   */\n  NFTokenSellOffer?: string\n  /**\n   * Identifies the NFTokenOffer that offers to buy the NFToken.\n   *\n   * In direct mode this field is optional, but either NFTokenSellOffer or\n   * NFTokenBuyOffer must be specified. In brokered mode, both NFTokenSellOffer\n   * and NFTokenBuyOffer must be specified.\n   */\n  NFTokenBuyOffer?: string\n  /**\n   * This field is only valid in brokered mode. It specifies the\n   * amount that the broker will keep as part of their fee for\n   * bringing the two offers together; the remaining amount will\n   * be sent to the seller of the NFToken being bought. If\n   * specified, the fee must be such that, prior to accounting\n   * for the transfer fee charged by the issuer, the amount that\n   * the seller would receive is at least as much as the amount\n   * indicated in the sell offer.\n   *\n   * This functionality is intended to allow the owner of an\n   * NFToken to offer their token for sale to a third party\n   * broker, who may then attempt to sell the NFToken on for a\n   * larger amount, without the broker having to own the NFToken\n   * or custody funds.\n   *\n   * Note: in brokered mode, the offers referenced by NFTokenBuyOffer\n   * and NFTokenSellOffer must both specify the same NFTokenID; that is,\n   * both must be for the same NFToken.\n   */\n  NFTokenBrokerFee?: Amount\n}\n\nexport interface NFTokenAcceptOfferMetadata extends TransactionMetadataBase {\n  // rippled 1.11.0 or later\n  nftoken_id?: string\n}\n\nfunction validateNFTokenBrokerFee(tx: Record<string, unknown>): void {\n  const value = parseAmountValue(tx.NFTokenBrokerFee)\n  if (Number.isNaN(value)) {\n    throw new ValidationError('NFTokenAcceptOffer: invalid NFTokenBrokerFee')\n  }\n\n  if (value <= 0) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee',\n    )\n  }\n\n  if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode',\n    )\n  }\n}\n\n/**\n * Verify the form and type of an NFTokenAcceptOffer at runtime.\n *\n * @param tx - An NFTokenAcceptOffer Transaction.\n * @throws When the NFTokenAcceptOffer is Malformed.\n */\nexport function validateNFTokenAcceptOffer(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.NFTokenBrokerFee != null) {\n    validateNFTokenBrokerFee(tx)\n  }\n\n  if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {\n    throw new ValidationError(\n      'NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer',\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAqEA,SAASE,wBAAwBA,CAACC,EAA2B;EAC3D,MAAMC,KAAK,GAAG,IAAAH,QAAA,CAAAI,gBAAgB,EAACF,EAAE,CAACG,gBAAgB,CAAC;EACnD,IAAIC,MAAM,CAACC,KAAK,CAACJ,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIL,QAAA,CAAAU,eAAe,CAAC,8CAA8C,CAAC;;EAG3E,IAAIL,KAAK,IAAI,CAAC,EAAE;IACd,MAAM,IAAIL,QAAA,CAAAU,eAAe,CACvB,sFAAsF,CACvF;;EAGH,IAAIN,EAAE,CAACO,gBAAgB,IAAI,IAAI,IAAIP,EAAE,CAACQ,eAAe,IAAI,IAAI,EAAE;IAC7D,MAAM,IAAIZ,QAAA,CAAAU,eAAe,CACvB,kGAAkG,CACnG;;AAEL;AAQA,SAAgBG,0BAA0BA,CAACT,EAA2B;EACpE,IAAAF,QAAA,CAAAY,uBAAuB,EAACV,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACG,gBAAgB,IAAI,IAAI,EAAE;IAC/BJ,wBAAwB,CAACC,EAAE,CAAC;;EAG9B,IAAIA,EAAE,CAACO,gBAAgB,IAAI,IAAI,IAAIP,EAAE,CAACQ,eAAe,IAAI,IAAI,EAAE;IAC7D,MAAM,IAAIZ,QAAA,CAAAU,eAAe,CACvB,yEAAyE,CAC1E;;AAEL;AAZAK,OAAA,CAAAF,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}