{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccountRootFlags = void 0;\nvar AccountRootFlags;\n(function (AccountRootFlags) {\n  AccountRootFlags[AccountRootFlags[\"lsfPasswordSpent\"] = 65536] = \"lsfPasswordSpent\";\n  AccountRootFlags[AccountRootFlags[\"lsfRequireDestTag\"] = 131072] = \"lsfRequireDestTag\";\n  AccountRootFlags[AccountRootFlags[\"lsfRequireAuth\"] = 262144] = \"lsfRequireAuth\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisallowXRP\"] = 524288] = \"lsfDisallowXRP\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisableMaster\"] = 1048576] = \"lsfDisableMaster\";\n  AccountRootFlags[AccountRootFlags[\"lsfNoFreeze\"] = 2097152] = \"lsfNoFreeze\";\n  AccountRootFlags[AccountRootFlags[\"lsfGlobalFreeze\"] = 4194304] = \"lsfGlobalFreeze\";\n  AccountRootFlags[AccountRootFlags[\"lsfDefaultRipple\"] = 8388608] = \"lsfDefaultRipple\";\n  AccountRootFlags[AccountRootFlags[\"lsfDepositAuth\"] = 16777216] = \"lsfDepositAuth\";\n  AccountRootFlags[AccountRootFlags[\"lsfAMM\"] = 33554432] = \"lsfAMM\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisallowIncomingNFTokenOffer\"] = 67108864] = \"lsfDisallowIncomingNFTokenOffer\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisallowIncomingCheck\"] = 134217728] = \"lsfDisallowIncomingCheck\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisallowIncomingPayChan\"] = 268435456] = \"lsfDisallowIncomingPayChan\";\n  AccountRootFlags[AccountRootFlags[\"lsfDisallowIncomingTrustline\"] = 536870912] = \"lsfDisallowIncomingTrustline\";\n  AccountRootFlags[AccountRootFlags[\"lsfAllowTrustLineClawback\"] = 2147483648] = \"lsfAllowTrustLineClawback\";\n})(AccountRootFlags || (exports.AccountRootFlags = AccountRootFlags = {}));","map":{"version":3,"names":["AccountRootFlags","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/ledger/AccountRoot.ts"],"sourcesContent":["import { BaseLedgerEntry, HasPreviousTxnID } from './BaseLedgerEntry'\n\n/**\n * The AccountRoot object type describes a single account, its settings, and\n * XRP balance.\n *\n * @category Ledger Entries\n */\nexport default interface AccountRoot extends BaseLedgerEntry, HasPreviousTxnID {\n  LedgerEntryType: 'AccountRoot'\n  /** The identifying (classic) address of this account. */\n  Account: string\n  /** The account's current XRP balance in drops, represented as a string. */\n  Balance: string\n  /** A bit-map of boolean flags enabled for this account. */\n  Flags: number\n  /**\n   * The number of objects this account owns in the ledger, which contributes\n   * to its owner reserve.\n   */\n  OwnerCount: number\n  /** The sequence number of the next valid transaction for this account. */\n  Sequence: number\n  /**\n   * The identifying hash of the transaction most recently sent by this\n   * account. This field must be enabled to use the AccountTxnID transaction\n   * field. To enable it, send an AccountSet transaction with the.\n   * `asfAccountTxnID` flag enabled.\n   */\n  AccountTxnID?: string\n  /**\n   * The ledger entry ID of the corresponding AMM ledger entry.\n   * Set during account creation; cannot be modified.\n   * If present, indicates that this is a special AMM AccountRoot; always omitted on non-AMM accounts.\n   */\n  AMMID?: string\n  /**\n   * A domain associated with this account. In JSON, this is the hexadecimal\n   * for the ASCII representation of the domain.\n   */\n  Domain?: string\n  /** The md5 hash of an email address. */\n  EmailHash?: string\n  /**\n   * A public key that may be used to send encrypted messages to this account\n   * in JSON, uses hexadecimal.\n   */\n  MessageKey?: string\n  /**\n   * The address of a key pair that can be used to sign transactions for this\n   * account instead of the master key. Use a SetRegularKey transaction to\n   * change this value.\n   */\n  RegularKey?: string\n  /**\n   * How many Tickets this account owns in the ledger. This is updated\n   * automatically to ensure that the account stays within the hard limit of 250.\n   * Tickets at a time.\n   */\n  TicketCount?: number\n  /**\n   * How many significant digits to use for exchange rates of Offers involving\n   * currencies issued by this address. Valid values are 3 to 15, inclusive.\n   */\n  TickSize?: number\n  /**\n   * A transfer fee to charge other users for sending currency issued by this\n   * account to each other.\n   */\n  TransferRate?: number\n  /** An arbitrary 256-bit value that users can set. */\n  WalletLocator?: string\n  /** Total NFTokens this account's issued that have been burned. This number is always equal or less than MintedNFTokens. */\n  BurnedNFTokens?: number\n  /** The sequence that the account first minted an NFToken */\n  FirstNFTSequence: number\n  /** Total NFTokens have been minted by and on behalf of this account. */\n  MintedNFTokens?: number\n  /** Another account that can mint NFTokens on behalf of this account. */\n  NFTokenMinter?: string\n}\n\n/**\n * A boolean map of AccountRootFlags for simplified code checking AccountRoot settings.\n * For submitting settings flags to the ledger, use AccountRootFlags instead.\n */\nexport interface AccountRootFlagsInterface {\n  /**\n   * The account has used its free SetRegularKey transaction.\n   */\n  lsfPasswordSpent?: boolean\n  /**\n   * Requires incoming payments to specify a Destination Tag.\n   */\n  lsfRequireDestTag?: boolean\n  /**\n   * This account must individually approve other users for those users to hold this account's issued currencies.\n   */\n  lsfRequireAuth?: boolean\n  /**\n   * Client applications should not send XRP to this account. Not enforced by rippled.\n   */\n  lsfDisallowXRP?: boolean\n  /**\n   * Disallows use of the master key to sign transactions for this account.\n   */\n  lsfDisableMaster?: boolean\n  /**\n   * This address cannot freeze trust lines connected to it. Once enabled, cannot be disabled.\n   */\n  lsfNoFreeze?: boolean\n  /**\n   * All assets issued by this address are frozen.\n   */\n  lsfGlobalFreeze?: boolean\n  /**\n   * Enable rippling on this address's trust lines by default. Required for issuing addresses; discouraged for others.\n   */\n  lsfDefaultRipple?: boolean\n  /**\n   * This account can only receive funds from transactions it sends, and from preauthorized accounts.\n   * (It has DepositAuth enabled.)\n   */\n  lsfDepositAuth?: boolean\n  /**\n   * This account is an Automated Market Maker (AMM) instance.\n   */\n  lsfAMM?: boolean\n  /**\n   * Disallow incoming NFTOffers from other accounts.\n   */\n  lsfDisallowIncomingNFTokenOffer?: boolean\n  /**\n   * Disallow incoming Checks from other accounts.\n   */\n  lsfDisallowIncomingCheck?: boolean\n  /**\n   * Disallow incoming PayChannels from other accounts.\n   */\n  lsfDisallowIncomingPayChan?: boolean\n  /**\n   * Disallow incoming Trustlines from other accounts.\n   */\n  lsfDisallowIncomingTrustline?: boolean\n  /**\n   * This address can claw back issued IOUs. Once enabled, cannot be disabled.\n   */\n  lsfAllowTrustLineClawback?: boolean\n}\n\nexport enum AccountRootFlags {\n  /**\n   * The account has used its free SetRegularKey transaction.\n   */\n  lsfPasswordSpent = 0x00010000,\n  /**\n   * Requires incoming payments to specify a Destination Tag.\n   */\n  lsfRequireDestTag = 0x00020000,\n  /**\n   * This account must individually approve other users for those users to hold this account's issued currencies.\n   */\n  lsfRequireAuth = 0x00040000,\n  /**\n   * Client applications should not send XRP to this account. Not enforced by rippled.\n   */\n  lsfDisallowXRP = 0x00080000,\n  /**\n   * Disallows use of the master key to sign transactions for this account.\n   */\n  lsfDisableMaster = 0x00100000,\n  /**\n   * This address cannot freeze trust lines connected to it. Once enabled, cannot be disabled.\n   */\n  lsfNoFreeze = 0x00200000,\n  /**\n   * All assets issued by this address are frozen.\n   */\n  lsfGlobalFreeze = 0x00400000,\n  /**\n   * Enable rippling on this address's trust lines by default. Required for issuing addresses; discouraged for others.\n   */\n  lsfDefaultRipple = 0x00800000,\n  /**\n   * This account can only receive funds from transactions it sends, and from preauthorized accounts.\n   * (It has DepositAuth enabled.)\n   */\n  lsfDepositAuth = 0x01000000,\n  /**\n   * This account is an Automated Market Maker (AMM) instance.\n   */\n  lsfAMM = 0x02000000,\n  /**\n   * Disallow incoming NFTOffers from other accounts.\n   */\n  lsfDisallowIncomingNFTokenOffer = 0x04000000,\n  /**\n   * Disallow incoming Checks from other accounts.\n   */\n  lsfDisallowIncomingCheck = 0x08000000,\n  /**\n   * Disallow incoming PayChannels from other accounts.\n   */\n  lsfDisallowIncomingPayChan = 0x10000000,\n  /**\n   * Disallow incoming Trustlines from other accounts.\n   */\n  lsfDisallowIncomingTrustline = 0x20000000,\n  /**\n   * This address can claw back issued IOUs. Once enabled, cannot be disabled.\n   */\n  lsfAllowTrustLineClawback = 0x80000000,\n}\n"],"mappings":";;;;;;AAsJA,IAAYA,gBA8DX;AA9DD,WAAYA,gBAAgB;EAI1BA,gBAAA,CAAAA,gBAAA,kDAA6B;EAI7BA,gBAAA,CAAAA,gBAAA,qDAA8B;EAI9BA,gBAAA,CAAAA,gBAAA,+CAA2B;EAI3BA,gBAAA,CAAAA,gBAAA,+CAA2B;EAI3BA,gBAAA,CAAAA,gBAAA,oDAA6B;EAI7BA,gBAAA,CAAAA,gBAAA,0CAAwB;EAIxBA,gBAAA,CAAAA,gBAAA,kDAA4B;EAI5BA,gBAAA,CAAAA,gBAAA,oDAA6B;EAK7BA,gBAAA,CAAAA,gBAAA,iDAA2B;EAI3BA,gBAAA,CAAAA,gBAAA,iCAAmB;EAInBA,gBAAA,CAAAA,gBAAA,mFAA4C;EAI5CA,gBAAA,CAAAA,gBAAA,sEAAqC;EAIrCA,gBAAA,CAAAA,gBAAA,0EAAuC;EAIvCA,gBAAA,CAAAA,gBAAA,8EAAyC;EAIzCA,gBAAA,CAAAA,gBAAA,yEAAsC;AACxC,CAAC,EA9DWA,gBAAgB,KAAAC,OAAA,CAAAD,gBAAA,GAAhBA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}