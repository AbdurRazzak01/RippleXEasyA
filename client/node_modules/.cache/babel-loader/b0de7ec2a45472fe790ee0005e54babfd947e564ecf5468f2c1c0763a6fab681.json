{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\nconst ripple_keypairs_1 = require(\"ripple-keypairs\");\nconst utils_1 = require(\"../utils\");\nclass Account {\n  constructor(secretNumbers) {\n    this._account = {\n      familySeed: '',\n      address: '',\n      keypair: {\n        publicKey: '',\n        privateKey: ''\n      }\n    };\n    if (typeof secretNumbers === 'string') {\n      this._secret = (0, utils_1.parseSecretString)(secretNumbers);\n    } else if (Array.isArray(secretNumbers)) {\n      this._secret = secretNumbers;\n    } else if (secretNumbers instanceof Uint8Array) {\n      this._secret = (0, utils_1.entropyToSecret)(secretNumbers);\n    } else {\n      this._secret = (0, utils_1.randomSecret)();\n    }\n    validateLengths(this._secret);\n    this.derive();\n  }\n  getSecret() {\n    return this._secret;\n  }\n  getSecretString() {\n    return this._secret.join(' ');\n  }\n  getAddress() {\n    return this._account.address;\n  }\n  getFamilySeed() {\n    return this._account.familySeed;\n  }\n  getKeypair() {\n    return this._account.keypair;\n  }\n  toString() {\n    return this.getSecretString();\n  }\n  derive() {\n    try {\n      const entropy = (0, utils_1.secretToEntropy)(this._secret);\n      this._account.familySeed = (0, ripple_keypairs_1.generateSeed)({\n        entropy\n      });\n      this._account.keypair = (0, ripple_keypairs_1.deriveKeypair)(this._account.familySeed);\n      this._account.address = (0, ripple_keypairs_1.deriveAddress)(this._account.keypair.publicKey);\n    } catch (error) {\n      let message = 'Unknown Error';\n      if (error instanceof Error) {\n        message = error.message;\n      }\n      throw new Error(message);\n    }\n  }\n}\nexports.Account = Account;\nfunction validateLengths(secretNumbers) {\n  if (secretNumbers.length !== 8) {\n    throw new Error('Secret must have 8 numbers');\n  }\n  secretNumbers.forEach(num => {\n    if (num.length !== 6) {\n      throw new Error('Each secret number must be 6 digits');\n    }\n  });\n}","map":{"version":3,"names":["ripple_keypairs_1","require","utils_1","Account","constructor","secretNumbers","_account","familySeed","address","keypair","publicKey","privateKey","_secret","parseSecretString","Array","isArray","Uint8Array","entropyToSecret","randomSecret","validateLengths","derive","getSecret","getSecretString","join","getAddress","getFamilySeed","getKeypair","toString","entropy","secretToEntropy","generateSeed","deriveKeypair","deriveAddress","error","message","Error","exports","length","forEach","num"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/@xrplf/secret-numbers/src/schema/Account.ts"],"sourcesContent":["import { deriveAddress, deriveKeypair, generateSeed } from 'ripple-keypairs'\n\nimport {\n  entropyToSecret,\n  parseSecretString,\n  randomSecret,\n  secretToEntropy,\n} from '../utils'\n\n/* Types ==================================================================== */\n\nexport interface Keypair {\n  publicKey: string\n  privateKey: string\n}\n\ninterface AccountData {\n  familySeed: string\n  address: string\n  keypair: Keypair\n}\n\n/* Class ==================================================================== */\n\nexport class Account {\n  private readonly _secret: string[]\n  private readonly _account: AccountData = {\n    familySeed: '',\n    address: '',\n    keypair: {\n      publicKey: '',\n      privateKey: '',\n    },\n  }\n\n  constructor(secretNumbers?: string[] | string | Uint8Array) {\n    if (typeof secretNumbers === 'string') {\n      this._secret = parseSecretString(secretNumbers)\n    } else if (Array.isArray(secretNumbers)) {\n      this._secret = secretNumbers\n    } else if (secretNumbers instanceof Uint8Array) {\n      this._secret = entropyToSecret(secretNumbers)\n    } else {\n      this._secret = randomSecret()\n    }\n\n    validateLengths(this._secret)\n    this.derive()\n  }\n\n  getSecret(): string[] {\n    return this._secret\n  }\n\n  getSecretString(): string {\n    return this._secret.join(' ')\n  }\n\n  getAddress(): string {\n    return this._account.address\n  }\n\n  getFamilySeed(): string {\n    return this._account.familySeed\n  }\n\n  getKeypair(): Keypair {\n    return this._account.keypair\n  }\n\n  toString(): string {\n    return this.getSecretString()\n  }\n\n  private derive(): void {\n    try {\n      const entropy = secretToEntropy(this._secret)\n      this._account.familySeed = generateSeed({ entropy })\n      this._account.keypair = deriveKeypair(this._account.familySeed)\n      this._account.address = deriveAddress(this._account.keypair.publicKey)\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) {\n        message = error.message\n      }\n      // we'll proceed, but let's report it\n      throw new Error(message)\n    }\n  }\n}\n\nfunction validateLengths(secretNumbers: string[]): void {\n  if (secretNumbers.length !== 8) {\n    throw new Error('Secret must have 8 numbers')\n  }\n  secretNumbers.forEach((num) => {\n    if (num.length !== 6) {\n      throw new Error('Each secret number must be 6 digits')\n    }\n  })\n}\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAsBA,MAAaE,OAAO;EAWlBC,YAAYC,aAA8C;IATzC,KAAAC,QAAQ,GAAgB;MACvCC,UAAU,EAAE,EAAE;MACdC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE;QACPC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE;;KAEf;IAGC,IAAI,OAAON,aAAa,KAAK,QAAQ,EAAE;MACrC,IAAI,CAACO,OAAO,GAAG,IAAAV,OAAA,CAAAW,iBAAiB,EAACR,aAAa,CAAC;KAChD,MAAM,IAAIS,KAAK,CAACC,OAAO,CAACV,aAAa,CAAC,EAAE;MACvC,IAAI,CAACO,OAAO,GAAGP,aAAa;KAC7B,MAAM,IAAIA,aAAa,YAAYW,UAAU,EAAE;MAC9C,IAAI,CAACJ,OAAO,GAAG,IAAAV,OAAA,CAAAe,eAAe,EAACZ,aAAa,CAAC;KAC9C,MAAM;MACL,IAAI,CAACO,OAAO,GAAG,IAAAV,OAAA,CAAAgB,YAAY,GAAE;;IAG/BC,eAAe,CAAC,IAAI,CAACP,OAAO,CAAC;IAC7B,IAAI,CAACQ,MAAM,EAAE;EACf;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACT,OAAO;EACrB;EAEAU,eAAeA,CAAA;IACb,OAAO,IAAI,CAACV,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC;EAC/B;EAEAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAClB,QAAQ,CAACE,OAAO;EAC9B;EAEAiB,aAAaA,CAAA;IACX,OAAO,IAAI,CAACnB,QAAQ,CAACC,UAAU;EACjC;EAEAmB,UAAUA,CAAA;IACR,OAAO,IAAI,CAACpB,QAAQ,CAACG,OAAO;EAC9B;EAEAkB,QAAQA,CAAA;IACN,OAAO,IAAI,CAACL,eAAe,EAAE;EAC/B;EAEQF,MAAMA,CAAA;IACZ,IAAI;MACF,MAAMQ,OAAO,GAAG,IAAA1B,OAAA,CAAA2B,eAAe,EAAC,IAAI,CAACjB,OAAO,CAAC;MAC7C,IAAI,CAACN,QAAQ,CAACC,UAAU,GAAG,IAAAP,iBAAA,CAAA8B,YAAY,EAAC;QAAEF;MAAO,CAAE,CAAC;MACpD,IAAI,CAACtB,QAAQ,CAACG,OAAO,GAAG,IAAAT,iBAAA,CAAA+B,aAAa,EAAC,IAAI,CAACzB,QAAQ,CAACC,UAAU,CAAC;MAC/D,IAAI,CAACD,QAAQ,CAACE,OAAO,GAAG,IAAAR,iBAAA,CAAAgC,aAAa,EAAC,IAAI,CAAC1B,QAAQ,CAACG,OAAO,CAACC,SAAS,CAAC;KACvE,CAAC,OAAOuB,KAAK,EAAE;MACd,IAAIC,OAAO,GAAG,eAAe;MAC7B,IAAID,KAAK,YAAYE,KAAK,EAAE;QAC1BD,OAAO,GAAGD,KAAK,CAACC,OAAO;;MAGzB,MAAM,IAAIC,KAAK,CAACD,OAAO,CAAC;;EAE5B;;AAhEFE,OAAA,CAAAjC,OAAA,GAAAA,OAAA;AAmEA,SAASgB,eAAeA,CAACd,aAAuB;EAC9C,IAAIA,aAAa,CAACgC,MAAM,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;;EAE/C9B,aAAa,CAACiC,OAAO,CAAEC,GAAG,IAAI;IAC5B,IAAIA,GAAG,CAACF,MAAM,KAAK,CAAC,EAAE;MACpB,MAAM,IAAIF,KAAK,CAAC,qCAAqC,CAAC;;EAE1D,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}