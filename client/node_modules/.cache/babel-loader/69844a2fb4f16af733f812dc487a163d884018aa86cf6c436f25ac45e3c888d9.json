{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.walletFromSecretNumbers = void 0;\nconst secret_numbers_1 = require(\"@xrplf/secret-numbers\");\nconst ECDSA_1 = __importDefault(require(\"../ECDSA\"));\nconst _1 = require(\".\");\nfunction walletFromSecretNumbers(secretNumbers, opts) {\n  var _a;\n  const secret = new secret_numbers_1.Account(secretNumbers).getFamilySeed();\n  const updatedOpts = {\n    masterAddress: undefined,\n    algorithm: undefined\n  };\n  if (opts === undefined) {\n    updatedOpts.algorithm = ECDSA_1.default.secp256k1;\n  } else {\n    updatedOpts.masterAddress = opts.masterAddress;\n    updatedOpts.algorithm = (_a = opts.algorithm) !== null && _a !== void 0 ? _a : ECDSA_1.default.secp256k1;\n  }\n  return _1.Wallet.fromSecret(secret, updatedOpts);\n}\nexports.walletFromSecretNumbers = walletFromSecretNumbers;","map":{"version":3,"names":["secret_numbers_1","require","ECDSA_1","__importDefault","_1","walletFromSecretNumbers","secretNumbers","opts","secret","Account","getFamilySeed","updatedOpts","masterAddress","undefined","algorithm","default","secp256k1","_a","Wallet","fromSecret","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/Wallet/walletFromSecretNumbers.ts"],"sourcesContent":["import { Account } from '@xrplf/secret-numbers'\n\nimport ECDSA from '../ECDSA'\n\nimport { Wallet } from '.'\n\n/**\n * Derives a wallet from secret numbers.\n * NOTE: This uses a default encoding algorithm of secp256k1 to match the popular wallet\n * [Xumm (aka Xaman)](https://xumm.app/)'s behavior.\n * This may be different from the DEFAULT_ALGORITHM for other ways to generate a Wallet.\n *\n * @param secretNumbers - A string consisting of 8 times 6 numbers (whitespace delimited) used to derive a wallet.\n * @param opts - (Optional) Options to derive a Wallet.\n * @param opts.masterAddress - Include if a Wallet uses a Regular Key Pair. It must be the master address of the account.\n * @param opts.algorithm - The digital signature algorithm to generate an address for.\n * @returns A Wallet derived from secret numbers.\n * @throws ValidationError if unable to derive private key from secret number input.\n */\nexport function walletFromSecretNumbers(\n  secretNumbers: string[] | string,\n  opts?: { masterAddress?: string; algorithm?: ECDSA },\n): Wallet {\n  const secret = new Account(secretNumbers).getFamilySeed()\n  const updatedOpts: { masterAddress?: string; algorithm?: ECDSA } = {\n    masterAddress: undefined,\n    algorithm: undefined,\n  }\n  // Use secp256k1 since that's the algorithm used by popular wallets like Xumm when generating secret number accounts\n  if (opts === undefined) {\n    updatedOpts.algorithm = ECDSA.secp256k1\n  } else {\n    updatedOpts.masterAddress = opts.masterAddress\n    updatedOpts.algorithm = opts.algorithm ?? ECDSA.secp256k1\n  }\n  return Wallet.fromSecret(secret, updatedOpts)\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,gBAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAC,eAAA,CAAAF,OAAA;AAEA,MAAAG,EAAA,GAAAH,OAAA;AAeA,SAAgBI,uBAAuBA,CACrCC,aAAgC,EAChCC,IAAoD;;EAEpD,MAAMC,MAAM,GAAG,IAAIR,gBAAA,CAAAS,OAAO,CAACH,aAAa,CAAC,CAACI,aAAa,EAAE;EACzD,MAAMC,WAAW,GAAkD;IACjEC,aAAa,EAAEC,SAAS;IACxBC,SAAS,EAAED;GACZ;EAED,IAAIN,IAAI,KAAKM,SAAS,EAAE;IACtBF,WAAW,CAACG,SAAS,GAAGZ,OAAA,CAAAa,OAAK,CAACC,SAAS;GACxC,MAAM;IACLL,WAAW,CAACC,aAAa,GAAGL,IAAI,CAACK,aAAa;IAC9CD,WAAW,CAACG,SAAS,GAAG,CAAAG,EAAA,GAAAV,IAAI,CAACO,SAAS,cAAAG,EAAA,cAAAA,EAAA,GAAIf,OAAA,CAAAa,OAAK,CAACC,SAAS;;EAE3D,OAAOZ,EAAA,CAAAc,MAAM,CAACC,UAAU,CAACX,MAAM,EAAEG,WAAW,CAAC;AAC/C;AAjBAS,OAAA,CAAAf,uBAAA,GAAAA,uBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}