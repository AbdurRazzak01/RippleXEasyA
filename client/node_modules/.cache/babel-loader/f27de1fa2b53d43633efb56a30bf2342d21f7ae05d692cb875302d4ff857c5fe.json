{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst errors_1 = require(\"../../../errors\");\nconst HashPrefix_1 = __importDefault(require(\"../HashPrefix\"));\nconst sha512Half_1 = __importDefault(require(\"../sha512Half\"));\nconst node_1 = require(\"./node\");\nconst HEX = 16;\nclass LeafNode extends node_1.Node {\n  constructor(tag, data, type) {\n    super();\n    this.tag = tag;\n    this.type = type;\n    this.data = data;\n  }\n  get hash() {\n    switch (this.type) {\n      case node_1.NodeType.ACCOUNT_STATE:\n        {\n          const leafPrefix = HashPrefix_1.default.LEAF_NODE.toString(HEX);\n          return (0, sha512Half_1.default)(leafPrefix + this.data + this.tag);\n        }\n      case node_1.NodeType.TRANSACTION_NO_METADATA:\n        {\n          const txIDPrefix = HashPrefix_1.default.TRANSACTION_ID.toString(HEX);\n          return (0, sha512Half_1.default)(txIDPrefix + this.data);\n        }\n      case node_1.NodeType.TRANSACTION_METADATA:\n        {\n          const txNodePrefix = HashPrefix_1.default.TRANSACTION_NODE.toString(HEX);\n          return (0, sha512Half_1.default)(txNodePrefix + this.data + this.tag);\n        }\n      default:\n        throw new errors_1.XrplError('Tried to hash a SHAMap node of unknown type.');\n    }\n  }\n  addItem(tag, node) {\n    throw new errors_1.XrplError('Cannot call addItem on a LeafNode');\n    this.addItem(tag, node);\n  }\n}\nexports.default = LeafNode;","map":{"version":3,"names":["errors_1","require","HashPrefix_1","__importDefault","sha512Half_1","node_1","HEX","LeafNode","Node","constructor","tag","data","type","hash","NodeType","ACCOUNT_STATE","leafPrefix","default","LEAF_NODE","toString","TRANSACTION_NO_METADATA","txIDPrefix","TRANSACTION_ID","TRANSACTION_METADATA","txNodePrefix","TRANSACTION_NODE","XrplError","addItem","node","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/hashes/SHAMap/LeafNode.ts"],"sourcesContent":["import { XrplError } from '../../../errors'\nimport HashPrefix from '../HashPrefix'\nimport sha512Half from '../sha512Half'\n\nimport { NodeType, Node } from './node'\n\nconst HEX = 16\n\n/**\n * Class for SHAMap Leaf Node.\n */\nclass LeafNode extends Node {\n  public tag: string\n  public type: NodeType\n  public data: string\n\n  /**\n   * Leaf node in a SHAMap tree.\n   *\n   * @param tag - Equates to a ledger entry `index`.\n   * @param data - Hex of account state, transaction etc.\n   * @param type - One of TYPE_ACCOUNT_STATE, TYPE_TRANSACTION_MD etc.\n   */\n  public constructor(tag: string, data: string, type: NodeType) {\n    super()\n    this.tag = tag\n    this.type = type\n    this.data = data\n  }\n\n  /**\n   * Get the hash of a LeafNode.\n   *\n   * @returns Hash or undefined.\n   * @throws If node is of unknown type.\n   */\n  public get hash(): string {\n    switch (this.type) {\n      case NodeType.ACCOUNT_STATE: {\n        const leafPrefix = HashPrefix.LEAF_NODE.toString(HEX)\n        return sha512Half(leafPrefix + this.data + this.tag)\n      }\n      case NodeType.TRANSACTION_NO_METADATA: {\n        const txIDPrefix = HashPrefix.TRANSACTION_ID.toString(HEX)\n        return sha512Half(txIDPrefix + this.data)\n      }\n      case NodeType.TRANSACTION_METADATA: {\n        const txNodePrefix = HashPrefix.TRANSACTION_NODE.toString(HEX)\n        return sha512Half(txNodePrefix + this.data + this.tag)\n      }\n      default:\n        throw new XrplError('Tried to hash a SHAMap node of unknown type.')\n    }\n  }\n\n  /**\n   * Add item to Leaf.\n   *\n   * @param tag - Index of the Node.\n   * @param node - Node to insert.\n   * @throws When called, because LeafNodes cannot addItem.\n   */\n  public addItem(tag: string, node: Node): void {\n    throw new XrplError('Cannot call addItem on a LeafNode')\n    this.addItem(tag, node)\n  }\n}\n\nexport default LeafNode\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,MAAAG,YAAA,GAAAD,eAAA,CAAAF,OAAA;AAEA,MAAAI,MAAA,GAAAJ,OAAA;AAEA,MAAMK,GAAG,GAAG,EAAE;AAKd,MAAMC,QAAS,SAAQF,MAAA,CAAAG,IAAI;EAYzBC,YAAmBC,GAAW,EAAEC,IAAY,EAAEC,IAAc;IAC1D,KAAK,EAAE;IACP,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,IAAI,GAAGA,IAAI;EAClB;EAQA,IAAWE,IAAIA,CAAA;IACb,QAAQ,IAAI,CAACD,IAAI;MACf,KAAKP,MAAA,CAAAS,QAAQ,CAACC,aAAa;QAAE;UAC3B,MAAMC,UAAU,GAAGd,YAAA,CAAAe,OAAU,CAACC,SAAS,CAACC,QAAQ,CAACb,GAAG,CAAC;UACrD,OAAO,IAAAF,YAAA,CAAAa,OAAU,EAACD,UAAU,GAAG,IAAI,CAACL,IAAI,GAAG,IAAI,CAACD,GAAG,CAAC;;MAEtD,KAAKL,MAAA,CAAAS,QAAQ,CAACM,uBAAuB;QAAE;UACrC,MAAMC,UAAU,GAAGnB,YAAA,CAAAe,OAAU,CAACK,cAAc,CAACH,QAAQ,CAACb,GAAG,CAAC;UAC1D,OAAO,IAAAF,YAAA,CAAAa,OAAU,EAACI,UAAU,GAAG,IAAI,CAACV,IAAI,CAAC;;MAE3C,KAAKN,MAAA,CAAAS,QAAQ,CAACS,oBAAoB;QAAE;UAClC,MAAMC,YAAY,GAAGtB,YAAA,CAAAe,OAAU,CAACQ,gBAAgB,CAACN,QAAQ,CAACb,GAAG,CAAC;UAC9D,OAAO,IAAAF,YAAA,CAAAa,OAAU,EAACO,YAAY,GAAG,IAAI,CAACb,IAAI,GAAG,IAAI,CAACD,GAAG,CAAC;;MAExD;QACE,MAAM,IAAIV,QAAA,CAAA0B,SAAS,CAAC,8CAA8C,CAAC;;EAEzE;EASOC,OAAOA,CAACjB,GAAW,EAAEkB,IAAU;IACpC,MAAM,IAAI5B,QAAA,CAAA0B,SAAS,CAAC,mCAAmC,CAAC;IACxD,IAAI,CAACC,OAAO,CAACjB,GAAG,EAAEkB,IAAI,CAAC;EACzB;;AAGFC,OAAA,CAAAZ,OAAA,GAAeV,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}