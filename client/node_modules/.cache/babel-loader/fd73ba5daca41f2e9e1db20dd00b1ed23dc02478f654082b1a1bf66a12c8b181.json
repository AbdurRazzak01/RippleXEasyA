{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt8 = void 0;\nconst uint_1 = require(\"./uint\");\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst utils_2 = require(\"../utils\");\n/**\n * Derived UInt class for serializing/deserializing 8 bit UInt\n */\nclass UInt8 extends uint_1.UInt {\n  constructor(bytes) {\n    super(bytes !== null && bytes !== void 0 ? bytes : UInt8.defaultUInt8.bytes);\n  }\n  static fromParser(parser) {\n    return new UInt8(parser.read(UInt8.width));\n  }\n  /**\n   * Construct a UInt8 object from a number\n   *\n   * @param val UInt8 object or number\n   */\n  static from(val) {\n    if (val instanceof UInt8) {\n      return val;\n    }\n    if (typeof val === 'number') {\n      UInt8.checkUintRange(val, 0, 0xff);\n      const buf = new Uint8Array(UInt8.width);\n      (0, utils_2.writeUInt8)(buf, val, 0);\n      return new UInt8(buf);\n    }\n    throw new Error('Cannot construct UInt8 from given value');\n  }\n  /**\n   * get the value of a UInt8 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf() {\n    return parseInt((0, utils_1.bytesToHex)(this.bytes), 16);\n  }\n}\nexports.UInt8 = UInt8;\nUInt8.width = 8 / 8; // 1\nUInt8.defaultUInt8 = new UInt8(new Uint8Array(UInt8.width));","map":{"version":3,"names":["uint_1","require","utils_1","utils_2","UInt8","UInt","constructor","bytes","defaultUInt8","fromParser","parser","read","width","from","val","checkUintRange","buf","Uint8Array","writeUInt8","Error","valueOf","parseInt","bytesToHex","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/types/uint-8.ts"],"sourcesContent":["import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\nimport { writeUInt8 } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 8 bit UInt\n */\nclass UInt8 extends UInt {\n  protected static readonly width: number = 8 / 8 // 1\n  static readonly defaultUInt8: UInt8 = new UInt8(new Uint8Array(UInt8.width))\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt8.defaultUInt8.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt8(parser.read(UInt8.width))\n  }\n\n  /**\n   * Construct a UInt8 object from a number\n   *\n   * @param val UInt8 object or number\n   */\n  static from<T extends UInt8 | number>(val: T): UInt8 {\n    if (val instanceof UInt8) {\n      return val\n    }\n\n    if (typeof val === 'number') {\n      UInt8.checkUintRange(val, 0, 0xff)\n\n      const buf = new Uint8Array(UInt8.width)\n      writeUInt8(buf, val, 0)\n      return new UInt8(buf)\n    }\n\n    throw new Error('Cannot construct UInt8 from given value')\n  }\n\n  /**\n   * get the value of a UInt8 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(bytesToHex(this.bytes), 16)\n  }\n}\n\nexport { UInt8 }\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAEA;;;AAGA,MAAMG,KAAM,SAAQJ,MAAA,CAAAK,IAAI;EAItBC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIH,KAAK,CAACI,YAAY,CAACD,KAAK,CAAC;EAC1C;EAEA,OAAOE,UAAUA,CAACC,MAAoB;IACpC,OAAO,IAAIN,KAAK,CAACM,MAAM,CAACC,IAAI,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC;EAC5C;EAEA;;;;;EAKA,OAAOC,IAAIA,CAA2BC,GAAM;IAC1C,IAAIA,GAAG,YAAYV,KAAK,EAAE;MACxB,OAAOU,GAAG;;IAGZ,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAC3BV,KAAK,CAACW,cAAc,CAACD,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;MAElC,MAAME,GAAG,GAAG,IAAIC,UAAU,CAACb,KAAK,CAACQ,KAAK,CAAC;MACvC,IAAAT,OAAA,CAAAe,UAAU,EAACF,GAAG,EAAEF,GAAG,EAAE,CAAC,CAAC;MACvB,OAAO,IAAIV,KAAK,CAACY,GAAG,CAAC;;IAGvB,MAAM,IAAIG,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EAEA;;;;;EAKAC,OAAOA,CAAA;IACL,OAAOC,QAAQ,CAAC,IAAAnB,OAAA,CAAAoB,UAAU,EAAC,IAAI,CAACf,KAAK,CAAC,EAAE,EAAE,CAAC;EAC7C;;AAGOgB,OAAA,CAAAnB,KAAA,GAAAA,KAAA;AA1CmBA,KAAA,CAAAQ,KAAK,GAAW,CAAC,GAAG,CAAC,EAAC;AAChCR,KAAA,CAAAI,YAAY,GAAU,IAAIJ,KAAK,CAAC,IAAIa,UAAU,CAACb,KAAK,CAACQ,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}