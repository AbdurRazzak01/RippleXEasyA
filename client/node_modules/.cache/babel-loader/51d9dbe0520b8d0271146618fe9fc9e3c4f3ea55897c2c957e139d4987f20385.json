{"ast":null,"code":"var _jsxFileName = \"/Users/mdabdurrazzak/XRPL_React_App/client/src/XrpWallet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Client, Wallet, dropsToXrp, rippleTimeToISOTime } from 'xrpl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XrpWallet = () => {\n  _s();\n  const [accountInfo, setAccountInfo] = useState(null);\n  const [ledgerDetails, setLedgerDetails] = useState(null);\n  const [sendXrpForm, setSendXrpForm] = useState({\n    destination: '',\n    amount: '',\n    destinationTag: ''\n  });\n  useEffect(() => {\n    const client = new Client('wss://s.altnet.rippletest.net:51233');\n    const fetchAccountInfo = async () => {\n      try {\n        await client.connect();\n        const wallet = Wallet.fromSecret('sEdTMXRuiNUADDvLYb6tKrj6Y9ESqzY'); // Use the provided secret\n        const {\n          account_data\n        } = await client.request({\n          command: 'account_info',\n          account: wallet.address,\n          ledger_index: 'validated'\n        });\n        setAccountInfo(account_data);\n        await client.request({\n          command: 'subscribe',\n          streams: ['ledger']\n        });\n        client.on('ledgerClosed', ledger => {\n          setLedgerDetails(ledger);\n        });\n      } catch (error) {\n        console.error('Error connecting to the XRP Ledger:', error);\n      }\n    };\n    fetchAccountInfo();\n    return () => {\n      client.disconnect();\n    };\n  }, []);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSendXrpForm({\n      ...sendXrpForm,\n      [name]: value\n    });\n  };\n  const handleSendXrp = async () => {\n    try {\n      const wallet = Wallet.fromSecret('sEdTMXRuiNUADDvLYb6tKrj6Y9ESqzY'); // Use the provided secret\n      const client = new Client('wss://s.altnet.rippletest.net:51233');\n      await client.connect();\n      const txJson = {\n        TransactionType: 'Payment',\n        Account: wallet.address,\n        Destination: sendXrpForm.destination,\n        DestinationTag: sendXrpForm.destinationTag,\n        Amount: sendXrpForm.amount\n      };\n      const {\n        result\n      } = await client.submit(txJson, {\n        wallet\n      });\n      console.log(result);\n      // Optionally, update account info after sending XRP\n      // Fetch account info again and update state\n    } catch (error) {\n      console.error('Error sending XRP:', error);\n      // Display an error message to the user\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Account Information:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), accountInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Account Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this), \" \", accountInfo.Account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Balance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this), \" \", dropsToXrp(accountInfo.Balance), \" XRP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Ledger Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), ledgerDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Ledger Index:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this), \" \", ledgerDetails.ledger_index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Ledger Hash:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 24\n        }, this), \" \", ledgerDetails.ledger_hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Close Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 24\n        }, this), \" \", rippleTimeToISOTime(ledgerDetails.ledger_time)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Send XRP:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendXrp,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Destination Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"destination\",\n          value: sendXrpForm.destination,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount (XRP):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"amount\",\n          value: sendXrpForm.amount,\n          onChange: handleInputChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Destination Tag:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"destinationTag\",\n          value: sendXrpForm.destinationTag,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send XRP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(XrpWallet, \"osE2UvFRXKD9eHNjZuWqjIBScVw=\");\n_c = XrpWallet;\nexport default XrpWallet;\nvar _c;\n$RefreshReg$(_c, \"XrpWallet\");","map":{"version":3,"names":["React","useEffect","useState","Client","Wallet","dropsToXrp","rippleTimeToISOTime","jsxDEV","_jsxDEV","XrpWallet","_s","accountInfo","setAccountInfo","ledgerDetails","setLedgerDetails","sendXrpForm","setSendXrpForm","destination","amount","destinationTag","client","fetchAccountInfo","connect","wallet","fromSecret","account_data","request","command","account","address","ledger_index","streams","on","ledger","error","console","disconnect","handleInputChange","e","name","value","target","handleSendXrp","txJson","TransactionType","Account","Destination","DestinationTag","Amount","result","submit","log","children","fileName","_jsxFileName","lineNumber","columnNumber","Balance","ledger_hash","ledger_time","onSubmit","type","onChange","required","_c","$RefreshReg$"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/XrpWallet.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Client, Wallet, dropsToXrp, rippleTimeToISOTime } from 'xrpl';\n\nconst XrpWallet = () => {\n    const [accountInfo, setAccountInfo] = useState(null);\n    const [ledgerDetails, setLedgerDetails] = useState(null);\n    const [sendXrpForm, setSendXrpForm] = useState({ destination: '', amount: '', destinationTag: '' });\n\n    useEffect(() => {\n        const client = new Client('wss://s.altnet.rippletest.net:51233');\n\n        const fetchAccountInfo = async () => {\n            try {\n                await client.connect();\n\n                const wallet = Wallet.fromSecret('sEdTMXRuiNUADDvLYb6tKrj6Y9ESqzY'); // Use the provided secret\n                const { account_data } = await client.request({\n                    command: 'account_info',\n                    account: wallet.address,\n                    ledger_index: 'validated',\n                });\n\n                setAccountInfo(account_data);\n\n                await client.request({\n                    command: 'subscribe',\n                    streams: ['ledger'],\n                });\n\n                client.on('ledgerClosed', (ledger) => {\n                    setLedgerDetails(ledger);\n                });\n            } catch (error) {\n                console.error('Error connecting to the XRP Ledger:', error);\n            }\n        };\n\n        fetchAccountInfo();\n\n        return () => {\n            client.disconnect();\n        };\n    }, []);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setSendXrpForm({ ...sendXrpForm, [name]: value });\n    };\n\n    const handleSendXrp = async () => {\n        try {\n            const wallet = Wallet.fromSecret('sEdTMXRuiNUADDvLYb6tKrj6Y9ESqzY'); // Use the provided secret\n            const client = new Client('wss://s.altnet.rippletest.net:51233');\n            await client.connect();\n\n            const txJson = {\n                TransactionType: 'Payment',\n                Account: wallet.address,\n                Destination: sendXrpForm.destination,\n                DestinationTag: sendXrpForm.destinationTag,\n                Amount: sendXrpForm.amount,\n            };\n\n            const { result } = await client.submit(txJson, { wallet });\n            console.log(result);\n            // Optionally, update account info after sending XRP\n            // Fetch account info again and update state\n        } catch (error) {\n            console.error('Error sending XRP:', error);\n            // Display an error message to the user\n        }\n    };\n\n    return (\n        <div>\n            <h2>Account Information:</h2>\n            {accountInfo && (\n                <div>\n                    <p><strong>Account Address:</strong> {accountInfo.Account}</p>\n                    <p><strong>Balance:</strong> {dropsToXrp(accountInfo.Balance)} XRP</p>\n                </div>\n            )}\n            <h2>Latest Ledger Details:</h2>\n            {ledgerDetails && (\n                <div>\n                    <p><strong>Ledger Index:</strong> {ledgerDetails.ledger_index}</p>\n                    <p><strong>Ledger Hash:</strong> {ledgerDetails.ledger_hash}</p>\n                    <p><strong>Close Time:</strong> {rippleTimeToISOTime(ledgerDetails.ledger_time)}</p>\n                </div>\n            )}\n            <h2>Send XRP:</h2>\n            <form onSubmit={handleSendXrp}>\n                <label>\n                    Destination Address:\n                    <input type=\"text\" name=\"destination\" value={sendXrpForm.destination} onChange={handleInputChange} required />\n                </label>\n                <label>\n                    Amount (XRP):\n                    <input type=\"text\" name=\"amount\" value={sendXrpForm.amount} onChange={handleInputChange} required />\n                </label>\n                <label>\n                    Destination Tag:\n                    <input type=\"text\" name=\"destinationTag\" value={sendXrpForm.destinationTag} onChange={handleInputChange} />\n                </label>\n                <button type=\"submit\">Send XRP</button>\n            </form>\n        </div>\n    );\n};\n\nexport default XrpWallet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}