{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.quality = void 0;\nconst types_1 = require(\"./types\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\n/**\n * class for encoding and decoding quality\n */\nclass quality {\n  /**\n   * Encode quality amount\n   *\n   * @param arg string representation of an amount\n   * @returns Serialized quality\n   */\n  static encode(quality) {\n    const decimal = (0, bignumber_js_1.default)(quality);\n    const exponent = ((decimal === null || decimal === void 0 ? void 0 : decimal.e) || 0) - 15;\n    const qualityString = decimal.times(`1e${-exponent}`).abs().toString();\n    const bytes = types_1.coreTypes.UInt64.from(BigInt(qualityString)).toBytes();\n    bytes[0] = exponent + 100;\n    return bytes;\n  }\n  /**\n   * Decode quality amount\n   *\n   * @param arg hex-string denoting serialized quality\n   * @returns deserialized quality\n   */\n  static decode(quality) {\n    const bytes = (0, utils_1.hexToBytes)(quality).slice(-8);\n    const exponent = bytes[0] - 100;\n    const mantissa = new bignumber_js_1.default(`0x${(0, utils_1.bytesToHex)(bytes.slice(1))}`);\n    return mantissa.times(`1e${exponent}`);\n  }\n}\nexports.quality = quality;","map":{"version":3,"names":["types_1","require","bignumber_js_1","__importDefault","utils_1","quality","encode","decimal","default","exponent","e","qualityString","times","abs","toString","bytes","coreTypes","UInt64","from","BigInt","toBytes","decode","hexToBytes","slice","mantissa","bytesToHex","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/quality.ts"],"sourcesContent":["import { coreTypes } from './types'\nimport BigNumber from 'bignumber.js'\nimport { bytesToHex, hexToBytes } from '@xrplf/isomorphic/utils'\n\n/**\n * class for encoding and decoding quality\n */\nclass quality {\n  /**\n   * Encode quality amount\n   *\n   * @param arg string representation of an amount\n   * @returns Serialized quality\n   */\n  static encode(quality: string): Uint8Array {\n    const decimal = BigNumber(quality)\n    const exponent = (decimal?.e || 0) - 15\n    const qualityString = decimal.times(`1e${-exponent}`).abs().toString()\n    const bytes = coreTypes.UInt64.from(BigInt(qualityString)).toBytes()\n    bytes[0] = exponent + 100\n    return bytes\n  }\n\n  /**\n   * Decode quality amount\n   *\n   * @param arg hex-string denoting serialized quality\n   * @returns deserialized quality\n   */\n  static decode(quality: string): BigNumber {\n    const bytes = hexToBytes(quality).slice(-8)\n    const exponent = bytes[0] - 100\n    const mantissa = new BigNumber(`0x${bytesToHex(bytes.slice(1))}`)\n    return mantissa.times(`1e${exponent}`)\n  }\n}\n\nexport { quality }\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAEA;;;AAGA,MAAMI,OAAO;EACX;;;;;;EAMA,OAAOC,MAAMA,CAACD,OAAe;IAC3B,MAAME,OAAO,GAAG,IAAAL,cAAA,CAAAM,OAAS,EAACH,OAAO,CAAC;IAClC,MAAMI,QAAQ,GAAG,CAAC,CAAAF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,CAAC,KAAI,CAAC,IAAI,EAAE;IACvC,MAAMC,aAAa,GAAGJ,OAAO,CAACK,KAAK,CAAC,KAAK,CAACH,QAAQ,EAAE,CAAC,CAACI,GAAG,EAAE,CAACC,QAAQ,EAAE;IACtE,MAAMC,KAAK,GAAGf,OAAA,CAAAgB,SAAS,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACR,aAAa,CAAC,CAAC,CAACS,OAAO,EAAE;IACpEL,KAAK,CAAC,CAAC,CAAC,GAAGN,QAAQ,GAAG,GAAG;IACzB,OAAOM,KAAK;EACd;EAEA;;;;;;EAMA,OAAOM,MAAMA,CAAChB,OAAe;IAC3B,MAAMU,KAAK,GAAG,IAAAX,OAAA,CAAAkB,UAAU,EAACjB,OAAO,CAAC,CAACkB,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3C,MAAMd,QAAQ,GAAGM,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;IAC/B,MAAMS,QAAQ,GAAG,IAAItB,cAAA,CAAAM,OAAS,CAAC,KAAK,IAAAJ,OAAA,CAAAqB,UAAU,EAACV,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACjE,OAAOC,QAAQ,CAACZ,KAAK,CAAC,KAAKH,QAAQ,EAAE,CAAC;EACxC;;AAGOiB,OAAA,CAAArB,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}