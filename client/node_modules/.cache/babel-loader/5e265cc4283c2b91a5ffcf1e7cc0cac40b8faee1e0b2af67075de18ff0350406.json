{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateNFTokenAcceptOffer = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateNFTokenBrokerFee(tx) {\n  const value = (0, common_1.parseAmountValue)(tx.NFTokenBrokerFee);\n  if (Number.isNaN(value)) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: invalid NFTokenBrokerFee');\n  }\n  if (value <= 0) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee');\n  }\n  if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode');\n  }\n}\nfunction validateNFTokenAcceptOffer(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.NFTokenBrokerFee != null) {\n    validateNFTokenBrokerFee(tx);\n  }\n  if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {\n    throw new errors_1.ValidationError('NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer');\n  }\n}\nexports.validateNFTokenAcceptOffer = validateNFTokenAcceptOffer;","map":{"version":3,"names":["Object","defineProperty","exports","value","validateNFTokenAcceptOffer","errors_1","require","common_1","validateNFTokenBrokerFee","tx","parseAmountValue","NFTokenBrokerFee","Number","isNaN","ValidationError","NFTokenSellOffer","NFTokenBuyOffer","validateBaseTransaction"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/models/transactions/NFTokenAcceptOffer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateNFTokenAcceptOffer = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateNFTokenBrokerFee(tx) {\n    const value = (0, common_1.parseAmountValue)(tx.NFTokenBrokerFee);\n    if (Number.isNaN(value)) {\n        throw new errors_1.ValidationError('NFTokenAcceptOffer: invalid NFTokenBrokerFee');\n    }\n    if (value <= 0) {\n        throw new errors_1.ValidationError('NFTokenAcceptOffer: NFTokenBrokerFee must be greater than 0; omit if there is no fee');\n    }\n    if (tx.NFTokenSellOffer == null || tx.NFTokenBuyOffer == null) {\n        throw new errors_1.ValidationError('NFTokenAcceptOffer: both NFTokenSellOffer and NFTokenBuyOffer must be set if using brokered mode');\n    }\n}\nfunction validateNFTokenAcceptOffer(tx) {\n    (0, common_1.validateBaseTransaction)(tx);\n    if (tx.NFTokenBrokerFee != null) {\n        validateNFTokenBrokerFee(tx);\n    }\n    if (tx.NFTokenSellOffer == null && tx.NFTokenBuyOffer == null) {\n        throw new errors_1.ValidationError('NFTokenAcceptOffer: must set either NFTokenSellOffer or NFTokenBuyOffer');\n    }\n}\nexports.validateNFTokenAcceptOffer = validateNFTokenAcceptOffer;\n//# sourceMappingURL=NFTokenAcceptOffer.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,0BAA0B,GAAG,KAAK,CAAC;AAC3C,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AACxC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,SAASE,wBAAwBA,CAACC,EAAE,EAAE;EAClC,MAAMN,KAAK,GAAG,CAAC,CAAC,EAAEI,QAAQ,CAACG,gBAAgB,EAAED,EAAE,CAACE,gBAAgB,CAAC;EACjE,IAAIC,MAAM,CAACC,KAAK,CAACV,KAAK,CAAC,EAAE;IACrB,MAAM,IAAIE,QAAQ,CAACS,eAAe,CAAC,8CAA8C,CAAC;EACtF;EACA,IAAIX,KAAK,IAAI,CAAC,EAAE;IACZ,MAAM,IAAIE,QAAQ,CAACS,eAAe,CAAC,sFAAsF,CAAC;EAC9H;EACA,IAAIL,EAAE,CAACM,gBAAgB,IAAI,IAAI,IAAIN,EAAE,CAACO,eAAe,IAAI,IAAI,EAAE;IAC3D,MAAM,IAAIX,QAAQ,CAACS,eAAe,CAAC,kGAAkG,CAAC;EAC1I;AACJ;AACA,SAASV,0BAA0BA,CAACK,EAAE,EAAE;EACpC,CAAC,CAAC,EAAEF,QAAQ,CAACU,uBAAuB,EAAER,EAAE,CAAC;EACzC,IAAIA,EAAE,CAACE,gBAAgB,IAAI,IAAI,EAAE;IAC7BH,wBAAwB,CAACC,EAAE,CAAC;EAChC;EACA,IAAIA,EAAE,CAACM,gBAAgB,IAAI,IAAI,IAAIN,EAAE,CAACO,eAAe,IAAI,IAAI,EAAE;IAC3D,MAAM,IAAIX,QAAQ,CAACS,eAAe,CAAC,yEAAyE,CAAC;EACjH;AACJ;AACAZ,OAAO,CAACE,0BAA0B,GAAGA,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}