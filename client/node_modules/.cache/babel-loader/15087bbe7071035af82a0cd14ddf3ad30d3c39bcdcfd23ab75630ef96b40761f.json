{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.percentToQuality = exports.transferRateToDecimal = exports.qualityToDecimal = exports.decimalToQuality = exports.percentToTransferRate = exports.decimalToTransferRate = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst BASE_TEN = 10;\nconst ONE_BILLION = '1000000000';\nconst TWO_BILLION = '2000000000';\nfunction percentToDecimal(percent) {\n  if (!percent.endsWith('%')) {\n    throw new errors_1.ValidationError(`Value ${percent} must end with %`);\n  }\n  const split = percent.split('%').filter(str => str !== '');\n  if (split.length !== 1) {\n    throw new errors_1.ValidationError(`Value ${percent} contains too many % signs`);\n  }\n  return new bignumber_js_1.default(split[0]).dividedBy('100').toString(BASE_TEN);\n}\nfunction decimalToTransferRate(decimal) {\n  const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION).plus(ONE_BILLION);\n  if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {\n    throw new errors_1.ValidationError(`Decimal value must be between 0 and 1.00.`);\n  }\n  const billionths = rate.toString(BASE_TEN);\n  if (billionths === ONE_BILLION) {\n    return 0;\n  }\n  if (billionths === 'NaN') {\n    throw new errors_1.ValidationError(`Value is not a number`);\n  }\n  if (billionths.includes('.')) {\n    throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n  }\n  return Number(billionths);\n}\nexports.decimalToTransferRate = decimalToTransferRate;\nfunction percentToTransferRate(percent) {\n  return decimalToTransferRate(percentToDecimal(percent));\n}\nexports.percentToTransferRate = percentToTransferRate;\nfunction decimalToQuality(decimal) {\n  const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION);\n  const billionths = rate.toString(BASE_TEN);\n  if (billionths === 'NaN') {\n    throw new errors_1.ValidationError(`Value is not a number`);\n  }\n  if (billionths.includes('-')) {\n    throw new errors_1.ValidationError('Cannot have negative Quality');\n  }\n  if (billionths === ONE_BILLION) {\n    return 0;\n  }\n  if (billionths.includes('.')) {\n    throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n  }\n  return Number(billionths);\n}\nexports.decimalToQuality = decimalToQuality;\nfunction qualityToDecimal(quality) {\n  if (!Number.isInteger(quality)) {\n    throw new errors_1.ValidationError('Quality must be an integer');\n  }\n  if (quality < 0) {\n    throw new errors_1.ValidationError('Negative quality not allowed');\n  }\n  if (quality === 0) {\n    return '1';\n  }\n  const decimal = new bignumber_js_1.default(quality).dividedBy(ONE_BILLION);\n  return decimal.toString(BASE_TEN);\n}\nexports.qualityToDecimal = qualityToDecimal;\nfunction transferRateToDecimal(rate) {\n  if (!Number.isInteger(rate)) {\n    throw new errors_1.ValidationError('Error decoding, transfer Rate must be an integer');\n  }\n  if (rate === 0) {\n    return '0';\n  }\n  const decimal = new bignumber_js_1.default(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION);\n  if (decimal.isLessThan(0)) {\n    throw new errors_1.ValidationError('Error decoding, negative transfer rate');\n  }\n  return decimal.toString(BASE_TEN);\n}\nexports.transferRateToDecimal = transferRateToDecimal;\nfunction percentToQuality(percent) {\n  return decimalToQuality(percentToDecimal(percent));\n}\nexports.percentToQuality = percentToQuality;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","percentToQuality","transferRateToDecimal","qualityToDecimal","decimalToQuality","percentToTransferRate","decimalToTransferRate","bignumber_js_1","require","errors_1","BASE_TEN","ONE_BILLION","TWO_BILLION","percentToDecimal","percent","endsWith","ValidationError","split","filter","str","length","default","dividedBy","toString","decimal","rate","times","plus","isLessThan","isGreaterThan","billionths","includes","Number","quality","isInteger","minus"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/quality.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.percentToQuality = exports.transferRateToDecimal = exports.qualityToDecimal = exports.decimalToQuality = exports.percentToTransferRate = exports.decimalToTransferRate = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst BASE_TEN = 10;\nconst ONE_BILLION = '1000000000';\nconst TWO_BILLION = '2000000000';\nfunction percentToDecimal(percent) {\n    if (!percent.endsWith('%')) {\n        throw new errors_1.ValidationError(`Value ${percent} must end with %`);\n    }\n    const split = percent.split('%').filter((str) => str !== '');\n    if (split.length !== 1) {\n        throw new errors_1.ValidationError(`Value ${percent} contains too many % signs`);\n    }\n    return new bignumber_js_1.default(split[0]).dividedBy('100').toString(BASE_TEN);\n}\nfunction decimalToTransferRate(decimal) {\n    const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION).plus(ONE_BILLION);\n    if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {\n        throw new errors_1.ValidationError(`Decimal value must be between 0 and 1.00.`);\n    }\n    const billionths = rate.toString(BASE_TEN);\n    if (billionths === ONE_BILLION) {\n        return 0;\n    }\n    if (billionths === 'NaN') {\n        throw new errors_1.ValidationError(`Value is not a number`);\n    }\n    if (billionths.includes('.')) {\n        throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n    }\n    return Number(billionths);\n}\nexports.decimalToTransferRate = decimalToTransferRate;\nfunction percentToTransferRate(percent) {\n    return decimalToTransferRate(percentToDecimal(percent));\n}\nexports.percentToTransferRate = percentToTransferRate;\nfunction decimalToQuality(decimal) {\n    const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION);\n    const billionths = rate.toString(BASE_TEN);\n    if (billionths === 'NaN') {\n        throw new errors_1.ValidationError(`Value is not a number`);\n    }\n    if (billionths.includes('-')) {\n        throw new errors_1.ValidationError('Cannot have negative Quality');\n    }\n    if (billionths === ONE_BILLION) {\n        return 0;\n    }\n    if (billionths.includes('.')) {\n        throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n    }\n    return Number(billionths);\n}\nexports.decimalToQuality = decimalToQuality;\nfunction qualityToDecimal(quality) {\n    if (!Number.isInteger(quality)) {\n        throw new errors_1.ValidationError('Quality must be an integer');\n    }\n    if (quality < 0) {\n        throw new errors_1.ValidationError('Negative quality not allowed');\n    }\n    if (quality === 0) {\n        return '1';\n    }\n    const decimal = new bignumber_js_1.default(quality).dividedBy(ONE_BILLION);\n    return decimal.toString(BASE_TEN);\n}\nexports.qualityToDecimal = qualityToDecimal;\nfunction transferRateToDecimal(rate) {\n    if (!Number.isInteger(rate)) {\n        throw new errors_1.ValidationError('Error decoding, transfer Rate must be an integer');\n    }\n    if (rate === 0) {\n        return '0';\n    }\n    const decimal = new bignumber_js_1.default(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION);\n    if (decimal.isLessThan(0)) {\n        throw new errors_1.ValidationError('Error decoding, negative transfer rate');\n    }\n    return decimal.toString(BASE_TEN);\n}\nexports.transferRateToDecimal = transferRateToDecimal;\nfunction percentToQuality(percent) {\n    return decimalToQuality(percentToDecimal(percent));\n}\nexports.percentToQuality = percentToQuality;\n//# sourceMappingURL=quality.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}