{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePaymentChannelClaim = exports.PaymentChannelClaimFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar PaymentChannelClaimFlags;\n(function (PaymentChannelClaimFlags) {\n  PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfRenew\"] = 65536] = \"tfRenew\";\n  PaymentChannelClaimFlags[PaymentChannelClaimFlags[\"tfClose\"] = 131072] = \"tfClose\";\n})(PaymentChannelClaimFlags || (exports.PaymentChannelClaimFlags = PaymentChannelClaimFlags = {}));\nfunction validatePaymentChannelClaim(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Channel === undefined) {\n    throw new errors_1.ValidationError('PaymentChannelClaim: missing Channel');\n  }\n  if (typeof tx.Channel !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Channel must be a string');\n  }\n  if (tx.Balance !== undefined && typeof tx.Balance !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Balance must be a string');\n  }\n  if (tx.Amount !== undefined && typeof tx.Amount !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Amount must be a string');\n  }\n  if (tx.Signature !== undefined && typeof tx.Signature !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: Signature must be a string');\n  }\n  if (tx.PublicKey !== undefined && typeof tx.PublicKey !== 'string') {\n    throw new errors_1.ValidationError('PaymentChannelClaim: PublicKey must be a string');\n  }\n}\nexports.validatePaymentChannelClaim = validatePaymentChannelClaim;","map":{"version":3,"names":["errors_1","require","common_1","PaymentChannelClaimFlags","exports","validatePaymentChannelClaim","tx","validateBaseTransaction","Channel","undefined","ValidationError","Balance","Amount","Signature","PublicKey"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/paymentChannelClaim.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport { BaseTransaction, GlobalFlags, validateBaseTransaction } from './common'\n\n/**\n * Enum representing values for PaymentChannelClaim transaction flags.\n *\n * @category Transaction Flags\n */\nexport enum PaymentChannelClaimFlags {\n  /**\n   * Clear the channel's Expiration time. (Expiration is different from the\n   * channel's immutable CancelAfter time.) Only the source address of the\n   * payment channel can use this flag.\n   */\n  tfRenew = 0x00010000,\n  /**\n   * Request to close the channel. Only the channel source and destination\n   * addresses can use this flag. This flag closes the channel immediately if it\n   * has no more XRP allocated to it after processing the current claim, or if\n   * the destination address uses it. If the source address uses this flag when\n   * the channel still holds XRP, this schedules the channel to close after\n   * SettleDelay seconds have passed. (Specifically, this sets the Expiration of\n   * the channel to the close time of the previous ledger plus the channel's\n   * SettleDelay time, unless the channel already has an earlier Expiration\n   * time.) If the destination address uses this flag when the channel still\n   * holds XRP, any XRP that remains after processing the claim is returned to\n   * the source address.\n   */\n  tfClose = 0x00020000,\n}\n\n/**\n * Map of flags to boolean values representing {@link PaymentChannelClaim}\n * transaction flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n * const paymentChannelClaim: PaymentChannelClaim = {\n *  Account: 'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj,\n *  TransactionType: 'PaymentChannelClaim',\n *  Channel: hashes.hashPaymentChannel(\n *    'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj',\n *    'rQGYqiyH5Ue9J96p4E6Qt6AvqxK4sDhnS5',\n *    21970712,\n *  ),\n *  Amount: '100',\n *  Flags: {\n *    tfClose: true\n *  }\n *}\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(paymentChannelClaim)\n * console.log(autofilledTx)\n * // {\n * //  Account: 'rMpxZpuy5RBSP47oK2hDWUtk3B5BNQHfGj',\n * //  TransactionType: 'PaymentChannelClaim',\n * //  Channel: 'FC14BF9245D731DC1749EE0F070765E4EB4E993F8ECEE3D00F7E6E26D6EF98CF',\n * //  Amount: '100',\n * //  Flags: 131072,\n * //  Sequence: 21970713,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21970658\n * // }\n * ```\n */\nexport interface PaymentChannelClaimFlagsInterface extends GlobalFlags {\n  /**\n   * Clear the channel's Expiration time. (Expiration is different from the\n   * channel's immutable CancelAfter time.) Only the source address of the\n   * payment channel can use this flag.\n   */\n  tfRenew?: boolean\n  /**\n   * Request to close the channel. Only the channel source and destination\n   * addresses can use this flag. This flag closes the channel immediately if it\n   * has no more XRP allocated to it after processing the current claim, or if\n   * the destination address uses it. If the source address uses this flag when\n   * the channel still holds XRP, this schedules the channel to close after\n   * SettleDelay seconds have passed. (Specifically, this sets the Expiration of\n   * the channel to the close time of the previous ledger plus the channel's\n   * SettleDelay time, unless the channel already has an earlier Expiration\n   * time.) If the destination address uses this flag when the channel still\n   * holds XRP, any XRP that remains after processing the claim is returned to\n   * the source address.\n   */\n  tfClose?: boolean\n}\n\n/**\n * Claim XRP from a payment channel, adjust the payment channel's expiration,\n * or both.\n *\n * @category Transaction Models\n */\nexport interface PaymentChannelClaim extends BaseTransaction {\n  TransactionType: 'PaymentChannelClaim'\n  Flags?: number | PaymentChannelClaimFlagsInterface\n  /** The unique ID of the channel as a 64-character hexadecimal string. */\n  Channel: string\n  /**\n   * Total amount of XRP, in drops, delivered by this channel after processing\n   * this claim. Required to deliver XRP. Must be more than the total amount\n   * delivered by the channel so far, but not greater than the Amount of the\n   * signed claim. Must be provided except when closing the channel.\n   */\n  Balance?: string\n  /**\n   * The amount of XRP, in drops, authorized by the Signature. This must match\n   * the amount in the signed message. This is the cumulative amount of XRP that\n   * can be dispensed by the channel, including XRP previously redeemed.\n   */\n  Amount?: string\n  /**\n   * The signature of this claim, as hexadecimal. The signed message contains\n   * the channel ID and the amount of the claim. Required unless the sender of\n   * the transaction is the source address of the channel.\n   */\n  Signature?: string\n  /**\n   * The public key used for the signature, as hexadecimal. This must match the\n   * PublicKey stored in the ledger for the channel. Required unless the sender\n   * of the transaction is the source address of the channel and the Signature\n   * field is omitted.\n   */\n  PublicKey?: string\n}\n\n/**\n * Verify the form and type of an PaymentChannelClaim at runtime.\n *\n * @param tx - An PaymentChannelClaim Transaction.\n * @throws When the PaymentChannelClaim is Malformed.\n */\nexport function validatePaymentChannelClaim(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Channel === undefined) {\n    throw new ValidationError('PaymentChannelClaim: missing Channel')\n  }\n\n  if (typeof tx.Channel !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Channel must be a string')\n  }\n\n  if (tx.Balance !== undefined && typeof tx.Balance !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Balance must be a string')\n  }\n\n  if (tx.Amount !== undefined && typeof tx.Amount !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Amount must be a string')\n  }\n\n  if (tx.Signature !== undefined && typeof tx.Signature !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: Signature must be a string')\n  }\n\n  if (tx.PublicKey !== undefined && typeof tx.PublicKey !== 'string') {\n    throw new ValidationError('PaymentChannelClaim: PublicKey must be a string')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AAOA,IAAYE,wBAqBX;AArBD,WAAYA,wBAAwB;EAMlCA,wBAAA,CAAAA,wBAAA,gCAAoB;EAcpBA,wBAAA,CAAAA,wBAAA,iCAAoB;AACtB,CAAC,EArBWA,wBAAwB,KAAAC,OAAA,CAAAD,wBAAA,GAAxBA,wBAAwB;AAgIpC,SAAgBE,2BAA2BA,CAACC,EAA2B;EACrE,IAAAJ,QAAA,CAAAK,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,OAAO,KAAKC,SAAS,EAAE;IAC5B,MAAM,IAAIT,QAAA,CAAAU,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAI,OAAOJ,EAAE,CAACE,OAAO,KAAK,QAAQ,EAAE;IAClC,MAAM,IAAIR,QAAA,CAAAU,eAAe,CAAC,+CAA+C,CAAC;;EAG5E,IAAIJ,EAAE,CAACK,OAAO,KAAKF,SAAS,IAAI,OAAOH,EAAE,CAACK,OAAO,KAAK,QAAQ,EAAE;IAC9D,MAAM,IAAIX,QAAA,CAAAU,eAAe,CAAC,+CAA+C,CAAC;;EAG5E,IAAIJ,EAAE,CAACM,MAAM,KAAKH,SAAS,IAAI,OAAOH,EAAE,CAACM,MAAM,KAAK,QAAQ,EAAE;IAC5D,MAAM,IAAIZ,QAAA,CAAAU,eAAe,CAAC,8CAA8C,CAAC;;EAG3E,IAAIJ,EAAE,CAACO,SAAS,KAAKJ,SAAS,IAAI,OAAOH,EAAE,CAACO,SAAS,KAAK,QAAQ,EAAE;IAClE,MAAM,IAAIb,QAAA,CAAAU,eAAe,CAAC,iDAAiD,CAAC;;EAG9E,IAAIJ,EAAE,CAACQ,SAAS,KAAKL,SAAS,IAAI,OAAOH,EAAE,CAACQ,SAAS,KAAK,QAAQ,EAAE;IAClE,MAAM,IAAId,QAAA,CAAAU,eAAe,CAAC,iDAAiD,CAAC;;AAEhF;AA1BAN,OAAA,CAAAC,2BAAA,GAAAA,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}