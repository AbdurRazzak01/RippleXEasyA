{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMBid = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nconst MAX_AUTH_ACCOUNTS = 4;\nfunction validateAMMBid(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Asset == null) {\n    throw new errors_1.ValidationError('AMMBid: missing field Asset');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset)) {\n    throw new errors_1.ValidationError('AMMBid: Asset must be a Currency');\n  }\n  if (tx.Asset2 == null) {\n    throw new errors_1.ValidationError('AMMBid: missing field Asset2');\n  }\n  if (!(0, common_1.isCurrency)(tx.Asset2)) {\n    throw new errors_1.ValidationError('AMMBid: Asset2 must be a Currency');\n  }\n  if (tx.BidMin != null && !(0, common_1.isAmount)(tx.BidMin)) {\n    throw new errors_1.ValidationError('AMMBid: BidMin must be an Amount');\n  }\n  if (tx.BidMax != null && !(0, common_1.isAmount)(tx.BidMax)) {\n    throw new errors_1.ValidationError('AMMBid: BidMax must be an Amount');\n  }\n  if (tx.AuthAccounts != null) {\n    if (!Array.isArray(tx.AuthAccounts)) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts must be an AuthAccount array`);\n    }\n    if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`);\n    }\n    validateAuthAccounts(tx.Account, tx.AuthAccounts);\n  }\n}\nexports.validateAMMBid = validateAMMBid;\nfunction validateAuthAccounts(senderAddress, authAccounts) {\n  for (const authAccount of authAccounts) {\n    if (authAccount.AuthAccount == null || typeof authAccount.AuthAccount !== 'object') {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (authAccount.AuthAccount.Account == null) {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (typeof authAccount.AuthAccount.Account !== 'string') {\n      throw new errors_1.ValidationError(`AMMBid: invalid AuthAccounts`);\n    }\n    if (authAccount.AuthAccount.Account === senderAddress) {\n      throw new errors_1.ValidationError(`AMMBid: AuthAccounts must not include sender's address`);\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["errors_1","require","common_1","MAX_AUTH_ACCOUNTS","validateAMMBid","tx","validateBaseTransaction","Asset","ValidationError","isCurrency","Asset2","BidMin","isAmount","BidMax","AuthAccounts","Array","isArray","length","validateAuthAccounts","Account","exports","senderAddress","authAccounts","authAccount","AuthAccount"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/AMMBid.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { AuthAccount, Currency, IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  isCurrency,\n  validateBaseTransaction,\n} from './common'\n\nconst MAX_AUTH_ACCOUNTS = 4\n\n/**\n * Bid on an Automated Market Maker's (AMM's) auction slot.\n *\n * If you win, you can trade against the AMM at a discounted fee until you are outbid or 24 hours have passed.\n * If you are outbid before 24 hours have passed, you are refunded part of the cost of your bid based on how much time remains.\n * You bid using the AMM's LP Tokens; the amount of a winning bid is returned to the AMM,\n * decreasing the outstanding balance of LP Tokens.\n */\nexport interface AMMBid extends BaseTransaction {\n  TransactionType: 'AMMBid'\n\n  /**\n   * The definition for one of the assets in the AMM's pool.\n   */\n  Asset: Currency\n\n  /**\n   * The definition for the other asset in the AMM's pool.\n   */\n  Asset2: Currency\n\n  /**\n   * Pay at least this LPToken amount for the slot.\n   * Setting this value higher makes it harder for others to outbid you.\n   * If omitted, pay the minimum necessary to win the bid.\n   */\n  BidMin?: IssuedCurrencyAmount\n\n  /**\n   * Pay at most this LPToken amount for the slot.\n   * If the cost to win the bid is higher than this amount, the transaction fails.\n   * If omitted, pay as much as necessary to win the bid.\n   */\n  BidMax?: IssuedCurrencyAmount\n\n  /**\n   * A list of up to 4 additional accounts that you allow to trade at the discounted fee.\n   * This cannot include the address of the transaction sender.\n   */\n  AuthAccounts?: AuthAccount[]\n}\n\n/**\n * Verify the form and type of an AMMBid at runtime.\n *\n * @param tx - An AMMBid Transaction.\n * @throws When the AMMBid is Malformed.\n */\nexport function validateAMMBid(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Asset == null) {\n    throw new ValidationError('AMMBid: missing field Asset')\n  }\n\n  if (!isCurrency(tx.Asset)) {\n    throw new ValidationError('AMMBid: Asset must be a Currency')\n  }\n\n  if (tx.Asset2 == null) {\n    throw new ValidationError('AMMBid: missing field Asset2')\n  }\n\n  if (!isCurrency(tx.Asset2)) {\n    throw new ValidationError('AMMBid: Asset2 must be a Currency')\n  }\n\n  if (tx.BidMin != null && !isAmount(tx.BidMin)) {\n    throw new ValidationError('AMMBid: BidMin must be an Amount')\n  }\n\n  if (tx.BidMax != null && !isAmount(tx.BidMax)) {\n    throw new ValidationError('AMMBid: BidMax must be an Amount')\n  }\n\n  if (tx.AuthAccounts != null) {\n    if (!Array.isArray(tx.AuthAccounts)) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts must be an AuthAccount array`,\n      )\n    }\n    if (tx.AuthAccounts.length > MAX_AUTH_ACCOUNTS) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts length must not be greater than ${MAX_AUTH_ACCOUNTS}`,\n      )\n    }\n    validateAuthAccounts(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n      tx.Account as string,\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Only used by JS\n      tx.AuthAccounts as Array<Record<string, unknown>>,\n    )\n  }\n}\n\nfunction validateAuthAccounts(\n  senderAddress: string,\n  authAccounts: Array<Record<string, unknown>>,\n): boolean {\n  for (const authAccount of authAccounts) {\n    if (\n      authAccount.AuthAccount == null ||\n      typeof authAccount.AuthAccount !== 'object'\n    ) {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (authAccount.AuthAccount.Account == null) {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (typeof authAccount.AuthAccount.Account !== 'string') {\n      throw new ValidationError(`AMMBid: invalid AuthAccounts`)\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- used for null check\n    // @ts-expect-error -- used for null check\n    if (authAccount.AuthAccount.Account === senderAddress) {\n      throw new ValidationError(\n        `AMMBid: AuthAccounts must not include sender's address`,\n      )\n    }\n  }\n\n  return true\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAOA,MAAME,iBAAiB,GAAG,CAAC;AAkD3B,SAAgBC,cAAcA,CAACC,EAA2B;EACxD,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,KAAK,IAAI,IAAI,EAAE;IACpB,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,6BAA6B,CAAC;;EAG1D,IAAI,CAAC,IAAAN,QAAA,CAAAO,UAAU,EAACJ,EAAE,CAACE,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIP,QAAA,CAAAQ,eAAe,CAAC,kCAAkC,CAAC;;EAG/D,IAAIH,EAAE,CAACK,MAAM,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIV,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;EAG3D,IAAI,CAAC,IAAAN,QAAA,CAAAO,UAAU,EAACJ,EAAE,CAACK,MAAM,CAAC,EAAE;IAC1B,MAAM,IAAIV,QAAA,CAAAQ,eAAe,CAAC,mCAAmC,CAAC;;EAGhE,IAAIH,EAAE,CAACM,MAAM,IAAI,IAAI,IAAI,CAAC,IAAAT,QAAA,CAAAU,QAAQ,EAACP,EAAE,CAACM,MAAM,CAAC,EAAE;IAC7C,MAAM,IAAIX,QAAA,CAAAQ,eAAe,CAAC,kCAAkC,CAAC;;EAG/D,IAAIH,EAAE,CAACQ,MAAM,IAAI,IAAI,IAAI,CAAC,IAAAX,QAAA,CAAAU,QAAQ,EAACP,EAAE,CAACQ,MAAM,CAAC,EAAE;IAC7C,MAAM,IAAIb,QAAA,CAAAQ,eAAe,CAAC,kCAAkC,CAAC;;EAG/D,IAAIH,EAAE,CAACS,YAAY,IAAI,IAAI,EAAE;IAC3B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACX,EAAE,CAACS,YAAY,CAAC,EAAE;MACnC,MAAM,IAAId,QAAA,CAAAQ,eAAe,CACvB,mDAAmD,CACpD;;IAEH,IAAIH,EAAE,CAACS,YAAY,CAACG,MAAM,GAAGd,iBAAiB,EAAE;MAC9C,MAAM,IAAIH,QAAA,CAAAQ,eAAe,CACvB,wDAAwDL,iBAAiB,EAAE,CAC5E;;IAEHe,oBAAoB,CAElBb,EAAE,CAACc,OAAiB,EAEpBd,EAAE,CAACS,YAA8C,CAClD;;AAEL;AA7CAM,OAAA,CAAAhB,cAAA,GAAAA,cAAA;AA+CA,SAASc,oBAAoBA,CAC3BG,aAAqB,EACrBC,YAA4C;EAE5C,KAAK,MAAMC,WAAW,IAAID,YAAY,EAAE;IACtC,IACEC,WAAW,CAACC,WAAW,IAAI,IAAI,IAC/B,OAAOD,WAAW,CAACC,WAAW,KAAK,QAAQ,EAC3C;MACA,MAAM,IAAIxB,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;IAI3D,IAAIe,WAAW,CAACC,WAAW,CAACL,OAAO,IAAI,IAAI,EAAE;MAC3C,MAAM,IAAInB,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;IAI3D,IAAI,OAAOe,WAAW,CAACC,WAAW,CAACL,OAAO,KAAK,QAAQ,EAAE;MACvD,MAAM,IAAInB,QAAA,CAAAQ,eAAe,CAAC,8BAA8B,CAAC;;IAI3D,IAAIe,WAAW,CAACC,WAAW,CAACL,OAAO,KAAKE,aAAa,EAAE;MACrD,MAAM,IAAIrB,QAAA,CAAAQ,eAAe,CACvB,wDAAwD,CACzD;;;EAIL,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}