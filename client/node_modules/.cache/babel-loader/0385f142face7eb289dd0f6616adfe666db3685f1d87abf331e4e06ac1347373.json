{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_TYPES = exports.TransactionType = exports.TransactionResult = exports.LedgerEntryType = exports.Type = exports.Field = exports.DEFAULT_DEFINITIONS = exports.XrplDefinitionsBase = exports.Bytes = void 0;\nconst definitions_json_1 = __importDefault(require(\"./definitions.json\"));\nconst xrpl_definitions_base_1 = require(\"./xrpl-definitions-base\");\nObject.defineProperty(exports, \"XrplDefinitionsBase\", {\n  enumerable: true,\n  get: function () {\n    return xrpl_definitions_base_1.XrplDefinitionsBase;\n  }\n});\nObject.defineProperty(exports, \"Bytes\", {\n  enumerable: true,\n  get: function () {\n    return xrpl_definitions_base_1.Bytes;\n  }\n});\n/**\n * By default, coreTypes from the `types` folder is where known type definitions are initialized to avoid import cycles.\n */\nconst DEFAULT_DEFINITIONS = new xrpl_definitions_base_1.XrplDefinitionsBase(definitions_json_1.default, {});\nexports.DEFAULT_DEFINITIONS = DEFAULT_DEFINITIONS;\nconst Type = DEFAULT_DEFINITIONS.type;\nexports.Type = Type;\nconst LedgerEntryType = DEFAULT_DEFINITIONS.ledgerEntryType;\nexports.LedgerEntryType = LedgerEntryType;\nconst TransactionType = DEFAULT_DEFINITIONS.transactionType;\nexports.TransactionType = TransactionType;\nconst TransactionResult = DEFAULT_DEFINITIONS.transactionResult;\nexports.TransactionResult = TransactionResult;\nconst Field = DEFAULT_DEFINITIONS.field;\nexports.Field = Field;\n/*\n * @brief: All valid transaction types\n */\nconst TRANSACTION_TYPES = DEFAULT_DEFINITIONS.transactionNames;\nexports.TRANSACTION_TYPES = TRANSACTION_TYPES;","map":{"version":3,"names":["definitions_json_1","__importDefault","require","xrpl_definitions_base_1","Object","defineProperty","exports","enumerable","get","XrplDefinitionsBase","Bytes","DEFAULT_DEFINITIONS","default","Type","type","LedgerEntryType","ledgerEntryType","TransactionType","transactionType","TransactionResult","transactionResult","Field","field","TRANSACTION_TYPES","transactionNames"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/enums/index.ts"],"sourcesContent":["import enums from './definitions.json'\nimport {\n  XrplDefinitionsBase,\n  FieldInstance,\n  Bytes,\n} from './xrpl-definitions-base'\n/**\n * By default, coreTypes from the `types` folder is where known type definitions are initialized to avoid import cycles.\n */\nconst DEFAULT_DEFINITIONS = new XrplDefinitionsBase(enums, {})\n\nconst Type = DEFAULT_DEFINITIONS.type\nconst LedgerEntryType = DEFAULT_DEFINITIONS.ledgerEntryType\nconst TransactionType = DEFAULT_DEFINITIONS.transactionType\nconst TransactionResult = DEFAULT_DEFINITIONS.transactionResult\nconst Field = DEFAULT_DEFINITIONS.field\n\n/*\n * @brief: All valid transaction types\n */\nconst TRANSACTION_TYPES = DEFAULT_DEFINITIONS.transactionNames\n\nexport {\n  Bytes,\n  XrplDefinitionsBase,\n  DEFAULT_DEFINITIONS,\n  Field,\n  FieldInstance,\n  Type,\n  LedgerEntryType,\n  TransactionResult,\n  TransactionType,\n  TRANSACTION_TYPES,\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,kBAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,uBAAA,GAAAD,OAAA;AAuBEE,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAtBAL,uBAAA,CAAAM,mBAAmB;EAAA;AAAA;AAqBnBL,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAnBAL,uBAAA,CAAAO,KAAK;EAAA;AAAA;AAEP;;;AAGA,MAAMC,mBAAmB,GAAG,IAAIR,uBAAA,CAAAM,mBAAmB,CAACT,kBAAA,CAAAY,OAAK,EAAE,EAAE,CAAC;AAgB5DN,OAAA,CAAAK,mBAAA,GAAAA,mBAAA;AAdF,MAAME,IAAI,GAAGF,mBAAmB,CAACG,IAAI;AAiBnCR,OAAA,CAAAO,IAAA,GAAAA,IAAA;AAhBF,MAAME,eAAe,GAAGJ,mBAAmB,CAACK,eAAe;AAiBzDV,OAAA,CAAAS,eAAA,GAAAA,eAAA;AAhBF,MAAME,eAAe,GAAGN,mBAAmB,CAACO,eAAe;AAkBzDZ,OAAA,CAAAW,eAAA,GAAAA,eAAA;AAjBF,MAAME,iBAAiB,GAAGR,mBAAmB,CAACS,iBAAiB;AAgB7Dd,OAAA,CAAAa,iBAAA,GAAAA,iBAAA;AAfF,MAAME,KAAK,GAAGV,mBAAmB,CAACW,KAAK;AAWrChB,OAAA,CAAAe,KAAA,GAAAA,KAAA;AATF;;;AAGA,MAAME,iBAAiB,GAAGZ,mBAAmB,CAACa,gBAAgB;AAY5DlB,OAAA,CAAAiB,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}