{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTrustSet = exports.TrustSetFlags = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nvar TrustSetFlags;\n(function (TrustSetFlags) {\n  TrustSetFlags[TrustSetFlags[\"tfSetfAuth\"] = 65536] = \"tfSetfAuth\";\n  TrustSetFlags[TrustSetFlags[\"tfSetNoRipple\"] = 131072] = \"tfSetNoRipple\";\n  TrustSetFlags[TrustSetFlags[\"tfClearNoRipple\"] = 262144] = \"tfClearNoRipple\";\n  TrustSetFlags[TrustSetFlags[\"tfSetFreeze\"] = 1048576] = \"tfSetFreeze\";\n  TrustSetFlags[TrustSetFlags[\"tfClearFreeze\"] = 2097152] = \"tfClearFreeze\";\n})(TrustSetFlags || (exports.TrustSetFlags = TrustSetFlags = {}));\nfunction validateTrustSet(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  const {\n    LimitAmount,\n    QualityIn,\n    QualityOut\n  } = tx;\n  if (LimitAmount === undefined) {\n    throw new errors_1.ValidationError('TrustSet: missing field LimitAmount');\n  }\n  if (!(0, common_1.isAmount)(LimitAmount)) {\n    throw new errors_1.ValidationError('TrustSet: invalid LimitAmount');\n  }\n  if (QualityIn !== undefined && typeof QualityIn !== 'number') {\n    throw new errors_1.ValidationError('TrustSet: QualityIn must be a number');\n  }\n  if (QualityOut !== undefined && typeof QualityOut !== 'number') {\n    throw new errors_1.ValidationError('TrustSet: QualityOut must be a number');\n  }\n}\nexports.validateTrustSet = validateTrustSet;","map":{"version":3,"names":["errors_1","require","common_1","TrustSetFlags","exports","validateTrustSet","tx","validateBaseTransaction","LimitAmount","QualityIn","QualityOut","undefined","ValidationError","isAmount"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/trustSet.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { IssuedCurrencyAmount } from '../common'\n\nimport {\n  BaseTransaction,\n  GlobalFlags,\n  isAmount,\n  validateBaseTransaction,\n} from './common'\n\n/**\n * Enum representing values of {@link TrustSet} transaction flags.\n *\n * @category Transaction Flags\n */\nexport enum TrustSetFlags {\n  /**\n   * Authorize the other party to hold currency issued by this account. (No\n   * effect unless using the asfRequireAuth AccountSet flag.) Cannot be unset.\n   */\n  tfSetfAuth = 0x00010000,\n  /**\n   * Enable the No Ripple flag, which blocks rippling between two trust lines.\n   * of the same currency if this flag is enabled on both.\n   */\n  tfSetNoRipple = 0x00020000,\n  /** Disable the No Ripple flag, allowing rippling on this trust line. */\n  tfClearNoRipple = 0x00040000,\n  /** Freeze the trust line. */\n  tfSetFreeze = 0x00100000,\n  /** Unfreeze the trust line. */\n  tfClearFreeze = 0x00200000,\n}\n\n/**\n * Map of flags to boolean values representing {@link TrustSet} transaction\n * flags.\n *\n * @category Transaction Flags\n *\n * @example\n * ```typescript\n *\n * const trustSetTx: TrustSet = {\n *  TransactionType: 'TrustSet',\n *  Account: wallet2.getClassicAddress(),\n *  LimitAmount: {\n *    currency: 'FOO',\n *    issuer: wallet1.getClassicAddress(),\n *    value: '10000000000',\n *  },\n *  Flags: {\n *    tfSetNoRipple: true\n *  }\n * }\n *\n * // Autofill the tx to see how flags actually look compared to the interface usage.\n * const autofilledTx = await client.autofill(trustSetTx)\n * console.log(autofilledTx)\n * // {\n * //  TransactionType: 'TrustSet',\n * //  Account: 'r9dAdQQCBcGajVSeC9CqW3LCugjPDnAkEb',\n * //  LimitAmount: {\n * //   currency: 'FOO',\n * //   issuer: 'rWZzUjo5xGiAoRBqzsndyzonXz47UV8u1',\n * //   value: '10000000000'\n * //  },\n * //  Flags: 131072,\n * //  Sequence: 21971483,\n * //  Fee: '12',\n * //  LastLedgerSequence: 21971503\n * // }\n * ```\n */\nexport interface TrustSetFlagsInterface extends GlobalFlags {\n  /**\n   * Authorize the other party to hold currency issued by this account. (No\n   * effect unless using the asfRequireAuth AccountSet flag.) Cannot be unset.\n   */\n  tfSetfAuth?: boolean\n  /**\n   * Enable the No Ripple flag, which blocks rippling between two trust lines\n   * of the same currency if this flag is enabled on both.\n   */\n  tfSetNoRipple?: boolean\n  /** Disable the No Ripple flag, allowing rippling on this trust line. */\n  tfClearNoRipple?: boolean\n  /** Freeze the trust line. */\n  tfSetFreeze?: boolean\n  /** Unfreeze the trust line. */\n  tfClearFreeze?: boolean\n}\n\n/**\n * Create or modify a trust line linking two accounts.\n *\n * @category Transaction Models\n */\nexport interface TrustSet extends BaseTransaction {\n  TransactionType: 'TrustSet'\n  /**\n   * Object defining the trust line to create or modify, in the format of a\n   * Currency Amount.\n   */\n  LimitAmount: IssuedCurrencyAmount\n  /**\n   * Value incoming balances on this trust line at the ratio of this number per\n   * 1,000,000,000 units. A value of 0 is shorthand for treating balances at\n   * face value.\n   */\n  QualityIn?: number\n  /**\n   * Value outgoing balances on this trust line at the ratio of this number per\n   * 1,000,000,000 units. A value of 0 is shorthand for treating balances at\n   * face value.\n   */\n  QualityOut?: number\n  Flags?: number | TrustSetFlagsInterface\n}\n\n/**\n * Verify the form and type of a TrustSet at runtime.\n *\n * @param tx - A TrustSet Transaction.\n * @throws When the TrustSet is malformed.\n */\nexport function validateTrustSet(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n  const { LimitAmount, QualityIn, QualityOut } = tx\n\n  if (LimitAmount === undefined) {\n    throw new ValidationError('TrustSet: missing field LimitAmount')\n  }\n\n  if (!isAmount(LimitAmount)) {\n    throw new ValidationError('TrustSet: invalid LimitAmount')\n  }\n\n  if (QualityIn !== undefined && typeof QualityIn !== 'number') {\n    throw new ValidationError('TrustSet: QualityIn must be a number')\n  }\n\n  if (QualityOut !== undefined && typeof QualityOut !== 'number') {\n    throw new ValidationError('TrustSet: QualityOut must be a number')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAYA,IAAYE,aAiBX;AAjBD,WAAYA,aAAa;EAKvBA,aAAA,CAAAA,aAAA,sCAAuB;EAKvBA,aAAA,CAAAA,aAAA,6CAA0B;EAE1BA,aAAA,CAAAA,aAAA,iDAA4B;EAE5BA,aAAA,CAAAA,aAAA,0CAAwB;EAExBA,aAAA,CAAAA,aAAA,8CAA0B;AAC5B,CAAC,EAjBWA,aAAa,KAAAC,OAAA,CAAAD,aAAA,GAAbA,aAAa;AA+GzB,SAAgBE,gBAAgBA,CAACC,EAA2B;EAC1D,IAAAJ,QAAA,CAAAK,uBAAuB,EAACD,EAAE,CAAC;EAC3B,MAAM;IAAEE,WAAW;IAAEC,SAAS;IAAEC;EAAU,CAAE,GAAGJ,EAAE;EAEjD,IAAIE,WAAW,KAAKG,SAAS,EAAE;IAC7B,MAAM,IAAIX,QAAA,CAAAY,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IAAI,CAAC,IAAAV,QAAA,CAAAW,QAAQ,EAACL,WAAW,CAAC,EAAE;IAC1B,MAAM,IAAIR,QAAA,CAAAY,eAAe,CAAC,+BAA+B,CAAC;;EAG5D,IAAIH,SAAS,KAAKE,SAAS,IAAI,OAAOF,SAAS,KAAK,QAAQ,EAAE;IAC5D,MAAM,IAAIT,QAAA,CAAAY,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAIF,UAAU,KAAKC,SAAS,IAAI,OAAOD,UAAU,KAAK,QAAQ,EAAE;IAC9D,MAAM,IAAIV,QAAA,CAAAY,eAAe,CAAC,uCAAuC,CAAC;;AAEtE;AAnBAR,OAAA,CAAAC,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}