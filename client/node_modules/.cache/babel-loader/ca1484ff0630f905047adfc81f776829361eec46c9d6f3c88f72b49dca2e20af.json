{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BytesLookup = exports.Bytes = exports.FieldLookup = exports.XrplDefinitionsBase = void 0;\nconst bytes_1 = require(\"./bytes\");\nObject.defineProperty(exports, \"Bytes\", {\n  enumerable: true,\n  get: function () {\n    return bytes_1.Bytes;\n  }\n});\nObject.defineProperty(exports, \"BytesLookup\", {\n  enumerable: true,\n  get: function () {\n    return bytes_1.BytesLookup;\n  }\n});\nconst field_1 = require(\"./field\");\nObject.defineProperty(exports, \"FieldLookup\", {\n  enumerable: true,\n  get: function () {\n    return field_1.FieldLookup;\n  }\n});\nconst constants_1 = require(\"./constants\");\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * XrplDefinitions should be instantiated instead of this class.\n */\nclass XrplDefinitionsBase {\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param types - A list of type objects with the same name as the fields defined.\n   *              You can use the coreTypes object if you are not adding new types.\n   */\n  constructor(enums, types) {\n    this.type = new bytes_1.BytesLookup(enums.TYPES, constants_1.TYPE_WIDTH);\n    this.ledgerEntryType = new bytes_1.BytesLookup(enums.LEDGER_ENTRY_TYPES, constants_1.LEDGER_ENTRY_WIDTH);\n    this.transactionType = new bytes_1.BytesLookup(enums.TRANSACTION_TYPES, constants_1.TRANSACTION_TYPE_WIDTH);\n    this.transactionResult = new bytes_1.BytesLookup(enums.TRANSACTION_RESULTS, constants_1.TRANSACTION_RESULT_WIDTH);\n    this.field = new field_1.FieldLookup(enums.FIELDS, enums.TYPES);\n    this.transactionNames = Object.entries(enums.TRANSACTION_TYPES).filter(([_key, value]) => value >= 0).map(([key, _value]) => key);\n    this.dataTypes = {}; // Filled in via associateTypes\n    this.associateTypes(types);\n  }\n  /**\n   * Associates each Field to a corresponding class that TypeScript can recognize.\n   *\n   * @param types a list of type objects with the same name as the fields defined.\n   *              Defaults to xrpl.js's core type definitions.\n   */\n  associateTypes(types) {\n    // Overwrite any existing type definitions with the given types\n    this.dataTypes = Object.assign({}, this.dataTypes, types);\n    Object.values(this.field).forEach(field => {\n      field.associatedType = this.dataTypes[field.type.name];\n    });\n    this.field['TransactionType'].associatedType = this.transactionType;\n    this.field['TransactionResult'].associatedType = this.transactionResult;\n    this.field['LedgerEntryType'].associatedType = this.ledgerEntryType;\n  }\n  getAssociatedTypes() {\n    return this.dataTypes;\n  }\n}\nexports.XrplDefinitionsBase = XrplDefinitionsBase;","map":{"version":3,"names":["bytes_1","require","Object","defineProperty","exports","enumerable","get","Bytes","BytesLookup","field_1","FieldLookup","constants_1","XrplDefinitionsBase","constructor","enums","types","type","TYPES","TYPE_WIDTH","ledgerEntryType","LEDGER_ENTRY_TYPES","LEDGER_ENTRY_WIDTH","transactionType","TRANSACTION_TYPES","TRANSACTION_TYPE_WIDTH","transactionResult","TRANSACTION_RESULTS","TRANSACTION_RESULT_WIDTH","field","FIELDS","transactionNames","entries","filter","_key","value","map","key","_value","dataTypes","associateTypes","assign","values","forEach","associatedType","name","getAssociatedTypes"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/enums/xrpl-definitions-base.ts"],"sourcesContent":["import { SerializedType } from '../types/serialized-type'\nimport { Bytes, BytesLookup } from './bytes'\nimport { FieldInfo, FieldLookup, FieldInstance } from './field'\nimport {\n  TYPE_WIDTH,\n  LEDGER_ENTRY_WIDTH,\n  TRANSACTION_TYPE_WIDTH,\n  TRANSACTION_RESULT_WIDTH,\n} from './constants'\n\ninterface DefinitionsData {\n  TYPES: Record<string, number>\n  LEDGER_ENTRY_TYPES: Record<string, number>\n  FIELDS: (string | FieldInfo)[][]\n  TRANSACTION_RESULTS: Record<string, number>\n  TRANSACTION_TYPES: Record<string, number>\n}\n\n/**\n * Stores the various types and fields for rippled to be used to encode/decode information later on.\n * XrplDefinitions should be instantiated instead of this class.\n */\nclass XrplDefinitionsBase {\n  // A collection of fields that can be included in transactions\n  field: FieldLookup\n  // A collection of ids corresponding to types of ledger objects\n  ledgerEntryType: BytesLookup\n  // A collection of type flags used to determine how to serialize a field's data\n  type: BytesLookup\n  // Errors and result codes for transactions\n  transactionResult: BytesLookup\n  // Defined transactions that can be submitted to the ledger\n  transactionType: BytesLookup\n  // Valid transaction names\n  transactionNames: string[]\n  // Maps serializable types to their TypeScript class implementation\n  dataTypes: Record<string, typeof SerializedType>\n\n  /**\n   * Present rippled types in a typed and updatable format.\n   * For an example of the input format see `definitions.json`\n   * To generate a new definitions file from rippled source code, use this tool: https://github.com/RichardAH/xrpl-codec-gen\n   *\n   * See the definitions.test.js file for examples of how to create your own updated definitions.json.\n   *\n   * @param enums - A json encoding of the core types, transaction types, transaction results, transaction names, and fields.\n   * @param types - A list of type objects with the same name as the fields defined.\n   *              You can use the coreTypes object if you are not adding new types.\n   */\n  constructor(\n    enums: DefinitionsData,\n    types: Record<string, typeof SerializedType>,\n  ) {\n    this.type = new BytesLookup(enums.TYPES, TYPE_WIDTH)\n    this.ledgerEntryType = new BytesLookup(\n      enums.LEDGER_ENTRY_TYPES,\n      LEDGER_ENTRY_WIDTH,\n    )\n    this.transactionType = new BytesLookup(\n      enums.TRANSACTION_TYPES,\n      TRANSACTION_TYPE_WIDTH,\n    )\n    this.transactionResult = new BytesLookup(\n      enums.TRANSACTION_RESULTS,\n      TRANSACTION_RESULT_WIDTH,\n    )\n    this.field = new FieldLookup(\n      enums.FIELDS as Array<[string, FieldInfo]>,\n      enums.TYPES,\n    )\n    this.transactionNames = Object.entries(enums.TRANSACTION_TYPES)\n      .filter(([_key, value]) => value >= 0)\n      .map(([key, _value]) => key)\n\n    this.dataTypes = {} // Filled in via associateTypes\n    this.associateTypes(types)\n  }\n\n  /**\n   * Associates each Field to a corresponding class that TypeScript can recognize.\n   *\n   * @param types a list of type objects with the same name as the fields defined.\n   *              Defaults to xrpl.js's core type definitions.\n   */\n  public associateTypes(types: Record<string, typeof SerializedType>): void {\n    // Overwrite any existing type definitions with the given types\n    this.dataTypes = Object.assign({}, this.dataTypes, types)\n\n    Object.values(this.field).forEach((field) => {\n      field.associatedType = this.dataTypes[field.type.name]\n    })\n\n    this.field['TransactionType'].associatedType = this.transactionType\n    this.field['TransactionResult'].associatedType = this.transactionResult\n    this.field['LedgerEntryType'].associatedType = this.ledgerEntryType\n  }\n\n  public getAssociatedTypes(): Record<string, typeof SerializedType> {\n    return this.dataTypes\n  }\n}\n\nexport {\n  DefinitionsData,\n  XrplDefinitionsBase,\n  FieldLookup,\n  FieldInfo,\n  FieldInstance,\n  Bytes,\n  BytesLookup,\n}\n"],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AA2GEC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA3GON,OAAA,CAAAO,KAAK;EAAA;AAAA;AA4GZL,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA5GcN,OAAA,CAAAQ,WAAW;EAAA;AAAA;AAC3B,MAAAC,OAAA,GAAAR,OAAA;AAuGEC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAvGkBG,OAAA,CAAAC,WAAW;EAAA;AAAA;AAC/B,MAAAC,WAAA,GAAAV,OAAA;AAeA;;;;AAIA,MAAMW,mBAAmB;EAgBvB;;;;;;;;;;;EAWAC,YACEC,KAAsB,EACtBC,KAA4C;IAE5C,IAAI,CAACC,IAAI,GAAG,IAAIhB,OAAA,CAAAQ,WAAW,CAACM,KAAK,CAACG,KAAK,EAAEN,WAAA,CAAAO,UAAU,CAAC;IACpD,IAAI,CAACC,eAAe,GAAG,IAAInB,OAAA,CAAAQ,WAAW,CACpCM,KAAK,CAACM,kBAAkB,EACxBT,WAAA,CAAAU,kBAAkB,CACnB;IACD,IAAI,CAACC,eAAe,GAAG,IAAItB,OAAA,CAAAQ,WAAW,CACpCM,KAAK,CAACS,iBAAiB,EACvBZ,WAAA,CAAAa,sBAAsB,CACvB;IACD,IAAI,CAACC,iBAAiB,GAAG,IAAIzB,OAAA,CAAAQ,WAAW,CACtCM,KAAK,CAACY,mBAAmB,EACzBf,WAAA,CAAAgB,wBAAwB,CACzB;IACD,IAAI,CAACC,KAAK,GAAG,IAAInB,OAAA,CAAAC,WAAW,CAC1BI,KAAK,CAACe,MAAoC,EAC1Cf,KAAK,CAACG,KAAK,CACZ;IACD,IAAI,CAACa,gBAAgB,GAAG5B,MAAM,CAAC6B,OAAO,CAACjB,KAAK,CAACS,iBAAiB,CAAC,CAC5DS,MAAM,CAAC,CAAC,CAACC,IAAI,EAAEC,KAAK,CAAC,KAAKA,KAAK,IAAI,CAAC,CAAC,CACrCC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,MAAM,CAAC,KAAKD,GAAG,CAAC;IAE9B,IAAI,CAACE,SAAS,GAAG,EAAE,EAAC;IACpB,IAAI,CAACC,cAAc,CAACxB,KAAK,CAAC;EAC5B;EAEA;;;;;;EAMOwB,cAAcA,CAACxB,KAA4C;IAChE;IACA,IAAI,CAACuB,SAAS,GAAGpC,MAAM,CAACsC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACF,SAAS,EAAEvB,KAAK,CAAC;IAEzDb,MAAM,CAACuC,MAAM,CAAC,IAAI,CAACb,KAAK,CAAC,CAACc,OAAO,CAAEd,KAAK,IAAI;MAC1CA,KAAK,CAACe,cAAc,GAAG,IAAI,CAACL,SAAS,CAACV,KAAK,CAACZ,IAAI,CAAC4B,IAAI,CAAC;IACxD,CAAC,CAAC;IAEF,IAAI,CAAChB,KAAK,CAAC,iBAAiB,CAAC,CAACe,cAAc,GAAG,IAAI,CAACrB,eAAe;IACnE,IAAI,CAACM,KAAK,CAAC,mBAAmB,CAAC,CAACe,cAAc,GAAG,IAAI,CAAClB,iBAAiB;IACvE,IAAI,CAACG,KAAK,CAAC,iBAAiB,CAAC,CAACe,cAAc,GAAG,IAAI,CAACxB,eAAe;EACrE;EAEO0B,kBAAkBA,CAAA;IACvB,OAAO,IAAI,CAACP,SAAS;EACvB;;AAKAlC,OAAA,CAAAQ,mBAAA,GAAAA,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}