{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.percentToQuality = exports.transferRateToDecimal = exports.qualityToDecimal = exports.decimalToQuality = exports.percentToTransferRate = exports.decimalToTransferRate = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst BASE_TEN = 10;\nconst ONE_BILLION = '1000000000';\nconst TWO_BILLION = '2000000000';\nfunction percentToDecimal(percent) {\n  if (!percent.endsWith('%')) {\n    throw new errors_1.ValidationError(`Value ${percent} must end with %`);\n  }\n  const split = percent.split('%').filter(str => str !== '');\n  if (split.length !== 1) {\n    throw new errors_1.ValidationError(`Value ${percent} contains too many % signs`);\n  }\n  return new bignumber_js_1.default(split[0]).dividedBy('100').toString(BASE_TEN);\n}\nfunction decimalToTransferRate(decimal) {\n  const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION).plus(ONE_BILLION);\n  if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {\n    throw new errors_1.ValidationError(`Decimal value must be between 0 and 1.00.`);\n  }\n  const billionths = rate.toString(BASE_TEN);\n  if (billionths === ONE_BILLION) {\n    return 0;\n  }\n  if (billionths === 'NaN') {\n    throw new errors_1.ValidationError(`Value is not a number`);\n  }\n  if (billionths.includes('.')) {\n    throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n  }\n  return Number(billionths);\n}\nexports.decimalToTransferRate = decimalToTransferRate;\nfunction percentToTransferRate(percent) {\n  return decimalToTransferRate(percentToDecimal(percent));\n}\nexports.percentToTransferRate = percentToTransferRate;\nfunction decimalToQuality(decimal) {\n  const rate = new bignumber_js_1.default(decimal).times(ONE_BILLION);\n  const billionths = rate.toString(BASE_TEN);\n  if (billionths === 'NaN') {\n    throw new errors_1.ValidationError(`Value is not a number`);\n  }\n  if (billionths.includes('-')) {\n    throw new errors_1.ValidationError('Cannot have negative Quality');\n  }\n  if (billionths === ONE_BILLION) {\n    return 0;\n  }\n  if (billionths.includes('.')) {\n    throw new errors_1.ValidationError(`Decimal exceeds maximum precision.`);\n  }\n  return Number(billionths);\n}\nexports.decimalToQuality = decimalToQuality;\nfunction qualityToDecimal(quality) {\n  if (!Number.isInteger(quality)) {\n    throw new errors_1.ValidationError('Quality must be an integer');\n  }\n  if (quality < 0) {\n    throw new errors_1.ValidationError('Negative quality not allowed');\n  }\n  if (quality === 0) {\n    return '1';\n  }\n  const decimal = new bignumber_js_1.default(quality).dividedBy(ONE_BILLION);\n  return decimal.toString(BASE_TEN);\n}\nexports.qualityToDecimal = qualityToDecimal;\nfunction transferRateToDecimal(rate) {\n  if (!Number.isInteger(rate)) {\n    throw new errors_1.ValidationError('Error decoding, transfer Rate must be an integer');\n  }\n  if (rate === 0) {\n    return '0';\n  }\n  const decimal = new bignumber_js_1.default(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION);\n  if (decimal.isLessThan(0)) {\n    throw new errors_1.ValidationError('Error decoding, negative transfer rate');\n  }\n  return decimal.toString(BASE_TEN);\n}\nexports.transferRateToDecimal = transferRateToDecimal;\nfunction percentToQuality(percent) {\n  return decimalToQuality(percentToDecimal(percent));\n}\nexports.percentToQuality = percentToQuality;","map":{"version":3,"names":["bignumber_js_1","__importDefault","require","errors_1","BASE_TEN","ONE_BILLION","TWO_BILLION","percentToDecimal","percent","endsWith","ValidationError","split","filter","str","length","default","dividedBy","toString","decimalToTransferRate","decimal","rate","times","plus","isLessThan","isGreaterThan","billionths","includes","Number","exports","percentToTransferRate","decimalToQuality","qualityToDecimal","quality","isInteger","transferRateToDecimal","minus","percentToQuality"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/quality.ts"],"sourcesContent":["import BigNumber from 'bignumber.js'\n\nimport { ValidationError } from '../errors'\n\nconst BASE_TEN = 10\nconst ONE_BILLION = '1000000000'\nconst TWO_BILLION = '2000000000'\n\nfunction percentToDecimal(percent: string): string {\n  if (!percent.endsWith('%')) {\n    throw new ValidationError(`Value ${percent} must end with %`)\n  }\n\n  // Split the string on % and filter out any empty strings\n  const split = percent.split('%').filter((str) => str !== '')\n  if (split.length !== 1) {\n    throw new ValidationError(`Value ${percent} contains too many % signs`)\n  }\n\n  return new BigNumber(split[0]).dividedBy('100').toString(BASE_TEN)\n}\n\n/**\n * Converts a string decimal to \"billionths\" format for use with TransferRate.\n *\n * @param decimal - A string decimal between 0 and 1.00\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function decimalToTransferRate(decimal: string): number {\n  const rate = new BigNumber(decimal).times(ONE_BILLION).plus(ONE_BILLION)\n\n  if (rate.isLessThan(ONE_BILLION) || rate.isGreaterThan(TWO_BILLION)) {\n    throw new ValidationError(`Decimal value must be between 0 and 1.00.`)\n  }\n\n  const billionths = rate.toString(BASE_TEN)\n\n  if (billionths === ONE_BILLION) {\n    return 0\n  }\n\n  if (billionths === 'NaN') {\n    throw new ValidationError(`Value is not a number`)\n  }\n\n  if (billionths.includes('.')) {\n    throw new ValidationError(`Decimal exceeds maximum precision.`)\n  }\n\n  return Number(billionths)\n}\n\n/**\n * Converts a string percent to \"billionths\" format for use with TransferRate.\n *\n * @param percent - A string percent between 0% and 100%.\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the percent parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function percentToTransferRate(percent: string): number {\n  return decimalToTransferRate(percentToDecimal(percent))\n}\n\n/**\n * Converts a string decimal to the \"billionths\" format for use with QualityIn/\n * QualityOut\n *\n * @param decimal - A string decimal (i.e. \".00034\").\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function decimalToQuality(decimal: string): number {\n  const rate = new BigNumber(decimal).times(ONE_BILLION)\n\n  const billionths = rate.toString(BASE_TEN)\n\n  if (billionths === 'NaN') {\n    throw new ValidationError(`Value is not a number`)\n  }\n\n  if (billionths.includes('-')) {\n    throw new ValidationError('Cannot have negative Quality')\n  }\n\n  if (billionths === ONE_BILLION) {\n    return 0\n  }\n\n  if (billionths.includes('.')) {\n    throw new ValidationError(`Decimal exceeds maximum precision.`)\n  }\n\n  return Number(billionths)\n}\n\n/**\n * Converts a quality in \"billionths\" format to a decimal.\n *\n * @param quality - Quality to convert to decimal.\n * @returns decimal representation of quality.\n * @throws ValidationError when quality is not convertible to decimal format.\n * @category Utilities\n */\nexport function qualityToDecimal(quality: number): string {\n  if (!Number.isInteger(quality)) {\n    throw new ValidationError('Quality must be an integer')\n  }\n\n  if (quality < 0) {\n    throw new ValidationError('Negative quality not allowed')\n  }\n\n  if (quality === 0) {\n    return '1'\n  }\n\n  const decimal = new BigNumber(quality).dividedBy(ONE_BILLION)\n\n  return decimal.toString(BASE_TEN)\n}\n\n/**\n * Converts a transfer rate in \"billionths\" format to a decimal.\n *\n * @param rate - TransferRate to convert to decimal.\n * @returns decimal representation of transfer Rate.\n * @throws ValidationError when it cannot convert from billionths format.\n * @category Utilities\n */\nexport function transferRateToDecimal(rate: number): string {\n  if (!Number.isInteger(rate)) {\n    throw new ValidationError(\n      'Error decoding, transfer Rate must be an integer',\n    )\n  }\n\n  if (rate === 0) {\n    return '0'\n  }\n\n  const decimal = new BigNumber(rate).minus(ONE_BILLION).dividedBy(ONE_BILLION)\n\n  if (decimal.isLessThan(0)) {\n    throw new ValidationError('Error decoding, negative transfer rate')\n  }\n\n  return decimal.toString(BASE_TEN)\n}\n\n/**\n * Converts a string percent to the \"billionths\" format for use with QualityIn/\n * QualityOut\n *\n * @param percent - A string percent (i.e. \".034%\").\n * @returns A number in the \"billionths\" format.\n * @throws ValidationError when the percent parameter is not convertible to\n * \"billionths\" format.\n * @category Utilities\n */\nexport function percentToQuality(percent: string): number {\n  return decimalToQuality(percentToDecimal(percent))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}