{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultFaucetPath = exports.getFaucetHost = exports.FaucetNetworkPaths = exports.FaucetNetwork = void 0;\nconst errors_1 = require(\"../errors\");\nvar FaucetNetwork;\n(function (FaucetNetwork) {\n  FaucetNetwork[\"Testnet\"] = \"faucet.altnet.rippletest.net\";\n  FaucetNetwork[\"Devnet\"] = \"faucet.devnet.rippletest.net\";\n  FaucetNetwork[\"HooksV3Testnet\"] = \"hooks-testnet-v3.xrpl-labs.com\";\n})(FaucetNetwork || (exports.FaucetNetwork = FaucetNetwork = {}));\nexports.FaucetNetworkPaths = {\n  [FaucetNetwork.Testnet]: '/accounts',\n  [FaucetNetwork.Devnet]: '/accounts',\n  [FaucetNetwork.HooksV3Testnet]: '/accounts'\n};\nfunction getFaucetHost(client) {\n  const connectionUrl = client.url;\n  if (connectionUrl.includes('hooks-testnet-v3')) {\n    return FaucetNetwork.HooksV3Testnet;\n  }\n  if (connectionUrl.includes('altnet') || connectionUrl.includes('testnet')) {\n    return FaucetNetwork.Testnet;\n  }\n  if (connectionUrl.includes('sidechain-net2')) {\n    throw new errors_1.XRPLFaucetError('Cannot fund an account on an issuing chain. Accounts must be created via the bridge.');\n  }\n  if (connectionUrl.includes('devnet')) {\n    return FaucetNetwork.Devnet;\n  }\n  throw new errors_1.XRPLFaucetError('Faucet URL is not defined or inferrable.');\n}\nexports.getFaucetHost = getFaucetHost;\nfunction getDefaultFaucetPath(hostname) {\n  if (hostname === undefined) {\n    return '/accounts';\n  }\n  return exports.FaucetNetworkPaths[hostname] || '/accounts';\n}\nexports.getDefaultFaucetPath = getDefaultFaucetPath;","map":{"version":3,"names":["Object","defineProperty","exports","value","getDefaultFaucetPath","getFaucetHost","FaucetNetworkPaths","FaucetNetwork","errors_1","require","Testnet","Devnet","HooksV3Testnet","client","connectionUrl","url","includes","XRPLFaucetError","hostname","undefined"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/Wallet/defaultFaucets.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaultFaucetPath = exports.getFaucetHost = exports.FaucetNetworkPaths = exports.FaucetNetwork = void 0;\nconst errors_1 = require(\"../errors\");\nvar FaucetNetwork;\n(function (FaucetNetwork) {\n    FaucetNetwork[\"Testnet\"] = \"faucet.altnet.rippletest.net\";\n    FaucetNetwork[\"Devnet\"] = \"faucet.devnet.rippletest.net\";\n    FaucetNetwork[\"HooksV3Testnet\"] = \"hooks-testnet-v3.xrpl-labs.com\";\n})(FaucetNetwork || (exports.FaucetNetwork = FaucetNetwork = {}));\nexports.FaucetNetworkPaths = {\n    [FaucetNetwork.Testnet]: '/accounts',\n    [FaucetNetwork.Devnet]: '/accounts',\n    [FaucetNetwork.HooksV3Testnet]: '/accounts',\n};\nfunction getFaucetHost(client) {\n    const connectionUrl = client.url;\n    if (connectionUrl.includes('hooks-testnet-v3')) {\n        return FaucetNetwork.HooksV3Testnet;\n    }\n    if (connectionUrl.includes('altnet') || connectionUrl.includes('testnet')) {\n        return FaucetNetwork.Testnet;\n    }\n    if (connectionUrl.includes('sidechain-net2')) {\n        throw new errors_1.XRPLFaucetError('Cannot fund an account on an issuing chain. Accounts must be created via the bridge.');\n    }\n    if (connectionUrl.includes('devnet')) {\n        return FaucetNetwork.Devnet;\n    }\n    throw new errors_1.XRPLFaucetError('Faucet URL is not defined or inferrable.');\n}\nexports.getFaucetHost = getFaucetHost;\nfunction getDefaultFaucetPath(hostname) {\n    if (hostname === undefined) {\n        return '/accounts';\n    }\n    return exports.FaucetNetworkPaths[hostname] || '/accounts';\n}\nexports.getDefaultFaucetPath = getDefaultFaucetPath;\n//# sourceMappingURL=defaultFaucets.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,aAAa,GAAGH,OAAO,CAACI,kBAAkB,GAAGJ,OAAO,CAACK,aAAa,GAAG,KAAK,CAAC;AAClH,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,IAAIF,aAAa;AACjB,CAAC,UAAUA,aAAa,EAAE;EACtBA,aAAa,CAAC,SAAS,CAAC,GAAG,8BAA8B;EACzDA,aAAa,CAAC,QAAQ,CAAC,GAAG,8BAA8B;EACxDA,aAAa,CAAC,gBAAgB,CAAC,GAAG,gCAAgC;AACtE,CAAC,EAAEA,aAAa,KAAKL,OAAO,CAACK,aAAa,GAAGA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACjEL,OAAO,CAACI,kBAAkB,GAAG;EACzB,CAACC,aAAa,CAACG,OAAO,GAAG,WAAW;EACpC,CAACH,aAAa,CAACI,MAAM,GAAG,WAAW;EACnC,CAACJ,aAAa,CAACK,cAAc,GAAG;AACpC,CAAC;AACD,SAASP,aAAaA,CAACQ,MAAM,EAAE;EAC3B,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAG;EAChC,IAAID,aAAa,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC5C,OAAOT,aAAa,CAACK,cAAc;EACvC;EACA,IAAIE,aAAa,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIF,aAAa,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAE;IACvE,OAAOT,aAAa,CAACG,OAAO;EAChC;EACA,IAAII,aAAa,CAACE,QAAQ,CAAC,gBAAgB,CAAC,EAAE;IAC1C,MAAM,IAAIR,QAAQ,CAACS,eAAe,CAAC,sFAAsF,CAAC;EAC9H;EACA,IAAIH,aAAa,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAClC,OAAOT,aAAa,CAACI,MAAM;EAC/B;EACA,MAAM,IAAIH,QAAQ,CAACS,eAAe,CAAC,0CAA0C,CAAC;AAClF;AACAf,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC,SAASD,oBAAoBA,CAACc,QAAQ,EAAE;EACpC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IACxB,OAAO,WAAW;EACtB;EACA,OAAOjB,OAAO,CAACI,kBAAkB,CAACY,QAAQ,CAAC,IAAI,WAAW;AAC9D;AACAhB,OAAO,CAACE,oBAAoB,GAAGA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}