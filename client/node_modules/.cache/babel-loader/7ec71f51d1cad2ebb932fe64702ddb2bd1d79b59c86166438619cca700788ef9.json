{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateXChainAccountCreateCommit = void 0;\nconst common_1 = require(\"./common\");\nfunction validateXChainAccountCreateCommit(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'XChainBridge', common_1.isXChainBridge);\n  (0, common_1.validateRequiredField)(tx, 'SignatureReward', common_1.isAmount);\n  (0, common_1.validateRequiredField)(tx, 'Destination', common_1.isAccount);\n  (0, common_1.validateRequiredField)(tx, 'Amount', common_1.isAmount);\n}\nexports.validateXChainAccountCreateCommit = validateXChainAccountCreateCommit;","map":{"version":3,"names":["common_1","require","validateXChainAccountCreateCommit","tx","validateBaseTransaction","validateRequiredField","isXChainBridge","isAmount","isAccount","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/XChainAccountCreateCommit.ts"],"sourcesContent":["import { Amount, XChainBridge } from '../common'\n\nimport {\n  BaseTransaction,\n  isAmount,\n  isXChainBridge,\n  validateBaseTransaction,\n  validateRequiredField,\n  isAccount,\n  Account,\n} from './common'\n\n/**\n * The XChainAccountCreateCommit transaction creates a new account on one of the\n * chains a bridge connects, which serves as the bridge entrance for that chain.\n *\n * WARNING: This transaction should only be executed if the witness attestations\n * will be reliably delivered to the destination chain. If the signatures aren't\n * delivered, then account creation will be blocked until attestations are received.\n * This can be used maliciously; to disable this transaction on XRP-XRP bridges,\n * the bridge's MinAccountCreateAmount shouldn't be present.\n *\n * @category Transaction Models\n */\nexport interface XChainAccountCreateCommit extends BaseTransaction {\n  TransactionType: 'XChainAccountCreateCommit'\n\n  /**\n   * The bridge to create accounts for.\n   */\n  XChainBridge: XChainBridge\n\n  /**\n   * The amount, in XRP, to be used to reward the witness servers for providing\n   * signatures. This must match the amount on the {@link Bridge} ledger object.\n   */\n  SignatureReward: Amount\n\n  /**\n   * The destination account on the destination chain.\n   */\n  Destination: Account\n\n  /**\n   * The amount, in XRP, to use for account creation. This must be greater than or\n   * equal to the MinAccountCreateAmount specified in the {@link Bridge} ledger object.\n   */\n  Amount: Amount\n}\n\n/**\n * Verify the form and type of an XChainAccountCreateCommit at runtime.\n *\n * @param tx - An XChainAccountCreateCommit Transaction.\n * @throws When the XChainAccountCreateCommit is malformed.\n */\nexport function validateXChainAccountCreateCommit(\n  tx: Record<string, unknown>,\n): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'XChainBridge', isXChainBridge)\n\n  validateRequiredField(tx, 'SignatureReward', isAmount)\n\n  validateRequiredField(tx, 'Destination', isAccount)\n\n  validateRequiredField(tx, 'Amount', isAmount)\n}\n"],"mappings":";;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AAsDA,SAAgBC,iCAAiCA,CAC/CC,EAA2B;EAE3B,IAAAH,QAAA,CAAAI,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAH,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,cAAc,EAAEH,QAAA,CAAAM,cAAc,CAAC;EAEzD,IAAAN,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,iBAAiB,EAAEH,QAAA,CAAAO,QAAQ,CAAC;EAEtD,IAAAP,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,aAAa,EAAEH,QAAA,CAAAQ,SAAS,CAAC;EAEnD,IAAAR,QAAA,CAAAK,qBAAqB,EAACF,EAAE,EAAE,QAAQ,EAAEH,QAAA,CAAAO,QAAQ,CAAC;AAC/C;AAZAE,OAAA,CAAAP,iCAAA,GAAAA,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}