{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAMMCreate = exports.AMM_MAX_TRADING_FEE = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nexports.AMM_MAX_TRADING_FEE = 1000;\nfunction validateAMMCreate(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  if (tx.Amount == null) {\n    throw new errors_1.ValidationError('AMMCreate: missing field Amount');\n  }\n  if (!(0, common_1.isAmount)(tx.Amount)) {\n    throw new errors_1.ValidationError('AMMCreate: Amount must be an Amount');\n  }\n  if (tx.Amount2 == null) {\n    throw new errors_1.ValidationError('AMMCreate: missing field Amount2');\n  }\n  if (!(0, common_1.isAmount)(tx.Amount2)) {\n    throw new errors_1.ValidationError('AMMCreate: Amount2 must be an Amount');\n  }\n  if (tx.TradingFee == null) {\n    throw new errors_1.ValidationError('AMMCreate: missing field TradingFee');\n  }\n  if (typeof tx.TradingFee !== 'number') {\n    throw new errors_1.ValidationError('AMMCreate: TradingFee must be a number');\n  }\n  if (tx.TradingFee < 0 || tx.TradingFee > exports.AMM_MAX_TRADING_FEE) {\n    throw new errors_1.ValidationError(`AMMCreate: TradingFee must be between 0 and ${exports.AMM_MAX_TRADING_FEE}`);\n  }\n}\nexports.validateAMMCreate = validateAMMCreate;","map":{"version":3,"names":["errors_1","require","common_1","exports","AMM_MAX_TRADING_FEE","validateAMMCreate","tx","validateBaseTransaction","Amount","ValidationError","isAmount","Amount2","TradingFee"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/AMMCreate.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\nimport { Amount } from '../common'\n\nimport { BaseTransaction, isAmount, validateBaseTransaction } from './common'\n\nexport const AMM_MAX_TRADING_FEE = 1000\n\n/**\n * Create a new Automated Market Maker (AMM) instance for trading a pair of assets (fungible tokens or XRP).\n *\n * Creates both an AMM object and a special AccountRoot object to represent the AMM.\n * Also transfers ownership of the starting balance of both assets from the sender to the created AccountRoot\n * and issues an initial balance of liquidity provider tokens (LP Tokens) from the AMM account to the sender.\n *\n * CAUTION: When you create the AMM, you should fund it with (approximately) equal-value amounts of each asset.\n * Otherwise, other users can profit at your expense by trading with this AMM (performing arbitrage).\n * The currency risk that liquidity providers take on increases with the volatility (potential for imbalance) of the asset pair.\n * The higher the trading fee, the more it offsets this risk,\n * so it's best to set the trading fee based on the volatility of the asset pair.\n */\nexport interface AMMCreate extends BaseTransaction {\n  TransactionType: 'AMMCreate'\n\n  /**\n   * The first of the two assets to fund this AMM with. This must be a positive amount.\n   */\n  Amount: Amount\n\n  /**\n   * The second of the two assets to fund this AMM with. This must be a positive amount.\n   */\n  Amount2: Amount\n\n  /**\n   * The fee to charge for trades against this AMM instance, in units of 1/100,000; a value of 1 is equivalent to 0.001%.\n   * The maximum value is 1000, indicating a 1% fee.\n   * The minimum value is 0.\n   */\n  TradingFee: number\n}\n\n/**\n * Verify the form and type of an AMMCreate at runtime.\n *\n * @param tx - An AMMCreate Transaction.\n * @throws When the AMMCreate is Malformed.\n */\nexport function validateAMMCreate(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  if (tx.Amount == null) {\n    throw new ValidationError('AMMCreate: missing field Amount')\n  }\n\n  if (!isAmount(tx.Amount)) {\n    throw new ValidationError('AMMCreate: Amount must be an Amount')\n  }\n\n  if (tx.Amount2 == null) {\n    throw new ValidationError('AMMCreate: missing field Amount2')\n  }\n\n  if (!isAmount(tx.Amount2)) {\n    throw new ValidationError('AMMCreate: Amount2 must be an Amount')\n  }\n\n  if (tx.TradingFee == null) {\n    throw new ValidationError('AMMCreate: missing field TradingFee')\n  }\n\n  if (typeof tx.TradingFee !== 'number') {\n    throw new ValidationError('AMMCreate: TradingFee must be a number')\n  }\n\n  if (tx.TradingFee < 0 || tx.TradingFee > AMM_MAX_TRADING_FEE) {\n    throw new ValidationError(\n      `AMMCreate: TradingFee must be between 0 and ${AMM_MAX_TRADING_FEE}`,\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,QAAA,GAAAD,OAAA;AAEaE,OAAA,CAAAC,mBAAmB,GAAG,IAAI;AA0CvC,SAAgBC,iBAAiBA,CAACC,EAA2B;EAC3D,IAAAJ,QAAA,CAAAK,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAIA,EAAE,CAACE,MAAM,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,iCAAiC,CAAC;;EAG9D,IAAI,CAAC,IAAAP,QAAA,CAAAQ,QAAQ,EAACJ,EAAE,CAACE,MAAM,CAAC,EAAE;IACxB,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IAAIH,EAAE,CAACK,OAAO,IAAI,IAAI,EAAE;IACtB,MAAM,IAAIX,QAAA,CAAAS,eAAe,CAAC,kCAAkC,CAAC;;EAG/D,IAAI,CAAC,IAAAP,QAAA,CAAAQ,QAAQ,EAACJ,EAAE,CAACK,OAAO,CAAC,EAAE;IACzB,MAAM,IAAIX,QAAA,CAAAS,eAAe,CAAC,sCAAsC,CAAC;;EAGnE,IAAIH,EAAE,CAACM,UAAU,IAAI,IAAI,EAAE;IACzB,MAAM,IAAIZ,QAAA,CAAAS,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IAAI,OAAOH,EAAE,CAACM,UAAU,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAIZ,QAAA,CAAAS,eAAe,CAAC,wCAAwC,CAAC;;EAGrE,IAAIH,EAAE,CAACM,UAAU,GAAG,CAAC,IAAIN,EAAE,CAACM,UAAU,GAAGT,OAAA,CAAAC,mBAAmB,EAAE;IAC5D,MAAM,IAAIJ,QAAA,CAAAS,eAAe,CACvB,+CAA+CN,OAAA,CAAAC,mBAAmB,EAAE,CACrE;;AAEL;AAhCAD,OAAA,CAAAE,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}