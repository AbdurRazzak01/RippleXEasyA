{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst sha512_1 = require(\"@xrplf/isomorphic/sha512\");\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst HASH_BYTES = 32;\nfunction sha512Half(hex) {\n  return (0, utils_1.bytesToHex)((0, sha512_1.sha512)((0, utils_1.hexToBytes)(hex)).slice(0, HASH_BYTES));\n}\nexports.default = sha512Half;","map":{"version":3,"names":["sha512_1","require","utils_1","HASH_BYTES","sha512Half","hex","bytesToHex","sha512","hexToBytes","slice","exports","default"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/hashes/sha512Half.ts"],"sourcesContent":["import { sha512 } from '@xrplf/isomorphic/sha512'\nimport { bytesToHex, hexToBytes } from '@xrplf/isomorphic/utils'\n\nconst HASH_BYTES = 32\n\n/**\n * Compute a sha512Half Hash of a hex string.\n *\n * @param hex - Hex string to hash.\n * @returns Hash of hex.\n */\nfunction sha512Half(hex: string): string {\n  return bytesToHex(sha512(hexToBytes(hex)).slice(0, HASH_BYTES))\n}\n\nexport default sha512Half\n"],"mappings":";;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAME,UAAU,GAAG,EAAE;AAQrB,SAASC,UAAUA,CAACC,GAAW;EAC7B,OAAO,IAAAH,OAAA,CAAAI,UAAU,EAAC,IAAAN,QAAA,CAAAO,MAAM,EAAC,IAAAL,OAAA,CAAAM,UAAU,EAACH,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,EAAEN,UAAU,CAAC,CAAC;AACjE;AAEAO,OAAA,CAAAC,OAAA,GAAeP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}