{"ast":null,"code":"\"use strict\";\n\n/**\n * Codec class\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidClassicAddress = exports.decodeAccountPublic = exports.encodeAccountPublic = exports.encodeNodePublic = exports.decodeNodePublic = exports.decodeAddress = exports.decodeAccountID = exports.encodeAddress = exports.encodeAccountID = exports.decodeSeed = exports.encodeSeed = exports.codec = void 0;\nconst base_1 = require(\"@scure/base\");\nconst sha256_1 = require(\"@xrplf/isomorphic/sha256\");\nconst utils_1 = require(\"./utils\");\nclass Codec {\n  constructor(options) {\n    this._sha256 = options.sha256;\n    this._codec = base_1.base58xrp;\n  }\n  /**\n   * Encoder.\n   *\n   * @param bytes - Uint8Array of data to encode.\n   * @param opts - Options object including the version bytes and the expected length of the data to encode.\n   */\n  encode(bytes, opts) {\n    const versions = opts.versions;\n    return this._encodeVersioned(bytes, versions, opts.expectedLength);\n  }\n  /**\n   * Decoder.\n   *\n   * @param base58string - Base58Check-encoded string to decode.\n   * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.\n   */\n  /* eslint-disable max-lines-per-function --\n   * TODO refactor */\n  decode(base58string, opts) {\n    var _a;\n    const versions = opts.versions;\n    const types = opts.versionTypes;\n    const withoutSum = this.decodeChecked(base58string);\n    if (versions.length > 1 && !opts.expectedLength) {\n      throw new Error('expectedLength is required because there are >= 2 possible versions');\n    }\n    const versionLengthGuess = typeof versions[0] === 'number' ? 1 : versions[0].length;\n    const payloadLength = (_a = opts.expectedLength) !== null && _a !== void 0 ? _a : withoutSum.length - versionLengthGuess;\n    const versionBytes = withoutSum.slice(0, -payloadLength);\n    const payload = withoutSum.slice(-payloadLength);\n    for (let i = 0; i < versions.length; i++) {\n      /* eslint-disable @typescript-eslint/consistent-type-assertions --\n       * TODO refactor */\n      const version = Array.isArray(versions[i]) ? versions[i] : [versions[i]];\n      if ((0, utils_1.arrayEqual)(versionBytes, version)) {\n        return {\n          version,\n          bytes: payload,\n          type: types ? types[i] : null\n        };\n      }\n      /* eslint-enable @typescript-eslint/consistent-type-assertions */\n    }\n    throw new Error('version_invalid: version bytes do not match any of the provided version(s)');\n  }\n  encodeChecked(bytes) {\n    const check = this._sha256(this._sha256(bytes)).slice(0, 4);\n    return this._encodeRaw(Uint8Array.from((0, utils_1.concatArgs)(bytes, check)));\n  }\n  decodeChecked(base58string) {\n    const intArray = this._decodeRaw(base58string);\n    if (intArray.byteLength < 5) {\n      throw new Error('invalid_input_size: decoded data must have length >= 5');\n    }\n    if (!this._verifyCheckSum(intArray)) {\n      throw new Error('checksum_invalid');\n    }\n    return intArray.slice(0, -4);\n  }\n  _encodeVersioned(bytes, versions, expectedLength) {\n    if (!checkByteLength(bytes, expectedLength)) {\n      throw new Error('unexpected_payload_length: bytes.length does not match expectedLength.' + ' Ensure that the bytes are a Uint8Array.');\n    }\n    return this.encodeChecked((0, utils_1.concatArgs)(versions, bytes));\n  }\n  _encodeRaw(bytes) {\n    return this._codec.encode(Uint8Array.from(bytes));\n  }\n  /* eslint-enable max-lines-per-function */\n  _decodeRaw(base58string) {\n    return this._codec.decode(base58string);\n  }\n  _verifyCheckSum(bytes) {\n    const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4);\n    const checksum = bytes.slice(-4);\n    return (0, utils_1.arrayEqual)(computed, checksum);\n  }\n}\n/**\n * XRP codec\n */\n// base58 encodings: https://xrpl.org/base58-encodings.html\n// Account address (20 bytes)\nconst ACCOUNT_ID = 0;\n// Account public key (33 bytes)\nconst ACCOUNT_PUBLIC_KEY = 0x23;\n// 33; Seed value (for secret keys) (16 bytes)\nconst FAMILY_SEED = 0x21;\n// 28; Validation public key (33 bytes)\nconst NODE_PUBLIC = 0x1c;\n// [1, 225, 75]\nconst ED25519_SEED = [0x01, 0xe1, 0x4b];\nconst codecOptions = {\n  sha256: sha256_1.sha256\n};\nconst codecWithXrpAlphabet = new Codec(codecOptions);\nexports.codec = codecWithXrpAlphabet;\n// entropy is a Uint8Array of size 16\n// type is 'ed25519' or 'secp256k1'\nfunction encodeSeed(entropy, type) {\n  if (!checkByteLength(entropy, 16)) {\n    throw new Error('entropy must have length 16');\n  }\n  const opts = {\n    expectedLength: 16,\n    // for secp256k1, use `FAMILY_SEED`\n    versions: type === 'ed25519' ? ED25519_SEED : [FAMILY_SEED]\n  };\n  // prefixes entropy with version bytes\n  return codecWithXrpAlphabet.encode(entropy, opts);\n}\nexports.encodeSeed = encodeSeed;\nfunction decodeSeed(seed, opts = {\n  versionTypes: ['ed25519', 'secp256k1'],\n  versions: [ED25519_SEED, FAMILY_SEED],\n  expectedLength: 16\n}) {\n  return codecWithXrpAlphabet.decode(seed, opts);\n}\nexports.decodeSeed = decodeSeed;\nfunction encodeAccountID(bytes) {\n  const opts = {\n    versions: [ACCOUNT_ID],\n    expectedLength: 20\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeAccountID = encodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexports.encodeAddress = encodeAccountID;\n/* eslint-enable import/no-unused-modules */\nfunction decodeAccountID(accountId) {\n  const opts = {\n    versions: [ACCOUNT_ID],\n    expectedLength: 20\n  };\n  return codecWithXrpAlphabet.decode(accountId, opts).bytes;\n}\nexports.decodeAccountID = decodeAccountID;\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexports.decodeAddress = decodeAccountID;\n/* eslint-enable import/no-unused-modules */\nfunction decodeNodePublic(base58string) {\n  const opts = {\n    versions: [NODE_PUBLIC],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\nexports.decodeNodePublic = decodeNodePublic;\nfunction encodeNodePublic(bytes) {\n  const opts = {\n    versions: [NODE_PUBLIC],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeNodePublic = encodeNodePublic;\nfunction encodeAccountPublic(bytes) {\n  const opts = {\n    versions: [ACCOUNT_PUBLIC_KEY],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.encode(bytes, opts);\n}\nexports.encodeAccountPublic = encodeAccountPublic;\nfunction decodeAccountPublic(base58string) {\n  const opts = {\n    versions: [ACCOUNT_PUBLIC_KEY],\n    expectedLength: 33\n  };\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes;\n}\nexports.decodeAccountPublic = decodeAccountPublic;\nfunction isValidClassicAddress(address) {\n  try {\n    decodeAccountID(address);\n  } catch (_error) {\n    return false;\n  }\n  return true;\n}\nexports.isValidClassicAddress = isValidClassicAddress;\nfunction checkByteLength(bytes, expectedLength) {\n  return 'byteLength' in bytes ? bytes.byteLength === expectedLength : bytes.length === expectedLength;\n}","map":{"version":3,"names":["base_1","require","sha256_1","utils_1","Codec","constructor","options","_sha256","sha256","_codec","base58xrp","encode","bytes","opts","versions","_encodeVersioned","expectedLength","decode","base58string","types","versionTypes","withoutSum","decodeChecked","length","Error","versionLengthGuess","payloadLength","_a","versionBytes","slice","payload","i","version","Array","isArray","arrayEqual","type","encodeChecked","check","_encodeRaw","Uint8Array","from","concatArgs","intArray","_decodeRaw","byteLength","_verifyCheckSum","checkByteLength","computed","checksum","ACCOUNT_ID","ACCOUNT_PUBLIC_KEY","FAMILY_SEED","NODE_PUBLIC","ED25519_SEED","codecOptions","codecWithXrpAlphabet","exports","codec","encodeSeed","entropy","decodeSeed","seed","encodeAccountID","encodeAddress","decodeAccountID","accountId","decodeAddress","decodeNodePublic","encodeNodePublic","encodeAccountPublic","decodeAccountPublic","isValidClassicAddress","address","_error"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-address-codec/src/xrp-codec.ts"],"sourcesContent":["/**\n * Codec class\n */\n\nimport { base58xrp, BytesCoder } from '@scure/base'\nimport { sha256 } from '@xrplf/isomorphic/sha256'\n\nimport { arrayEqual, concatArgs, ByteArray } from './utils'\n\nclass Codec {\n  private readonly _sha256: (bytes: ByteArray) => Uint8Array\n  private readonly _codec: BytesCoder\n\n  public constructor(options: { sha256: (bytes: ByteArray) => Uint8Array }) {\n    this._sha256 = options.sha256\n    this._codec = base58xrp\n  }\n\n  /**\n   * Encoder.\n   *\n   * @param bytes - Uint8Array of data to encode.\n   * @param opts - Options object including the version bytes and the expected length of the data to encode.\n   */\n  public encode(\n    bytes: ByteArray,\n    opts: {\n      versions: number[]\n      expectedLength: number\n    },\n  ): string {\n    const versions = opts.versions\n    return this._encodeVersioned(bytes, versions, opts.expectedLength)\n  }\n\n  /**\n   * Decoder.\n   *\n   * @param base58string - Base58Check-encoded string to decode.\n   * @param opts - Options object including the version byte(s) and the expected length of the data after decoding.\n   */\n  /* eslint-disable max-lines-per-function --\n   * TODO refactor */\n  public decode(\n    base58string: string,\n    opts: {\n      versions: Array<number | number[]>\n      expectedLength?: number\n      versionTypes?: ['ed25519', 'secp256k1']\n    },\n  ): {\n    version: number[]\n    bytes: Uint8Array\n    type: 'ed25519' | 'secp256k1' | null\n  } {\n    const versions = opts.versions\n    const types = opts.versionTypes\n\n    const withoutSum = this.decodeChecked(base58string)\n\n    if (versions.length > 1 && !opts.expectedLength) {\n      throw new Error(\n        'expectedLength is required because there are >= 2 possible versions',\n      )\n    }\n    const versionLengthGuess =\n      typeof versions[0] === 'number' ? 1 : versions[0].length\n    const payloadLength =\n      opts.expectedLength ?? withoutSum.length - versionLengthGuess\n    const versionBytes = withoutSum.slice(0, -payloadLength)\n    const payload = withoutSum.slice(-payloadLength)\n\n    for (let i = 0; i < versions.length; i++) {\n      /* eslint-disable @typescript-eslint/consistent-type-assertions --\n       * TODO refactor */\n      const version: number[] = Array.isArray(versions[i])\n        ? (versions[i] as number[])\n        : [versions[i] as number]\n      if (arrayEqual(versionBytes, version)) {\n        return {\n          version,\n          bytes: payload,\n          type: types ? types[i] : null,\n        }\n      }\n      /* eslint-enable @typescript-eslint/consistent-type-assertions */\n    }\n\n    throw new Error(\n      'version_invalid: version bytes do not match any of the provided version(s)',\n    )\n  }\n\n  public encodeChecked(bytes: ByteArray): string {\n    const check = this._sha256(this._sha256(bytes)).slice(0, 4)\n    return this._encodeRaw(Uint8Array.from(concatArgs(bytes, check)))\n  }\n\n  public decodeChecked(base58string: string): Uint8Array {\n    const intArray = this._decodeRaw(base58string)\n    if (intArray.byteLength < 5) {\n      throw new Error('invalid_input_size: decoded data must have length >= 5')\n    }\n    if (!this._verifyCheckSum(intArray)) {\n      throw new Error('checksum_invalid')\n    }\n    return intArray.slice(0, -4)\n  }\n\n  private _encodeVersioned(\n    bytes: ByteArray,\n    versions: number[],\n    expectedLength: number,\n  ): string {\n    if (!checkByteLength(bytes, expectedLength)) {\n      throw new Error(\n        'unexpected_payload_length: bytes.length does not match expectedLength.' +\n          ' Ensure that the bytes are a Uint8Array.',\n      )\n    }\n    return this.encodeChecked(concatArgs(versions, bytes))\n  }\n\n  private _encodeRaw(bytes: ByteArray): string {\n    return this._codec.encode(Uint8Array.from(bytes))\n  }\n  /* eslint-enable max-lines-per-function */\n\n  private _decodeRaw(base58string: string): Uint8Array {\n    return this._codec.decode(base58string)\n  }\n\n  private _verifyCheckSum(bytes: ByteArray): boolean {\n    const computed = this._sha256(this._sha256(bytes.slice(0, -4))).slice(0, 4)\n    const checksum = bytes.slice(-4)\n    return arrayEqual(computed, checksum)\n  }\n}\n\n/**\n * XRP codec\n */\n\n// base58 encodings: https://xrpl.org/base58-encodings.html\n// Account address (20 bytes)\nconst ACCOUNT_ID = 0\n// Account public key (33 bytes)\nconst ACCOUNT_PUBLIC_KEY = 0x23\n// 33; Seed value (for secret keys) (16 bytes)\nconst FAMILY_SEED = 0x21\n// 28; Validation public key (33 bytes)\nconst NODE_PUBLIC = 0x1c\n\n// [1, 225, 75]\nconst ED25519_SEED = [0x01, 0xe1, 0x4b]\n\nconst codecOptions = {\n  sha256,\n}\n\nconst codecWithXrpAlphabet = new Codec(codecOptions)\n\nexport const codec = codecWithXrpAlphabet\n\n// entropy is a Uint8Array of size 16\n// type is 'ed25519' or 'secp256k1'\nexport function encodeSeed(\n  entropy: ByteArray,\n  type: 'ed25519' | 'secp256k1',\n): string {\n  if (!checkByteLength(entropy, 16)) {\n    throw new Error('entropy must have length 16')\n  }\n  const opts = {\n    expectedLength: 16,\n\n    // for secp256k1, use `FAMILY_SEED`\n    versions: type === 'ed25519' ? ED25519_SEED : [FAMILY_SEED],\n  }\n\n  // prefixes entropy with version bytes\n  return codecWithXrpAlphabet.encode(entropy, opts)\n}\n\nexport function decodeSeed(\n  seed: string,\n  opts: {\n    versionTypes: ['ed25519', 'secp256k1']\n    versions: Array<number | number[]>\n    expectedLength: number\n  } = {\n    versionTypes: ['ed25519', 'secp256k1'],\n    versions: [ED25519_SEED, FAMILY_SEED],\n    expectedLength: 16,\n  },\n): {\n  version: number[]\n  bytes: Uint8Array\n  type: 'ed25519' | 'secp256k1' | null\n} {\n  return codecWithXrpAlphabet.decode(seed, opts)\n}\n\nexport function encodeAccountID(bytes: ByteArray): string {\n  const opts = { versions: [ACCOUNT_ID], expectedLength: 20 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexport const encodeAddress = encodeAccountID\n/* eslint-enable import/no-unused-modules */\n\nexport function decodeAccountID(accountId: string): Uint8Array {\n  const opts = { versions: [ACCOUNT_ID], expectedLength: 20 }\n  return codecWithXrpAlphabet.decode(accountId, opts).bytes\n}\n\n/* eslint-disable import/no-unused-modules ---\n * unclear why this is aliased but we should keep it in case someone else is\n * importing it with the aliased name */\nexport const decodeAddress = decodeAccountID\n/* eslint-enable import/no-unused-modules */\n\nexport function decodeNodePublic(base58string: string): Uint8Array {\n  const opts = { versions: [NODE_PUBLIC], expectedLength: 33 }\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes\n}\n\nexport function encodeNodePublic(bytes: ByteArray): string {\n  const opts = { versions: [NODE_PUBLIC], expectedLength: 33 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\nexport function encodeAccountPublic(bytes: ByteArray): string {\n  const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 }\n  return codecWithXrpAlphabet.encode(bytes, opts)\n}\n\nexport function decodeAccountPublic(base58string: string): Uint8Array {\n  const opts = { versions: [ACCOUNT_PUBLIC_KEY], expectedLength: 33 }\n  return codecWithXrpAlphabet.decode(base58string, opts).bytes\n}\n\nexport function isValidClassicAddress(address: string): boolean {\n  try {\n    decodeAccountID(address)\n  } catch (_error) {\n    return false\n  }\n  return true\n}\n\nfunction checkByteLength(bytes: ByteArray, expectedLength: number): boolean {\n  return 'byteLength' in bytes\n    ? bytes.byteLength === expectedLength\n    : bytes.length === expectedLength\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}