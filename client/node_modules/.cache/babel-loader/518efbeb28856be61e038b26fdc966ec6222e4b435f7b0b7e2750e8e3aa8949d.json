{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ripple_binary_codec_1 = require(\"ripple-binary-codec\");\nconst metadata_1 = require(\"../models/transactions/metadata\");\nfunction ensureDecodedMeta(meta) {\n  if (typeof meta === 'string') {\n    return (0, ripple_binary_codec_1.decode)(meta);\n  }\n  return meta;\n}\nfunction getXChainClaimID(meta) {\n  if (typeof meta !== 'string' && (meta === null || meta === void 0 ? void 0 : meta.AffectedNodes) === undefined) {\n    throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.\n      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(meta)} instead.`);\n  }\n  const decodedMeta = ensureDecodedMeta(meta);\n  if (!decodedMeta.TransactionResult) {\n    throw new TypeError('Cannot get XChainClaimID from un-validated transaction');\n  }\n  if (decodedMeta.TransactionResult !== 'tesSUCCESS') {\n    return undefined;\n  }\n  const createdNode = decodedMeta.AffectedNodes.find(node => (0, metadata_1.isCreatedNode)(node) && node.CreatedNode.LedgerEntryType === 'XChainOwnedClaimID');\n  return createdNode.CreatedNode.NewFields.XChainClaimID;\n}\nexports.default = getXChainClaimID;","map":{"version":3,"names":["ripple_binary_codec_1","require","metadata_1","ensureDecodedMeta","meta","decode","getXChainClaimID","AffectedNodes","undefined","TypeError","JSON","stringify","decodedMeta","TransactionResult","createdNode","find","node","isCreatedNode","CreatedNode","LedgerEntryType","NewFields","XChainClaimID","exports","default"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/utils/getXChainClaimID.ts"],"sourcesContent":["import { decode } from 'ripple-binary-codec'\n\nimport {\n  CreatedNode,\n  isCreatedNode,\n  TransactionMetadata,\n} from '../models/transactions/metadata'\n\n/**\n * Ensures that the metadata is in a deserialized format to parse.\n *\n * @param meta - the metadata from a `tx` method call. Can be in json format or binary format.\n * @returns the metadata in a deserialized format.\n */\nfunction ensureDecodedMeta(\n  meta: TransactionMetadata | string,\n): TransactionMetadata {\n  if (typeof meta === 'string') {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- Meta is either metadata or serialized metadata.\n    return decode(meta) as unknown as TransactionMetadata\n  }\n  return meta\n}\n\n/**\n * Gets the XChainClaimID value from the metadata of an `XChainCreateClaimID` transaction.\n *\n * @param meta - Metadata from the response to submitting and waiting for an XChainCreateClaimID transaction\n *               or from a `tx` method call.\n * @returns The XChainClaimID for the minted NFT.\n * @throws if meta is not TransactionMetadata.\n */\nexport default function getXChainClaimID(\n  meta: TransactionMetadata | string | undefined,\n): string | undefined {\n  if (typeof meta !== 'string' && meta?.AffectedNodes === undefined) {\n    throw new TypeError(`Unable to parse the parameter given to getXChainClaimID.\n      'meta' must be the metadata from an XChainCreateClaimID transaction. Received ${JSON.stringify(\n        meta,\n      )} instead.`)\n  }\n\n  const decodedMeta = ensureDecodedMeta(meta)\n\n  if (!decodedMeta.TransactionResult) {\n    throw new TypeError(\n      'Cannot get XChainClaimID from un-validated transaction',\n    )\n  }\n\n  if (decodedMeta.TransactionResult !== 'tesSUCCESS') {\n    return undefined\n  }\n\n  const createdNode = decodedMeta.AffectedNodes.find(\n    (node) =>\n      isCreatedNode(node) &&\n      node.CreatedNode.LedgerEntryType === 'XChainOwnedClaimID',\n  )\n\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions -- necessary here\n  return (createdNode as CreatedNode).CreatedNode.NewFields\n    .XChainClaimID as string\n}\n"],"mappings":";;;;;AAAA,MAAAA,qBAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AAYA,SAASE,iBAAiBA,CACxBC,IAAkC;EAElC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAE5B,OAAO,IAAAJ,qBAAA,CAAAK,MAAM,EAACD,IAAI,CAAmC;;EAEvD,OAAOA,IAAI;AACb;AAUA,SAAwBE,gBAAgBA,CACtCF,IAA8C;EAE9C,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,aAAa,MAAKC,SAAS,EAAE;IACjE,MAAM,IAAIC,SAAS,CAAC;sFAC8DC,IAAI,CAACC,SAAS,CAC5FP,IAAI,CACL,WAAW,CAAC;;EAGjB,MAAMQ,WAAW,GAAGT,iBAAiB,CAACC,IAAI,CAAC;EAE3C,IAAI,CAACQ,WAAW,CAACC,iBAAiB,EAAE;IAClC,MAAM,IAAIJ,SAAS,CACjB,wDAAwD,CACzD;;EAGH,IAAIG,WAAW,CAACC,iBAAiB,KAAK,YAAY,EAAE;IAClD,OAAOL,SAAS;;EAGlB,MAAMM,WAAW,GAAGF,WAAW,CAACL,aAAa,CAACQ,IAAI,CAC/CC,IAAI,IACH,IAAAd,UAAA,CAAAe,aAAa,EAACD,IAAI,CAAC,IACnBA,IAAI,CAACE,WAAW,CAACC,eAAe,KAAK,oBAAoB,CAC5D;EAGD,OAAQL,WAA2B,CAACI,WAAW,CAACE,SAAS,CACtDC,aAAuB;AAC5B;AA/BAC,OAAA,CAAAC,OAAA,GAAAjB,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}