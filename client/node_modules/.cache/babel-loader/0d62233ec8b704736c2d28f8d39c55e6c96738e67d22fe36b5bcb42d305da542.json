{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UInt32 = void 0;\nconst uint_1 = require(\"./uint\");\nconst utils_1 = require(\"../utils\");\n/**\n * Derived UInt class for serializing/deserializing 32 bit UInt\n */\nclass UInt32 extends uint_1.UInt {\n  constructor(bytes) {\n    super(bytes !== null && bytes !== void 0 ? bytes : UInt32.defaultUInt32.bytes);\n  }\n  static fromParser(parser) {\n    return new UInt32(parser.read(UInt32.width));\n  }\n  /**\n   * Construct a UInt32 object from a number\n   *\n   * @param val UInt32 object or number\n   */\n  static from(val) {\n    if (val instanceof UInt32) {\n      return val;\n    }\n    const buf = new Uint8Array(UInt32.width);\n    if (typeof val === 'string') {\n      const num = Number.parseInt(val);\n      (0, utils_1.writeUInt32BE)(buf, num, 0);\n      return new UInt32(buf);\n    }\n    if (typeof val === 'number') {\n      UInt32.checkUintRange(val, 0, 0xffffffff);\n      (0, utils_1.writeUInt32BE)(buf, val, 0);\n      return new UInt32(buf);\n    }\n    throw new Error('Cannot construct UInt32 from given value');\n  }\n  /**\n   * get the value of a UInt32 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf() {\n    return parseInt((0, utils_1.readUInt32BE)(this.bytes, 0), 10);\n  }\n}\nexports.UInt32 = UInt32;\nUInt32.width = 32 / 8; // 4\nUInt32.defaultUInt32 = new UInt32(new Uint8Array(UInt32.width));","map":{"version":3,"names":["uint_1","require","utils_1","UInt32","UInt","constructor","bytes","defaultUInt32","fromParser","parser","read","width","from","val","buf","Uint8Array","num","Number","parseInt","writeUInt32BE","checkUintRange","Error","valueOf","readUInt32BE","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/types/uint-32.ts"],"sourcesContent":["import { UInt } from './uint'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { readUInt32BE, writeUInt32BE } from '../utils'\n\n/**\n * Derived UInt class for serializing/deserializing 32 bit UInt\n */\nclass UInt32 extends UInt {\n  protected static readonly width: number = 32 / 8 // 4\n  static readonly defaultUInt32: UInt32 = new UInt32(\n    new Uint8Array(UInt32.width),\n  )\n\n  constructor(bytes: Uint8Array) {\n    super(bytes ?? UInt32.defaultUInt32.bytes)\n  }\n\n  static fromParser(parser: BinaryParser): UInt {\n    return new UInt32(parser.read(UInt32.width))\n  }\n\n  /**\n   * Construct a UInt32 object from a number\n   *\n   * @param val UInt32 object or number\n   */\n  static from<T extends UInt32 | number | string>(val: T): UInt32 {\n    if (val instanceof UInt32) {\n      return val\n    }\n\n    const buf = new Uint8Array(UInt32.width)\n\n    if (typeof val === 'string') {\n      const num = Number.parseInt(val)\n      writeUInt32BE(buf, num, 0)\n      return new UInt32(buf)\n    }\n\n    if (typeof val === 'number') {\n      UInt32.checkUintRange(val, 0, 0xffffffff)\n      writeUInt32BE(buf, val, 0)\n      return new UInt32(buf)\n    }\n\n    throw new Error('Cannot construct UInt32 from given value')\n  }\n\n  /**\n   * get the value of a UInt32 object\n   *\n   * @returns the number represented by this.bytes\n   */\n  valueOf(): number {\n    return parseInt(readUInt32BE(this.bytes, 0), 10)\n  }\n}\n\nexport { UInt32 }\n"],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAEA;;;AAGA,MAAME,MAAO,SAAQH,MAAA,CAAAI,IAAI;EAMvBC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIH,MAAM,CAACI,aAAa,CAACD,KAAK,CAAC;EAC5C;EAEA,OAAOE,UAAUA,CAACC,MAAoB;IACpC,OAAO,IAAIN,MAAM,CAACM,MAAM,CAACC,IAAI,CAACP,MAAM,CAACQ,KAAK,CAAC,CAAC;EAC9C;EAEA;;;;;EAKA,OAAOC,IAAIA,CAAqCC,GAAM;IACpD,IAAIA,GAAG,YAAYV,MAAM,EAAE;MACzB,OAAOU,GAAG;;IAGZ,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACZ,MAAM,CAACQ,KAAK,CAAC;IAExC,IAAI,OAAOE,GAAG,KAAK,QAAQ,EAAE;MAC3B,MAAMG,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACL,GAAG,CAAC;MAChC,IAAAX,OAAA,CAAAiB,aAAa,EAACL,GAAG,EAAEE,GAAG,EAAE,CAAC,CAAC;MAC1B,OAAO,IAAIb,MAAM,CAACW,GAAG,CAAC;;IAGxB,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;MAC3BV,MAAM,CAACiB,cAAc,CAACP,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC;MACzC,IAAAX,OAAA,CAAAiB,aAAa,EAACL,GAAG,EAAED,GAAG,EAAE,CAAC,CAAC;MAC1B,OAAO,IAAIV,MAAM,CAACW,GAAG,CAAC;;IAGxB,MAAM,IAAIO,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA;;;;;EAKAC,OAAOA,CAAA;IACL,OAAOJ,QAAQ,CAAC,IAAAhB,OAAA,CAAAqB,YAAY,EAAC,IAAI,CAACjB,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAClD;;AAGOkB,OAAA,CAAArB,MAAA,GAAAA,MAAA;AAlDmBA,MAAA,CAAAQ,KAAK,GAAW,EAAE,GAAG,CAAC,EAAC;AACjCR,MAAA,CAAAI,aAAa,GAAW,IAAIJ,MAAM,CAChD,IAAIY,UAAU,CAACZ,MAAM,CAACQ,KAAK,CAAC,CAC7B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}