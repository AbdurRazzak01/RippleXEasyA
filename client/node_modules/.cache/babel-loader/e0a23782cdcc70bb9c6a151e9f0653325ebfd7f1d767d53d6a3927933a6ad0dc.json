{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateEscrowCancel = void 0;\nconst errors_1 = require(\"../../errors\");\nconst common_1 = require(\"./common\");\nfunction validateEscrowCancel(tx) {\n  (0, common_1.validateBaseTransaction)(tx);\n  (0, common_1.validateRequiredField)(tx, 'Owner', common_1.isAccount);\n  if (tx.OfferSequence == null) {\n    throw new errors_1.ValidationError('EscrowCancel: missing OfferSequence');\n  }\n  if (typeof tx.OfferSequence !== 'number' && typeof tx.OfferSequence !== 'string' || Number.isNaN(Number(tx.OfferSequence))) {\n    throw new errors_1.ValidationError('EscrowCancel: OfferSequence must be a number');\n  }\n}\nexports.validateEscrowCancel = validateEscrowCancel;","map":{"version":3,"names":["errors_1","require","common_1","validateEscrowCancel","tx","validateBaseTransaction","validateRequiredField","isAccount","OfferSequence","ValidationError","Number","isNaN","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/src/models/transactions/escrowCancel.ts"],"sourcesContent":["import { ValidationError } from '../../errors'\n\nimport {\n  Account,\n  BaseTransaction,\n  isAccount,\n  validateBaseTransaction,\n  validateRequiredField,\n} from './common'\n\n/**\n * Return escrowed XRP to the sender.\n *\n * @category Transaction Models\n */\nexport interface EscrowCancel extends BaseTransaction {\n  TransactionType: 'EscrowCancel'\n  /** Address of the source account that funded the escrow payment. */\n  Owner: Account\n  /**\n   * Transaction sequence (or Ticket  number) of EscrowCreate transaction that.\n   * created the escrow to cancel.\n   */\n  OfferSequence: number | string\n}\n\n/**\n * Verify the form and type of an EscrowCancel at runtime.\n *\n * @param tx - An EscrowCancel Transaction.\n * @throws When the EscrowCancel is Malformed.\n */\nexport function validateEscrowCancel(tx: Record<string, unknown>): void {\n  validateBaseTransaction(tx)\n\n  validateRequiredField(tx, 'Owner', isAccount)\n\n  if (tx.OfferSequence == null) {\n    throw new ValidationError('EscrowCancel: missing OfferSequence')\n  }\n\n  if (\n    (typeof tx.OfferSequence !== 'number' &&\n      typeof tx.OfferSequence !== 'string') ||\n    Number.isNaN(Number(tx.OfferSequence))\n  ) {\n    throw new ValidationError('EscrowCancel: OfferSequence must be a number')\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,QAAA,GAAAD,OAAA;AA8BA,SAAgBE,oBAAoBA,CAACC,EAA2B;EAC9D,IAAAF,QAAA,CAAAG,uBAAuB,EAACD,EAAE,CAAC;EAE3B,IAAAF,QAAA,CAAAI,qBAAqB,EAACF,EAAE,EAAE,OAAO,EAAEF,QAAA,CAAAK,SAAS,CAAC;EAE7C,IAAIH,EAAE,CAACI,aAAa,IAAI,IAAI,EAAE;IAC5B,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IACG,OAAOL,EAAE,CAACI,aAAa,KAAK,QAAQ,IACnC,OAAOJ,EAAE,CAACI,aAAa,KAAK,QAAQ,IACtCE,MAAM,CAACC,KAAK,CAACD,MAAM,CAACN,EAAE,CAACI,aAAa,CAAC,CAAC,EACtC;IACA,MAAM,IAAIR,QAAA,CAAAS,eAAe,CAAC,8CAA8C,CAAC;;AAE7E;AAhBAG,OAAA,CAAAT,oBAAA,GAAAA,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}