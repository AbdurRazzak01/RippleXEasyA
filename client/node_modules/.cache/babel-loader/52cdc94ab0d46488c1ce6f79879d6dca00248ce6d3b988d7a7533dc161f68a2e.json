{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vector256 = void 0;\nconst serialized_type_1 = require(\"./serialized-type\");\nconst hash_256_1 = require(\"./hash-256\");\nconst binary_serializer_1 = require(\"../serdes/binary-serializer\");\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\n/**\n * TypeGuard for Array<string>\n */\nfunction isStrings(arg) {\n  return Array.isArray(arg) && (arg.length === 0 || typeof arg[0] === 'string');\n}\n/**\n * Class for serializing and deserializing vectors of Hash256\n */\nclass Vector256 extends serialized_type_1.SerializedType {\n  constructor(bytes) {\n    super(bytes);\n  }\n  /**\n   * Construct a Vector256 from a BinaryParser\n   *\n   * @param parser BinaryParser to\n   * @param hint length of the vector, in bytes, optional\n   * @returns a Vector256 object\n   */\n  static fromParser(parser, hint) {\n    const bytesList = new binary_serializer_1.BytesList();\n    const bytes = hint !== null && hint !== void 0 ? hint : parser.size();\n    const hashes = bytes / 32;\n    for (let i = 0; i < hashes; i++) {\n      hash_256_1.Hash256.fromParser(parser).toBytesSink(bytesList);\n    }\n    return new Vector256(bytesList.toBytes());\n  }\n  /**\n   * Construct a Vector256 object from an array of hashes\n   *\n   * @param value A Vector256 object or array of hex-strings representing Hash256's\n   * @returns a Vector256 object\n   */\n  static from(value) {\n    if (value instanceof Vector256) {\n      return value;\n    }\n    if (isStrings(value)) {\n      const bytesList = new binary_serializer_1.BytesList();\n      value.forEach(hash => {\n        hash_256_1.Hash256.from(hash).toBytesSink(bytesList);\n      });\n      return new Vector256(bytesList.toBytes());\n    }\n    throw new Error('Cannot construct Vector256 from given value');\n  }\n  /**\n   * Return an Array of hex-strings represented by this.bytes\n   *\n   * @returns An Array of strings representing the Hash256 objects\n   */\n  toJSON() {\n    if (this.bytes.byteLength % 32 !== 0) {\n      throw new Error('Invalid bytes for Vector256');\n    }\n    const result = [];\n    for (let i = 0; i < this.bytes.byteLength; i += 32) {\n      result.push((0, utils_1.bytesToHex)(this.bytes.slice(i, i + 32)));\n    }\n    return result;\n  }\n}\nexports.Vector256 = Vector256;","map":{"version":3,"names":["serialized_type_1","require","hash_256_1","binary_serializer_1","utils_1","isStrings","arg","Array","isArray","length","Vector256","SerializedType","constructor","bytes","fromParser","parser","hint","bytesList","BytesList","size","hashes","i","Hash256","toBytesSink","toBytes","from","value","forEach","hash","Error","toJSON","byteLength","result","push","bytesToHex","slice","exports"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-binary-codec/src/types/vector-256.ts"],"sourcesContent":["import { SerializedType } from './serialized-type'\nimport { BinaryParser } from '../serdes/binary-parser'\nimport { Hash256 } from './hash-256'\nimport { BytesList } from '../serdes/binary-serializer'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\n/**\n * TypeGuard for Array<string>\n */\nfunction isStrings(arg): arg is Array<string> {\n  return Array.isArray(arg) && (arg.length === 0 || typeof arg[0] === 'string')\n}\n\n/**\n * Class for serializing and deserializing vectors of Hash256\n */\nclass Vector256 extends SerializedType {\n  constructor(bytes: Uint8Array) {\n    super(bytes)\n  }\n\n  /**\n   * Construct a Vector256 from a BinaryParser\n   *\n   * @param parser BinaryParser to\n   * @param hint length of the vector, in bytes, optional\n   * @returns a Vector256 object\n   */\n  static fromParser(parser: BinaryParser, hint?: number): Vector256 {\n    const bytesList = new BytesList()\n    const bytes = hint ?? parser.size()\n    const hashes = bytes / 32\n    for (let i = 0; i < hashes; i++) {\n      Hash256.fromParser(parser).toBytesSink(bytesList)\n    }\n    return new Vector256(bytesList.toBytes())\n  }\n\n  /**\n   * Construct a Vector256 object from an array of hashes\n   *\n   * @param value A Vector256 object or array of hex-strings representing Hash256's\n   * @returns a Vector256 object\n   */\n  static from<T extends Vector256 | Array<string>>(value: T): Vector256 {\n    if (value instanceof Vector256) {\n      return value\n    }\n\n    if (isStrings(value)) {\n      const bytesList = new BytesList()\n      value.forEach((hash) => {\n        Hash256.from(hash).toBytesSink(bytesList)\n      })\n      return new Vector256(bytesList.toBytes())\n    }\n\n    throw new Error('Cannot construct Vector256 from given value')\n  }\n\n  /**\n   * Return an Array of hex-strings represented by this.bytes\n   *\n   * @returns An Array of strings representing the Hash256 objects\n   */\n  toJSON(): Array<string> {\n    if (this.bytes.byteLength % 32 !== 0) {\n      throw new Error('Invalid bytes for Vector256')\n    }\n\n    const result: Array<string> = []\n    for (let i = 0; i < this.bytes.byteLength; i += 32) {\n      result.push(bytesToHex(this.bytes.slice(i, i + 32)))\n    }\n    return result\n  }\n}\n\nexport { Vector256 }\n"],"mappings":";;;;;;AAAA,MAAAA,iBAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,mBAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAEA;;;AAGA,SAASI,SAASA,CAACC,GAAG;EACpB,OAAOC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,KAAKA,GAAG,CAACG,MAAM,KAAK,CAAC,IAAI,OAAOH,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC;AAC/E;AAEA;;;AAGA,MAAMI,SAAU,SAAQV,iBAAA,CAAAW,cAAc;EACpCC,YAAYC,KAAiB;IAC3B,KAAK,CAACA,KAAK,CAAC;EACd;EAEA;;;;;;;EAOA,OAAOC,UAAUA,CAACC,MAAoB,EAAEC,IAAa;IACnD,MAAMC,SAAS,GAAG,IAAId,mBAAA,CAAAe,SAAS,EAAE;IACjC,MAAML,KAAK,GAAGG,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAID,MAAM,CAACI,IAAI,EAAE;IACnC,MAAMC,MAAM,GAAGP,KAAK,GAAG,EAAE;IACzB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/BnB,UAAA,CAAAoB,OAAO,CAACR,UAAU,CAACC,MAAM,CAAC,CAACQ,WAAW,CAACN,SAAS,CAAC;;IAEnD,OAAO,IAAIP,SAAS,CAACO,SAAS,CAACO,OAAO,EAAE,CAAC;EAC3C;EAEA;;;;;;EAMA,OAAOC,IAAIA,CAAsCC,KAAQ;IACvD,IAAIA,KAAK,YAAYhB,SAAS,EAAE;MAC9B,OAAOgB,KAAK;;IAGd,IAAIrB,SAAS,CAACqB,KAAK,CAAC,EAAE;MACpB,MAAMT,SAAS,GAAG,IAAId,mBAAA,CAAAe,SAAS,EAAE;MACjCQ,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAI;QACrB1B,UAAA,CAAAoB,OAAO,CAACG,IAAI,CAACG,IAAI,CAAC,CAACL,WAAW,CAACN,SAAS,CAAC;MAC3C,CAAC,CAAC;MACF,OAAO,IAAIP,SAAS,CAACO,SAAS,CAACO,OAAO,EAAE,CAAC;;IAG3C,MAAM,IAAIK,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA;;;;;EAKAC,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACjB,KAAK,CAACkB,UAAU,GAAG,EAAE,KAAK,CAAC,EAAE;MACpC,MAAM,IAAIF,KAAK,CAAC,6BAA6B,CAAC;;IAGhD,MAAMG,MAAM,GAAkB,EAAE;IAChC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACR,KAAK,CAACkB,UAAU,EAAEV,CAAC,IAAI,EAAE,EAAE;MAClDW,MAAM,CAACC,IAAI,CAAC,IAAA7B,OAAA,CAAA8B,UAAU,EAAC,IAAI,CAACrB,KAAK,CAACsB,KAAK,CAACd,CAAC,EAAEA,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;;IAEtD,OAAOW,MAAM;EACf;;AAGOI,OAAA,CAAA1B,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}