{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst ed25519_1 = require(\"@noble/curves/ed25519\");\nconst utils_1 = require(\"@xrplf/isomorphic/utils\");\nconst assert_1 = __importDefault(require(\"../../utils/assert\"));\nconst Sha512_1 = __importDefault(require(\"../../utils/Sha512\"));\nconst ED_PREFIX = 'ED';\nconst ed25519 = {\n  deriveKeypair(entropy) {\n    const rawPrivateKey = Sha512_1.default.half(entropy);\n    const privateKey = ED_PREFIX + (0, utils_1.bytesToHex)(rawPrivateKey);\n    const publicKey = ED_PREFIX + (0, utils_1.bytesToHex)(ed25519_1.ed25519.getPublicKey(rawPrivateKey));\n    return {\n      privateKey,\n      publicKey\n    };\n  },\n  sign(message, privateKey) {\n    assert_1.default.ok(message instanceof Uint8Array, 'message must be array of octets');\n    assert_1.default.ok(privateKey.length === 66, 'private key must be 33 bytes including prefix');\n    return (0, utils_1.bytesToHex)(ed25519_1.ed25519.sign(message, privateKey.slice(2)));\n  },\n  verify(message, signature, publicKey) {\n    // Unlikely to be triggered as these are internal and guarded by getAlgorithmFromKey\n    assert_1.default.ok(publicKey.length === 66, 'public key must be 33 bytes including prefix');\n    return ed25519_1.ed25519.verify(signature, message,\n    // Remove the 0xED prefix\n    publicKey.slice(2),\n    // By default, set zip215 to false for compatibility reasons.\n    // ZIP 215 is a stricter Ed25519 signature verification scheme.\n    // However, setting it to false adheres to the more commonly used\n    // RFC8032 / NIST186-5 standards, making it compatible with systems\n    // like the XRP Ledger.\n    {\n      zip215: false\n    });\n  }\n};\nexports.default = ed25519;","map":{"version":3,"names":["ed25519_1","require","utils_1","assert_1","__importDefault","Sha512_1","ED_PREFIX","ed25519","deriveKeypair","entropy","rawPrivateKey","default","half","privateKey","bytesToHex","publicKey","getPublicKey","sign","message","ok","Uint8Array","length","slice","verify","signature","zip215","exports"],"sources":["/Users/mdabdurrazzak/node_modules/ripple-keypairs/src/signing-schemes/ed25519/index.ts"],"sourcesContent":["import { ed25519 as nobleEd25519 } from '@noble/curves/ed25519'\nimport { bytesToHex } from '@xrplf/isomorphic/utils'\n\nimport type { HexString, SigningScheme } from '../../types'\nimport assert from '../../utils/assert'\nimport Sha512 from '../../utils/Sha512'\n\nconst ED_PREFIX = 'ED'\n\nconst ed25519: SigningScheme = {\n  deriveKeypair(entropy: Uint8Array): {\n    privateKey: string\n    publicKey: string\n  } {\n    const rawPrivateKey = Sha512.half(entropy)\n    const privateKey = ED_PREFIX + bytesToHex(rawPrivateKey)\n    const publicKey =\n      ED_PREFIX + bytesToHex(nobleEd25519.getPublicKey(rawPrivateKey))\n    return { privateKey, publicKey }\n  },\n\n  sign(message: Uint8Array, privateKey: HexString): string {\n    assert.ok(message instanceof Uint8Array, 'message must be array of octets')\n    assert.ok(\n      privateKey.length === 66,\n      'private key must be 33 bytes including prefix',\n    )\n    return bytesToHex(nobleEd25519.sign(message, privateKey.slice(2)))\n  },\n\n  verify(\n    message: Uint8Array,\n    signature: HexString,\n    publicKey: string,\n  ): boolean {\n    // Unlikely to be triggered as these are internal and guarded by getAlgorithmFromKey\n    assert.ok(\n      publicKey.length === 66,\n      'public key must be 33 bytes including prefix',\n    )\n    return nobleEd25519.verify(\n      signature,\n      message,\n      // Remove the 0xED prefix\n      publicKey.slice(2),\n      // By default, set zip215 to false for compatibility reasons.\n      // ZIP 215 is a stricter Ed25519 signature verification scheme.\n      // However, setting it to false adheres to the more commonly used\n      // RFC8032 / NIST186-5 standards, making it compatible with systems\n      // like the XRP Ledger.\n      { zip215: false },\n    )\n  },\n}\n\nexport default ed25519\n"],"mappings":";;;;;;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AAGA,MAAAE,QAAA,GAAAC,eAAA,CAAAH,OAAA;AACA,MAAAI,QAAA,GAAAD,eAAA,CAAAH,OAAA;AAEA,MAAMK,SAAS,GAAG,IAAI;AAEtB,MAAMC,OAAO,GAAkB;EAC7BC,aAAaA,CAACC,OAAmB;IAI/B,MAAMC,aAAa,GAAGL,QAAA,CAAAM,OAAM,CAACC,IAAI,CAACH,OAAO,CAAC;IAC1C,MAAMI,UAAU,GAAGP,SAAS,GAAG,IAAAJ,OAAA,CAAAY,UAAU,EAACJ,aAAa,CAAC;IACxD,MAAMK,SAAS,GACbT,SAAS,GAAG,IAAAJ,OAAA,CAAAY,UAAU,EAACd,SAAA,CAAAO,OAAY,CAACS,YAAY,CAACN,aAAa,CAAC,CAAC;IAClE,OAAO;MAAEG,UAAU;MAAEE;IAAS,CAAE;EAClC,CAAC;EAEDE,IAAIA,CAACC,OAAmB,EAAEL,UAAqB;IAC7CV,QAAA,CAAAQ,OAAM,CAACQ,EAAE,CAACD,OAAO,YAAYE,UAAU,EAAE,iCAAiC,CAAC;IAC3EjB,QAAA,CAAAQ,OAAM,CAACQ,EAAE,CACPN,UAAU,CAACQ,MAAM,KAAK,EAAE,EACxB,+CAA+C,CAChD;IACD,OAAO,IAAAnB,OAAA,CAAAY,UAAU,EAACd,SAAA,CAAAO,OAAY,CAACU,IAAI,CAACC,OAAO,EAAEL,UAAU,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACpE,CAAC;EAEDC,MAAMA,CACJL,OAAmB,EACnBM,SAAoB,EACpBT,SAAiB;IAEjB;IACAZ,QAAA,CAAAQ,OAAM,CAACQ,EAAE,CACPJ,SAAS,CAACM,MAAM,KAAK,EAAE,EACvB,8CAA8C,CAC/C;IACD,OAAOrB,SAAA,CAAAO,OAAY,CAACgB,MAAM,CACxBC,SAAS,EACTN,OAAO;IACP;IACAH,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC;IAClB;IACA;IACA;IACA;IACA;IACA;MAAEG,MAAM,EAAE;IAAK,CAAE,CAClB;EACH;CACD;AAEDC,OAAA,CAAAf,OAAA,GAAeJ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}