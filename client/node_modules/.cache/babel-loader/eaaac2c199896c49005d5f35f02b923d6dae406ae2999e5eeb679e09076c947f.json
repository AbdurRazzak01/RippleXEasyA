{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HashPrefix = void 0;\nconst utils_1 = require(\"./utils\");\n/**\n * Write a 32 bit integer to a Uint8Array\n *\n * @param uint32 32 bit integer to write to Uint8Array\n * @returns a Uint8Array with the bytes representation of uint32\n */\nfunction bytes(uint32) {\n  const result = new Uint8Array(4);\n  (0, utils_1.writeUInt32BE)(result, uint32, 0);\n  return result;\n}\n/**\n * Maps HashPrefix names to their byte representation\n */\nconst HashPrefix = {\n  transactionID: bytes(0x54584e00),\n  // transaction plus metadata\n  transaction: bytes(0x534e4400),\n  // account state\n  accountStateEntry: bytes(0x4d4c4e00),\n  // inner node in tree\n  innerNode: bytes(0x4d494e00),\n  // ledger master data for signing\n  ledgerHeader: bytes(0x4c575200),\n  // inner transaction to sign\n  transactionSig: bytes(0x53545800),\n  // inner transaction to sign\n  transactionMultiSig: bytes(0x534d5400),\n  // validation for signing\n  validation: bytes(0x56414c00),\n  // proposal for signing\n  proposal: bytes(0x50525000),\n  // payment channel claim\n  paymentChannelClaim: bytes(0x434c4d00)\n};\nexports.HashPrefix = HashPrefix;","map":{"version":3,"names":["utils_1","require","bytes","uint32","result","Uint8Array","writeUInt32BE","HashPrefix","transactionID","transaction","accountStateEntry","innerNode","ledgerHeader","transactionSig","transactionMultiSig","validation","proposal","paymentChannelClaim","exports"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/ripple-binary-codec/src/hash-prefixes.ts"],"sourcesContent":["import { writeUInt32BE } from './utils'\n\n/**\n * Write a 32 bit integer to a Uint8Array\n *\n * @param uint32 32 bit integer to write to Uint8Array\n * @returns a Uint8Array with the bytes representation of uint32\n */\nfunction bytes(uint32: number): Uint8Array {\n  const result = new Uint8Array(4)\n  writeUInt32BE(result, uint32, 0)\n  return result\n}\n\n/**\n * Maps HashPrefix names to their byte representation\n */\nconst HashPrefix: Record<string, Uint8Array> = {\n  transactionID: bytes(0x54584e00),\n  // transaction plus metadata\n  transaction: bytes(0x534e4400),\n  // account state\n  accountStateEntry: bytes(0x4d4c4e00),\n  // inner node in tree\n  innerNode: bytes(0x4d494e00),\n  // ledger master data for signing\n  ledgerHeader: bytes(0x4c575200),\n  // inner transaction to sign\n  transactionSig: bytes(0x53545800),\n  // inner transaction to sign\n  transactionMultiSig: bytes(0x534d5400),\n  // validation for signing\n  validation: bytes(0x56414c00),\n  // proposal for signing\n  proposal: bytes(0x50525000),\n  // payment channel claim\n  paymentChannelClaim: bytes(0x434c4d00),\n}\n\nexport { HashPrefix }\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA;;;;;;AAMA,SAASC,KAAKA,CAACC,MAAc;EAC3B,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;EAChC,IAAAL,OAAA,CAAAM,aAAa,EAACF,MAAM,EAAED,MAAM,EAAE,CAAC,CAAC;EAChC,OAAOC,MAAM;AACf;AAEA;;;AAGA,MAAMG,UAAU,GAA+B;EAC7CC,aAAa,EAAEN,KAAK,CAAC,UAAU,CAAC;EAChC;EACAO,WAAW,EAAEP,KAAK,CAAC,UAAU,CAAC;EAC9B;EACAQ,iBAAiB,EAAER,KAAK,CAAC,UAAU,CAAC;EACpC;EACAS,SAAS,EAAET,KAAK,CAAC,UAAU,CAAC;EAC5B;EACAU,YAAY,EAAEV,KAAK,CAAC,UAAU,CAAC;EAC/B;EACAW,cAAc,EAAEX,KAAK,CAAC,UAAU,CAAC;EACjC;EACAY,mBAAmB,EAAEZ,KAAK,CAAC,UAAU,CAAC;EACtC;EACAa,UAAU,EAAEb,KAAK,CAAC,UAAU,CAAC;EAC7B;EACAc,QAAQ,EAAEd,KAAK,CAAC,UAAU,CAAC;EAC3B;EACAe,mBAAmB,EAAEf,KAAK,CAAC,UAAU;CACtC;AAEQgB,OAAA,CAAAX,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}