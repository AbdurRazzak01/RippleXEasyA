{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.xrpToDrops = exports.dropsToXrp = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst DROPS_PER_XRP = 1000000.0;\nconst MAX_FRACTION_LENGTH = 6;\nconst BASE_TEN = 10;\nconst SANITY_CHECK = /^-?[0-9.]+$/u;\nfunction dropsToXrp(dropsToConvert) {\n  const drops = new bignumber_js_1.default(dropsToConvert).toString(BASE_TEN);\n  if (typeof dropsToConvert === 'string' && drops === 'NaN') {\n    throw new errors_1.ValidationError(`dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`);\n  }\n  if (drops.includes('.')) {\n    throw new errors_1.ValidationError(`dropsToXrp: value '${drops}' has too many decimal places.`);\n  }\n  if (!SANITY_CHECK.exec(drops)) {\n    throw new errors_1.ValidationError(`dropsToXrp: failed sanity check -` + ` value '${drops}',` + ` does not match (^-?[0-9]+$).`);\n  }\n  return new bignumber_js_1.default(drops).dividedBy(DROPS_PER_XRP).toNumber();\n}\nexports.dropsToXrp = dropsToXrp;\nfunction xrpToDrops(xrpToConvert) {\n  const xrp = new bignumber_js_1.default(xrpToConvert).toString(BASE_TEN);\n  if (typeof xrpToConvert === 'string' && xrp === 'NaN') {\n    throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`);\n  }\n  if (!SANITY_CHECK.exec(xrp)) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`);\n  }\n  const components = xrp.split('.');\n  if (components.length > 2) {\n    throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`);\n  }\n  const fraction = components[1] || '0';\n  if (fraction.length > MAX_FRACTION_LENGTH) {\n    throw new errors_1.ValidationError(`xrpToDrops: value '${xrp}' has too many decimal places.`);\n  }\n  return new bignumber_js_1.default(xrp).times(DROPS_PER_XRP).integerValue(bignumber_js_1.default.ROUND_FLOOR).toString(BASE_TEN);\n}\nexports.xrpToDrops = xrpToDrops;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","xrpToDrops","dropsToXrp","bignumber_js_1","require","errors_1","DROPS_PER_XRP","MAX_FRACTION_LENGTH","BASE_TEN","SANITY_CHECK","dropsToConvert","drops","default","toString","ValidationError","includes","exec","dividedBy","toNumber","xrpToConvert","xrp","components","split","length","fraction","times","integerValue","ROUND_FLOOR"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/node_modules/xrpl/dist/npm/utils/xrpConversion.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.xrpToDrops = exports.dropsToXrp = void 0;\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst errors_1 = require(\"../errors\");\nconst DROPS_PER_XRP = 1000000.0;\nconst MAX_FRACTION_LENGTH = 6;\nconst BASE_TEN = 10;\nconst SANITY_CHECK = /^-?[0-9.]+$/u;\nfunction dropsToXrp(dropsToConvert) {\n    const drops = new bignumber_js_1.default(dropsToConvert).toString(BASE_TEN);\n    if (typeof dropsToConvert === 'string' && drops === 'NaN') {\n        throw new errors_1.ValidationError(`dropsToXrp: invalid value '${dropsToConvert}', should be a BigNumber or string-encoded number.`);\n    }\n    if (drops.includes('.')) {\n        throw new errors_1.ValidationError(`dropsToXrp: value '${drops}' has too many decimal places.`);\n    }\n    if (!SANITY_CHECK.exec(drops)) {\n        throw new errors_1.ValidationError(`dropsToXrp: failed sanity check -` +\n            ` value '${drops}',` +\n            ` does not match (^-?[0-9]+$).`);\n    }\n    return new bignumber_js_1.default(drops).dividedBy(DROPS_PER_XRP).toNumber();\n}\nexports.dropsToXrp = dropsToXrp;\nfunction xrpToDrops(xrpToConvert) {\n    const xrp = new bignumber_js_1.default(xrpToConvert).toString(BASE_TEN);\n    if (typeof xrpToConvert === 'string' && xrp === 'NaN') {\n        throw new errors_1.ValidationError(`xrpToDrops: invalid value '${xrpToConvert}', should be a BigNumber or string-encoded number.`);\n    }\n    if (!SANITY_CHECK.exec(xrp)) {\n        throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}', does not match (^-?[0-9.]+$).`);\n    }\n    const components = xrp.split('.');\n    if (components.length > 2) {\n        throw new errors_1.ValidationError(`xrpToDrops: failed sanity check - value '${xrp}' has too many decimal points.`);\n    }\n    const fraction = components[1] || '0';\n    if (fraction.length > MAX_FRACTION_LENGTH) {\n        throw new errors_1.ValidationError(`xrpToDrops: value '${xrp}' has too many decimal places.`);\n    }\n    return new bignumber_js_1.default(xrp)\n        .times(DROPS_PER_XRP)\n        .integerValue(bignumber_js_1.default.ROUND_FLOOR)\n        .toString(BASE_TEN);\n}\nexports.xrpToDrops = xrpToDrops;\n//# sourceMappingURL=xrpConversion.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}