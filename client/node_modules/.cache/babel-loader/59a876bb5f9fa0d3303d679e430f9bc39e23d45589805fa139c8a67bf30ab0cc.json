{"ast":null,"code":"import Web3 from 'web3';\nimport { ethers } from 'ethers';\n\n// Initialize Web3 with MetaMask provider\nconst web3 = new Web3(window.ethereum);\n\n// Request access to the user's MetaMask accounts\nwindow.ethereum.request({\n  method: 'eth_requestAccounts'\n}).then(async accounts => {\n  const fromAccount = accounts[0];\n  try {\n    // Sending transaction\n    const txHash = await web3.eth.sendTransaction({\n      from: fromAccount,\n      to: '0xRecipientAddress',\n      // Recipient address\n      value: web3.utils.toWei('0.1', 'ether') // Amount in Wei\n    });\n    console.log('Transaction Hash:', txHash);\n\n    // Signing a message\n    const message = 'Hello, world!';\n    const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n    const signature = await signer.signMessage(message);\n    console.log('Message Signature:', signature);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n});","map":{"version":3,"names":["Web3","ethers","web3","window","ethereum","request","method","then","accounts","fromAccount","txHash","eth","sendTransaction","from","to","value","utils","toWei","console","log","message","signer","providers","Web3Provider","getSigner","signature","signMessage","error"],"sources":["/Users/mdabdurrazzak/XRPL_React_App/client/src/SignMessage.js"],"sourcesContent":["import Web3 from 'web3';\nimport { ethers } from 'ethers';\n\n// Initialize Web3 with MetaMask provider\nconst web3 = new Web3(window.ethereum);\n\n// Request access to the user's MetaMask accounts\nwindow.ethereum.request({ method: 'eth_requestAccounts' }).then(async (accounts) => {\n  const fromAccount = accounts[0];\n\n  try {\n    // Sending transaction\n    const txHash = await web3.eth.sendTransaction({\n      from: fromAccount,\n      to: '0xRecipientAddress', // Recipient address\n      value: web3.utils.toWei('0.1', 'ether'), // Amount in Wei\n    });\n\n    console.log('Transaction Hash:', txHash);\n\n    // Signing a message\n    const message = 'Hello, world!';\n    const signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n    const signature = await signer.signMessage(message);\n    console.log('Message Signature:', signature);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n});\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC;;AAEtC;AACAD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;EAAEC,MAAM,EAAE;AAAsB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAOC,QAAQ,IAAK;EAClF,MAAMC,WAAW,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAE/B,IAAI;IACF;IACA,MAAME,MAAM,GAAG,MAAMR,IAAI,CAACS,GAAG,CAACC,eAAe,CAAC;MAC5CC,IAAI,EAAEJ,WAAW;MACjBK,EAAE,EAAE,oBAAoB;MAAE;MAC1BC,KAAK,EAAEb,IAAI,CAACc,KAAK,CAACC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAE;IAC3C,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAET,MAAM,CAAC;;IAExC;IACA,MAAMU,OAAO,GAAG,eAAe;IAC/B,MAAMC,MAAM,GAAG,IAAIpB,MAAM,CAACqB,SAAS,CAACC,YAAY,CAACpB,MAAM,CAACC,QAAQ,CAAC,CAACoB,SAAS,CAAC,CAAC;IAC7E,MAAMC,SAAS,GAAG,MAAMJ,MAAM,CAACK,WAAW,CAACN,OAAO,CAAC;IACnDF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,SAAS,CAAC;EAC9C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAChC;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}